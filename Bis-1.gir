<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="4.0"/>
  <package name="libbismuth-1"/>
  <c:include name="bismuth.h"/>
  <namespace name="Bis"
             version="1"
             shared-library="libbismuth-1.so.1"
             c:identifier-prefixes="Bis"
             c:symbol-prefixes="bis">
    <class name="Album"
           c:symbol-prefix="album"
           c:type="BisAlbum"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisAlbum"
           glib:get-type="bis_album_get_type"
           glib:type-struct="AlbumClass">
      <doc xml:space="preserve"
           filename="src/bis-album.c"
           line="22">An adaptive container acting like a box or a stack.

&lt;picture&gt;
  &lt;source srcset="album-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="album-wide.png" alt="album-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="album-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="album-narrow.png" alt="album-narrow"&gt;
&lt;/picture&gt;

The `BisAlbum` widget can display its children like a [class@Gtk.Box] does
or like a [class@Gtk.Stack] does, adapting to size changes by switching
between the two modes.

When there is enough space the children are displayed side by side, otherwise
only one is displayed and the album is said to be “folded”.
The threshold is dictated by the preferred minimum sizes of the children.
When a album is folded, the children can be navigated using swipe gestures.

The “over” and “under” transition types stack the children one on top of the
other, while the “slide” transition puts the children side by side. While
navigating to a child on the side or below can be performed by swiping the
current child away, navigating to an upper child requires dragging it from
the edge where it resides. This doesn't affect non-dragging swipes.

## CSS nodes

`BisAlbum` has a single CSS node with name `album`. The node will get the
style classes `.folded` when it is folded, `.unfolded` when it's not, or none
if it hasn't computed its fold yet.</doc>
      <source-position filename="src/bis-album.h" line="46"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="bis_album_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2812">Creates a new `BisAlbum`.</doc>
        <source-position filename="src/bis-album.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2817">the new created `BisAlbum`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="bis_album_append" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2827">Adds a child to @self.</doc>
        <source-position filename="src/bis-album.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2834">the [class@AlbumPage] for @child</doc>
          <type name="AlbumPage" c:type="BisAlbumPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2829">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2830">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adjacent_child"
              c:identifier="bis_album_get_adjacent_child"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3600">Finds the previous or next navigatable child.

This will be the same child [method@Album.navigate] or swipe gestures will
navigate to.

If there's no child to navigate to, `NULL` will be returned instead.

See [property@AlbumPage:navigatable].</doc>
        <source-position filename="src/bis-album.h" line="148"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3614">the previous or next child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3602">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3603">the direction</doc>
            <type name="NavigationDirection" c:type="BisNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_navigate_back"
              c:identifier="bis_album_get_can_navigate_back"
              glib:get-property="can-navigate-back"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3480">Gets whether gestures and shortcuts for navigating backward are enabled.</doc>
        <source-position filename="src/bis-album.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3486">Whether gestures and shortcuts are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3482">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_navigate_forward"
              c:identifier="bis_album_get_can_navigate_forward"
              glib:get-property="can-navigate-forward"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="can-navigate-forward"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3540">Gets whether gestures and shortcuts for navigating forward are enabled.</doc>
        <source-position filename="src/bis-album.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3546">Whether gestures and shortcuts are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3542">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_unfold"
              c:identifier="bis_album_get_can_unfold"
              glib:get-property="can-unfold"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="can-unfold"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3068">Gets whether @self can unfold.</doc>
        <source-position filename="src/bis-album.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3074">whether @self can unfold</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3070">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="bis_album_get_child_by_name"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3668">Finds the child of @self with @name.

Returns `NULL` if there is no child with this name.

See [property@AlbumPage:name].</doc>
        <source-position filename="src/bis-album.h" line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3679">the requested child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3670">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3671">the name of the child to find</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_transition_params"
              c:identifier="bis_album_get_child_transition_params"
              glib:get-property="child-transition-params"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="child-transition-params"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3413">Gets the child transition spring parameters for @self.</doc>
        <source-position filename="src/bis-album.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3419">the child transition parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3415">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_running"
              c:identifier="bis_album_get_child_transition_running"
              glib:get-property="child-transition-running"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="child-transition-running"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3462">Gets whether a child transition is currently running for @self.</doc>
        <source-position filename="src/bis-album.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3468">whether a transition is currently running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3464">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_threshold_policy"
              c:identifier="bis_album_get_fold_threshold_policy"
              glib:get-property="fold-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3108">Gets the fold threshold policy for @self.</doc>
        <source-position filename="src/bis-album.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3110">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="bis_album_get_folded"
              glib:get-property="folded"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="folded"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3086">Gets whether @self is folded.

The album will be folded if the size allocated to it is smaller than the
sum of the minimum or natural sizes of the children (see
[property@Album:fold-threshold-policy]), it will be unfolded otherwise.</doc>
        <source-position filename="src/bis-album.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3096">whether @self is folded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3088">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="bis_album_get_homogeneous"
              glib:get-property="homogeneous"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3158">Gets whether @self is homogeneous.</doc>
        <source-position filename="src/bis-album.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3164">whether @self is homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3160">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_transition_duration"
              c:identifier="bis_album_get_mode_transition_duration"
              glib:get-property="mode-transition-duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="mode-transition-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3368">Gets the mode transition animation duration for @self.</doc>
        <source-position filename="src/bis-album.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3374">the mode transition duration, in milliseconds.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3370">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="bis_album_get_page" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3020">Returns the [class@AlbumPage] object for @child.</doc>
        <source-position filename="src/bis-album.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3027">the page object for @child</doc>
          <type name="AlbumPage" c:type="BisAlbumPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3022">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3023">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="bis_album_get_pages"
              glib:get-property="pages"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3697">Returns a [iface@Gio.ListModel] that contains the pages of the album.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <source-position filename="src/bis-album.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3707">a `GtkSelectionModel` for the album's children</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3699">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="bis_album_get_transition_type"
              glib:get-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3310">Gets the type of animation used for transitions between modes and children.</doc>
        <source-position filename="src/bis-album.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3316">the current transition type of @self</doc>
          <type name="AlbumTransitionType" c:type="BisAlbumTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3312">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="bis_album_get_visible_child"
              glib:get-property="visible-child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3206">Gets the widget currently visible when the album is folded.</doc>
        <source-position filename="src/bis-album.h" line="103"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3212">the visible child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3208">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="bis_album_get_visible_child_name"
              glib:get-property="visible-child-name"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3260">Gets the name of the currently visible child widget.</doc>
        <source-position filename="src/bis-album.h" line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3266">the name of the visible child</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3262">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_child_after"
              c:identifier="bis_album_insert_child_after"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2878">Inserts @child in the position after @sibling in the list of children.

If @sibling is `NULL`, inserts @child at the first position.</doc>
        <source-position filename="src/bis-album.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2888">the [class@AlbumPage] for @child</doc>
          <type name="AlbumPage" c:type="BisAlbumPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2880">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2881">the widget to insert</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2882">the sibling after which to insert @child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="navigate" c:identifier="bis_album_navigate" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3631">Navigates to the previous or next child.

The child must have the [property@AlbumPage:navigatable] property set to
`TRUE`, otherwise it will be skipped.

This will be the same child as returned by
[method@Album.get_adjacent_child] or navigated to via swipe gestures.</doc>
        <source-position filename="src/bis-album.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="3644">whether the visible child was changed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3633">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3634">the direction</doc>
            <type name="NavigationDirection" c:type="BisNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="bis_album_prepend" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2856">Inserts @child at the first position in @self.</doc>
        <source-position filename="src/bis-album.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2863">the [class@AlbumPage] for @child</doc>
          <type name="AlbumPage" c:type="BisAlbumPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2858">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2859">the widget to prepend</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="bis_album_remove" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2987">Removes a child widget from @self.</doc>
        <source-position filename="src/bis-album.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2989">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2990">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child_after"
              c:identifier="bis_album_reorder_child_after"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2917">Moves @child to the position after @sibling in the list of children.

If @sibling is `NULL`, moves @child to the first position.</doc>
        <source-position filename="src/bis-album.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2919">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2920">the widget to move, must be a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2921">the sibling to move @child after</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_navigate_back"
              c:identifier="bis_album_set_can_navigate_back"
              glib:set-property="can-navigate-back"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="can-navigate-back"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3498">Sets whether gestures and shortcuts for navigating backward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@AlbumPage:navigatable] set to `TRUE` can
be navigated to.</doc>
        <source-position filename="src/bis-album.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3500">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="can_navigate_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3501">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_navigate_forward"
              c:identifier="bis_album_set_can_navigate_forward"
              glib:set-property="can-navigate-forward"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="can-navigate-forward"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3558">Sets whether gestures and shortcuts for navigating forward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@AlbumPage:navigatable] set to `TRUE` can
be navigated to.</doc>
        <source-position filename="src/bis-album.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3560">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="can_navigate_forward" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3561">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_unfold"
              c:identifier="bis_album_set_can_unfold"
              glib:set-property="can-unfold"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="can-unfold"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3041">Sets whether @self can unfold.</doc>
        <source-position filename="src/bis-album.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3043">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="can_unfold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3044">whether @self can unfold</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_transition_params"
              c:identifier="bis_album_set_child_transition_params"
              glib:set-property="child-transition-params"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="child-transition-params"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3431">Sets the child transition spring parameters for @self.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/bis-album.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3433">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3434">the new parameters</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_threshold_policy"
              c:identifier="bis_album_set_fold_threshold_policy"
              glib:set-property="fold-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3125">Sets the fold threshold policy for @self.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only fold when the
children cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <source-position filename="src/bis-album.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3127">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3128">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="bis_album_set_homogeneous"
              glib:set-property="homogeneous"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3176">Sets @self to be homogeneous or not.

If set to `FALSE`, different children can have different size along the
opposite orientation.</doc>
        <source-position filename="src/bis-album.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3178">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3179">whether to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_transition_duration"
              c:identifier="bis_album_set_mode_transition_duration"
              glib:set-property="mode-transition-duration"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="mode-transition-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3386">Sets the mode transition animation duration for @self.</doc>
        <source-position filename="src/bis-album.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3388">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3389">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="bis_album_set_transition_type"
              glib:set-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3328">Sets the type of animation used for transitions between modes and children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about to
become current.</doc>
        <source-position filename="src/bis-album.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3330">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3331">the new transition type</doc>
            <type name="AlbumTransitionType" c:type="BisAlbumTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="bis_album_set_visible_child"
              glib:set-property="visible-child"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3227">Sets the widget currently visible when the album is folded.

The transition is determined by [property@Album:transition-type] and
[property@Album:child-transition-params]. The transition can be cancelled
by the user, in which case visible child will change back to the previously
visible child.</doc>
        <source-position filename="src/bis-album.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3229">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="visible_child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3230">the new child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="bis_album_set_visible_child_name"
              glib:set-property="visible-child-name"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="visible-child-name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="3281">Makes the child with the name @name visible.

See [property@Album:visible-child].</doc>
        <source-position filename="src/bis-album.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3283">a album</doc>
            <type name="Album" c:type="BisAlbum*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="3284">the name of a child</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-navigate-back"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_navigate_back"
                getter="get_can_navigate_back"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_can_navigate_back"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_can_navigate_back"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2338">Whether gestures and shortcuts for navigating backward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@AlbumPage:navigatable] set to `TRUE`
can be navigated to.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-navigate-forward"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_navigate_forward"
                getter="get_can_navigate_forward"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_can_navigate_forward"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_can_navigate_forward"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2366">Whether gestures and shortcuts for navigating forward are enabled.

The supported gestures are:

- One-finger swipe on touchscreens
- Horizontal scrolling on touchpads (usually two-finger swipe)
- Back/forward mouse buttons

The keyboard back/forward keys are also supported, as well as the
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; shortcut for horizontal orientation, or
&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; for vertical orientation.

If the orientation is horizontal, for right-to-left locales, gestures and
shortcuts are reversed.

Only children that have [property@AlbumPage:navigatable] set to `TRUE`
can be navigated to.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-unfold"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_unfold"
                getter="get_can_unfold"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_can_unfold"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_can_unfold"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2186">Whether or not the album can unfold.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-transition-params"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_transition_params"
                getter="get_child_transition_params">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_child_transition_params"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_child_transition_params"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2308">The child transition spring parameters.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="child-transition-running"
                version="1.0"
                transfer-ownership="none"
                getter="get_child_transition_running"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_child_transition_running"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2326">Whether a child transition is currently running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fold-threshold-policy"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_threshold_policy"
                getter="get_fold_threshold_policy"
                default-value="BIS_FOLD_THRESHOLD_POLICY_MINIMUM">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_fold_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_fold_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2214">Determines when the album will fold.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only fold when the
children cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="folded"
                version="1.0"
                transfer-ownership="none"
                getter="get_folded"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="bis_album_get_folded"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2198">Whether the album is folded.

The album will be folded if the size allocated to it is smaller than the
sum of the minimum or natural sizes of the children (see
[property@Album:fold-threshold-policy]), it will be unfolded otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="homogeneous"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_homogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2234">Whether the album allocates the same size for all children when folded.

If set to `FALSE`, different children can have different size along the
opposite orientation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode-transition-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_mode_transition_duration"
                getter="get_mode_transition_duration"
                default-value="250">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_mode_transition_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_mode_transition_duration"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2296">The mode transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pages"
                version="1.0"
                transfer-ownership="none"
                getter="get_pages">
        <attribute name="org.gtk.Property.get" value="bis_album_get_pages"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2394">A selection model with the album's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track and change the visible
page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="transition-type"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="BIS_ALBUM_TRANSITION_TYPE_OVER">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2280">The type of animation used for transitions between modes and children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about
to become current.</doc>
        <type name="AlbumTransitionType"/>
      </property>
      <property name="visible-child"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_visible_child"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_visible_child"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2249">The widget currently visible when the album is folded.

The transition is determined by [property@Album:transition-type] and
[property@Album:child-transition-params]. The transition can be cancelled
by the user, in which case visible child will change back to the previously
visible child.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_get_visible_child_name"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_set_visible_child_name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2266">The name of the widget currently visible when the album is folded.

See [property@Album:visible-child].</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AlbumClass"
            c:type="BisAlbumClass"
            glib:is-gtype-struct-for="Album">
      <source-position filename="src/bis-album.h" line="46"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="AlbumPage"
           c:symbol-prefix="album_page"
           c:type="BisAlbumPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="BisAlbumPage"
           glib:get-type="bis_album_page_get_type"
           glib:type-struct="AlbumPageClass">
      <doc xml:space="preserve"
           filename="src/bis-album.c"
           line="60">An auxiliary class used by [class@Album].</doc>
      <source-position filename="src/bis-album.h" line="26"/>
      <method name="get_child"
              c:identifier="bis_album_page_get_child"
              glib:get-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2672">Gets the album child to which @self belongs.</doc>
        <source-position filename="src/bis-album.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2678">the child to which @self belongs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2674">a album page</doc>
            <type name="AlbumPage" c:type="BisAlbumPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="bis_album_page_get_name"
              glib:get-property="name"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2690">Gets the name of @self.</doc>
        <source-position filename="src/bis-album.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2696">the name of @self.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2692">a album page</doc>
            <type name="AlbumPage" c:type="BisAlbumPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_navigatable"
              c:identifier="bis_album_page_get_navigatable"
              glib:get-property="navigatable"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="navigatable"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2757">Gets whether the child can be navigated to when folded.</doc>
        <source-position filename="src/bis-album.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-album.c"
               line="2763">whether @self can be navigated to when folded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2759">a album page</doc>
            <type name="AlbumPage" c:type="BisAlbumPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="bis_album_page_set_name"
              glib:set-property="name"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2708">Sets the name of the @self.</doc>
        <source-position filename="src/bis-album.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2710">a album page</doc>
            <type name="AlbumPage" c:type="BisAlbumPage*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2711">the new value to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_navigatable"
              c:identifier="bis_album_page_set_navigatable"
              glib:set-property="navigatable"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="navigatable"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="2775">Sets whether @self can be navigated to when folded.

If `FALSE`, the child will be ignored by [method@Album.get_adjacent_child],
[method@Album.navigate], and swipe gestures.

This can be used used to prevent switching to widgets like separators.</doc>
        <source-position filename="src/bis-album.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2777">a album page</doc>
            <type name="AlbumPage" c:type="BisAlbumPage*"/>
          </instance-parameter>
          <parameter name="navigatable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-album.c"
                 line="2778">whether @self can be navigated to when folded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="277">The album child to which the page belongs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="name"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_page_get_name"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_page_set_name"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="289">The name of the child page.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="navigatable"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_navigatable"
                getter="get_navigatable"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_album_page_get_navigatable"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_album_page_set_navigatable"/>
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="301">Whether the child can be navigated to when folded.

If `FALSE`, the child will be ignored by
[method@Album.get_adjacent_child], [method@Album.navigate], and swipe
gestures.

This can be used used to prevent switching to widgets like separators.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="AlbumPageClass"
            c:type="BisAlbumPageClass"
            glib:is-gtype-struct-for="AlbumPage">
      <source-position filename="src/bis-album.h" line="26"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="AlbumTransitionType"
                 version="1.0"
                 glib:type-name="BisAlbumTransitionType"
                 glib:get-type="bis_album_transition_type_get_type"
                 c:type="BisAlbumTransitionType">
      <doc xml:space="preserve"
           filename="src/bis-album.c"
           line="66">Describes the possible transitions in a [class@Album] widget.

New values may be added to this enumeration over time.</doc>
      <member name="over"
              value="0"
              c:identifier="BIS_ALBUM_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="BIS_ALBUM_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="68">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="BIS_ALBUM_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="BIS_ALBUM_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="69">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="BIS_ALBUM_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="BIS_ALBUM_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/bis-album.c"
             line="70">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
    </enumeration>
    <class name="Animation"
           c:symbol-prefix="animation"
           c:type="BisAnimation"
           version="1.0"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="BisAnimation"
           glib:get-type="bis_animation_get_type"
           glib:type-struct="AnimationClass">
      <doc xml:space="preserve"
           filename="src/bis-animation.c"
           line="15">A base class for animations.

`BisAnimation` represents an animation on a widget. It has a target that
provides a value to animate, and a state indicating whether the
animation hasn't been started yet, is playing, paused or finished.

Currently there are two concrete animation types:
[class@TimedAnimation] and [class@SpringAnimation].

`BisAnimation` will automatically skip the animation if
[property@Animation:widget] is unmapped, or if
[property@Gtk.Settings:gtk-enable-animations] is `FALSE`.

The [signal@Animation::done] signal can be used to perform an action after
the animation ends, for example hiding a widget after animating its
[property@Gtk.Widget:opacity] to 0.

`BisAnimation` will be kept alive while the animation is playing. As such,
it's safe to create an animation, start it and immediately unref it:
A fire-and-forget animation:

```c
static void
animation_cb (double    value,
              MyObject *self)
{
  // Do something with @value
}

static void
my_object_animate (MyObject *self)
{
  BisAnimationTarget *target =
    bis_callback_animation_target_new ((BisAnimationTargetFunc) animation_cb,
                                       self, NULL);
  g_autoptr (BisAnimation) animation =
    bis_timed_animation_new (widget, 0, 1, 250, target);

  bis_animation_play (animation);
}
```

If there's a chance the previous animation for the same target hasn't yet
finished, the previous animation should be stopped first, or the existing
`BisAnimation` object can be reused.</doc>
      <source-position filename="src/bis-animation.h" line="36"/>
      <method name="get_state"
              c:identifier="bis_animation_get_state"
              glib:get-property="state"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="state"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="533">Gets the current value of @self.

The state indicates whether @self is currently playing, paused, finished or
hasn't been started yet.</doc>
        <source-position filename="src/bis-animation.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation.c"
               line="542">the animation value</doc>
          <type name="AnimationState" c:type="BisAnimationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="535">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="bis_animation_get_target"
              glib:get-property="target"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="target"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="461">Gets the target @self animates.</doc>
        <source-position filename="src/bis-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation.c"
               line="467">the animation target</doc>
          <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="463">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="bis_animation_get_value"
              glib:get-property="value"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="511">Gets the current value of @self.</doc>
        <source-position filename="src/bis-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation.c"
               line="517">the current value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="513">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget"
              c:identifier="bis_animation_get_widget"
              glib:get-property="widget"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="widget"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="432">Gets the widget @self was created for.

It provides the frame clock for the animation. It's not strictly necessary
for this widget to be same as the one being animated.

The widget must be mapped in order for the animation to work. If it's not
mapped, or if it gets unmapped during an ongoing animation, the animation
will be automatically skipped.</doc>
        <source-position filename="src/bis-animation.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation.c"
               line="445">the animation widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="434">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="bis_animation_pause" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="598">Pauses a playing animation for @self.

Does nothing if the current state of @self isn't `BIS_ANIMATION_PLAYING`.

Sets [property@Animation:state] to `BIS_ANIMATION_PAUSED`.</doc>
        <source-position filename="src/bis-animation.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="600">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="play" c:identifier="bis_animation_play" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="558">Starts the animation for @self.

If the animation is playing, paused or has been completed, restarts it from
the beginning. This allows to easily play an animation regardless of whether
it's already playing or not.

Sets [property@Animation:state] to `BIS_ANIMATION_PLAYING`.

The animation will be automatically skipped if [property@Animation:widget] is
unmapped, or if [property@Gtk.Settings:gtk-enable-animations] is `FALSE`.

As such, it's not guaranteed that the animation will actually run. For
example, when using [func@GLib.idle_add] and starting an animation
immediately afterwards, it's entirely possible that the idle callback will
run after the animation has already finished, and not while it's playing.</doc>
        <source-position filename="src/bis-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="560">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="bis_animation_reset" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="716">Resets the animation for @self.

Sets [property@Animation:state] to `BIS_ANIMATION_IDLE`.</doc>
        <source-position filename="src/bis-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="718">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resume" c:identifier="bis_animation_resume" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="636">Resumes a paused animation for @self.

This function must only be used if the animation has been paused with
[method@Animation.pause].

Sets [property@Animation:state] to `BIS_ANIMATION_PLAYING`.</doc>
        <source-position filename="src/bis-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="638">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_target"
              c:identifier="bis_animation_set_target"
              glib:set-property="target"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="target"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="483">Sets the target @self animates to @target.</doc>
        <source-position filename="src/bis-animation.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="485">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="486">an animation target</doc>
            <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="skip" c:identifier="bis_animation_skip" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="667">Skips the animation for @self.

If the animation hasn't been started yet, is playing, or is paused, instantly
skips the animation to the end and causes [signal@Animation::done] to be
emitted.

Sets [property@Animation:state] to `BIS_ANIMATION_FINISHED`.</doc>
        <source-position filename="src/bis-animation.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation.c"
                 line="669">an animation</doc>
            <type name="Animation" c:type="BisAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="state"
                version="1.0"
                transfer-ownership="none"
                getter="get_state"
                default-value="BIS_ANIMATION_IDLE">
        <attribute name="org.gtk.Property.get"
                   value="bis_animation_get_state"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="388">The animation state.

The state indicates whether the animation is currently playing, paused,
finished or hasn't been started yet.</doc>
        <type name="AnimationState"/>
      </property>
      <property name="target"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_target"
                getter="get_target">
        <attribute name="org.gtk.Property.get"
                   value="bis_animation_get_target"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_animation_set_target"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="362">The target to animate.</doc>
        <type name="AnimationTarget"/>
      </property>
      <property name="value"
                version="1.0"
                transfer-ownership="none"
                getter="get_value"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_animation_get_value"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="374">The current value of the animation.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="widget"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_widget">
        <attribute name="org.gtk.Property.get"
                   value="bis_animation_get_widget"/>
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="343">The animation widget.

It provides the frame clock for the animation. It's not strictly necessary
for this widget to be same as the one being animated.

The widget must be mapped in order for the animation to work. If it's not
mapped, or if it gets unmapped during an ongoing animation, the animation
will be automatically skipped.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="done" when="last" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="406">This signal is emitted when the animation has been completed, either on its
own or via calling [method@Animation.skip].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AnimationClass"
            c:type="BisAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Animation">
      <source-position filename="src/bis-animation.h" line="36"/>
    </record>
    <enumeration name="AnimationState"
                 version="1.0"
                 glib:type-name="BisAnimationState"
                 glib:get-type="bis_animation_state_get_type"
                 c:type="BisAnimationState">
      <doc xml:space="preserve"
           filename="src/bis-animation.c"
           line="67">Describes the possible states of an [class@Animation].

The state can be controlled with [method@Animation.play],
[method@Animation.pause], [method@Animation.resume],
[method@Animation.reset] and [method@Animation.skip].</doc>
      <member name="idle"
              value="0"
              c:identifier="BIS_ANIMATION_IDLE"
              glib:nick="idle"
              glib:name="BIS_ANIMATION_IDLE">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="69">The animation hasn't started yet.</doc>
      </member>
      <member name="paused"
              value="1"
              c:identifier="BIS_ANIMATION_PAUSED"
              glib:nick="paused"
              glib:name="BIS_ANIMATION_PAUSED">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="70">The animation has been paused.</doc>
      </member>
      <member name="playing"
              value="2"
              c:identifier="BIS_ANIMATION_PLAYING"
              glib:nick="playing"
              glib:name="BIS_ANIMATION_PLAYING">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="71">The animation is currently playing.</doc>
      </member>
      <member name="finished"
              value="3"
              c:identifier="BIS_ANIMATION_FINISHED"
              glib:nick="finished"
              glib:name="BIS_ANIMATION_FINISHED">
        <doc xml:space="preserve"
             filename="src/bis-animation.c"
             line="72">The animation has finished.</doc>
      </member>
    </enumeration>
    <class name="AnimationTarget"
           c:symbol-prefix="animation_target"
           c:type="BisAnimationTarget"
           version="1.0"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="BisAnimationTarget"
           glib:get-type="bis_animation_target_get_type"
           glib:type-struct="AnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/bis-animation-target.c"
           line="13">Represents a value [class@Animation] can animate.</doc>
      <source-position filename="src/bis-animation-target.h" line="22"/>
    </class>
    <record name="AnimationTargetClass"
            c:type="BisAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="AnimationTarget">
      <source-position filename="src/bis-animation-target.h" line="22"/>
    </record>
    <callback name="AnimationTargetFunc"
              c:type="BisAnimationTargetFunc"
              version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-animation-target.h"
           line="25">Prototype for animation targets based on user callbacks.</doc>
      <source-position filename="src/bis-animation-target.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.h"
               line="27">The animation value</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.h"
               line="28">The user data provided when creating the target</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Bin"
           c:symbol-prefix="bin"
           c:type="BisBin"
           version="1.0"
           parent="Gtk.Widget"
           glib:type-name="BisBin"
           glib:get-type="bis_bin_get_type"
           glib:type-struct="BinClass">
      <doc xml:space="preserve"
           filename="src/bis-bin.c"
           line="14">A widget with one child.

&lt;picture&gt;
  &lt;source srcset="bin-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="bin.png" alt="bin"&gt;
&lt;/picture&gt;

The `BisBin` widget has only one child, set with the [property@Bin:child]
property.

It is useful for deriving subclasses, since it provides common code needed
for handling a single child widget.</doc>
      <source-position filename="src/bis-bin.h" line="29"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="bis_bin_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-bin.c"
             line="153">Creates a new `BisBin`.</doc>
        <source-position filename="src/bis-bin.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-bin.c"
               line="158">the new created `BisBin`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="bis_bin_get_child"
              glib:get-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-bin.c"
             line="168">Gets the child widget of @self.</doc>
        <source-position filename="src/bis-bin.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-bin.c"
               line="174">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-bin.c"
                 line="170">a bin</doc>
            <type name="Bin" c:type="BisBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="bis_bin_set_child"
              glib:set-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-bin.c"
             line="190">Sets the child widget of @self.</doc>
        <source-position filename="src/bis-bin.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-bin.c"
                 line="192">a bin</doc>
            <type name="Bin" c:type="BisBin*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-bin.c"
                 line="193">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get" value="bis_bin_get_child"/>
        <attribute name="org.gtk.Property.set" value="bis_bin_set_child"/>
        <doc xml:space="preserve"
             filename="src/bis-bin.c"
             line="111">The child widget of the `BisBin`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="BinClass"
            c:type="BisBinClass"
            glib:is-gtype-struct-for="Bin">
      <source-position filename="src/bis-bin.h" line="29"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="BIS_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/bis-version.h"
           line="65">Compile-time version checking. Evaluates to `TRUE` if the version
of Bismuth is greater than the required one.</doc>
      <source-position filename="src/bis-version.h" line="73"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="src/bis-version.h"
               line="67">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="src/bis-version.h"
               line="68">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="src/bis-version.h"
               line="69">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="CallbackAnimationTarget"
           c:symbol-prefix="callback_animation_target"
           c:type="BisCallbackAnimationTarget"
           version="1.0"
           parent="AnimationTarget"
           final="1"
           glib:type-name="BisCallbackAnimationTarget"
           glib:get-type="bis_callback_animation_target_get_type"
           glib:type-struct="CallbackAnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/bis-animation-target.c"
           line="21">An [class@AnimationTarget] that calls a given callback during the
animation.</doc>
      <source-position filename="src/bis-animation-target.h" line="40"/>
      <constructor name="new"
                   c:identifier="bis_callback_animation_target_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="125">Creates a new `BisAnimationTarget` that calls the given @callback during
the animation.</doc>
        <source-position filename="src/bis-animation-target.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.c"
               line="135">the newly created callback target</doc>
          <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="127">the callback to call</doc>
            <type name="AnimationTargetFunc" c:type="BisAnimationTargetFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="0">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="128">the data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     scope="async"
                     destroy="1">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="129">the function to be called when the
  callback action is finalized</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="CallbackAnimationTargetClass"
            c:type="BisCallbackAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="CallbackAnimationTarget">
      <source-position filename="src/bis-animation-target.h" line="40"/>
    </record>
    <class name="Carousel"
           c:symbol-prefix="carousel"
           c:type="BisCarousel"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisCarousel"
           glib:get-type="bis_carousel_get_type"
           glib:type-struct="CarouselClass">
      <doc xml:space="preserve"
           filename="src/bis-carousel.c"
           line="24">A paginated scrolling widget.

&lt;picture&gt;
  &lt;source srcset="carousel-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel.png" alt="carousel"&gt;
&lt;/picture&gt;

The `BisCarousel` widget can be used to display a set of pages with
swipe-based navigation between them.

[class@CarouselIndicatorDots] and [class@CarouselIndicatorLines] can be used
to provide page indicators for `BisCarousel`.

## CSS nodes

`BisCarousel` has a single CSS node with name `carousel`.</doc>
      <source-position filename="src/bis-carousel.h" line="24"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="bis_carousel_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1168">Creates a new `BisCarousel`.</doc>
        <source-position filename="src/bis-carousel.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1173">the newly created `BisCarousel`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="bis_carousel_append" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1202">Appends @child to @self.</doc>
        <source-position filename="src/bis-carousel.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1204">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1205">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_long_swipes"
              c:identifier="bis_carousel_get_allow_long_swipes"
              glib:get-property="allow-long-swipes"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1724">Gets whether to allow swiping for more than one page at a time.</doc>
        <source-position filename="src/bis-carousel.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1730">`TRUE` if long swipes are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1726">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="bis_carousel_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1634">Sets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/bis-carousel.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1640">whether @self can be dragged with mouse pointer</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1636">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_scroll_wheel"
              c:identifier="bis_carousel_get_allow_scroll_wheel"
              glib:get-property="allow-scroll-wheel"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-scroll-wheel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1679">Gets whether @self will respond to scroll wheel events.</doc>
        <source-position filename="src/bis-carousel.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1685">`TRUE` if @self will respond to scroll wheel events</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1681">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interactive"
              c:identifier="bis_carousel_get_interactive"
              glib:get-property="interactive"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="interactive"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1498">Gets whether @self can be navigated.</doc>
        <source-position filename="src/bis-carousel.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1504">whether @self can be navigated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1500">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="bis_carousel_get_n_pages"
              glib:get-property="n-pages"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="n-pages"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1449">Gets the number of pages in @self.</doc>
        <source-position filename="src/bis-carousel.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1455">the number of pages in @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1451">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_page"
              c:identifier="bis_carousel_get_nth_page"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1424">Gets the page at position @n.</doc>
        <source-position filename="src/bis-carousel.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1431">the page</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1426">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1427">index of the page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="bis_carousel_get_position"
              glib:get-property="position"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="position"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1478">Gets current scroll position in @self, unitless.

1 matches 1 page. Use [method@Carousel.scroll_to] for changing it.</doc>
        <source-position filename="src/bis-carousel.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1486">the scroll position</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1480">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_duration"
              c:identifier="bis_carousel_get_reveal_duration"
              glib:get-property="reveal-duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reveal-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1770">Gets the page reveal duration, in milliseconds.</doc>
        <source-position filename="src/bis-carousel.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1776">the duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1772">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_params"
              c:identifier="bis_carousel_get_scroll_params"
              glib:get-property="scroll-params"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="scroll-params"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1586">Gets the scroll animation spring parameters for @self.</doc>
        <source-position filename="src/bis-carousel.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1592">the animation parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1588">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="bis_carousel_get_spacing"
              glib:get-property="spacing"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="spacing"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1544">Gets spacing between pages in pixels.</doc>
        <source-position filename="src/bis-carousel.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel.c"
               line="1550">spacing between pages</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1546">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="bis_carousel_insert" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1221">Inserts @child into @self at position @position.

If position is -1, or larger than the number of pages,
@child will be appended to the end.</doc>
        <source-position filename="src/bis-carousel.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1223">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1224">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1225">the position to insert @child at</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="bis_carousel_prepend" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1183">Prepends @child to @self.</doc>
        <source-position filename="src/bis-carousel.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1185">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1186">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="bis_carousel_remove" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1362">Removes @child from @self.</doc>
        <source-position filename="src/bis-carousel.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1364">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1365">a widget to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder" c:identifier="bis_carousel_reorder" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1270">Moves @child into position @position.

If position is -1, or larger than the number of pages, @child will be moved
at the end.</doc>
        <source-position filename="src/bis-carousel.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1272">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1273">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1274">the position to move @child to</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to"
              c:identifier="bis_carousel_scroll_to"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1397">Scrolls to @widget.

If @animate is `TRUE`, the transition will be animated.</doc>
        <source-position filename="src/bis-carousel.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1399">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1400">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="animate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1401">whether to animate the transition</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="bis_carousel_set_allow_long_swipes"
              glib:set-property="allow-long-swipes"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1742">Sets whether to allow swiping for more than one page at a time.

If @allow_long_swipes is `FALSE`, each swipe can only move to the adjacent
pages.</doc>
        <source-position filename="src/bis-carousel.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1744">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1745">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="bis_carousel_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1652">Sets whether @self can be dragged with mouse pointer.

If @allow_mouse_drag is `FALSE`, dragging is only available on touch.</doc>
        <source-position filename="src/bis-carousel.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1654">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1655">whether @self can be dragged with mouse pointer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_scroll_wheel"
              c:identifier="bis_carousel_set_allow_scroll_wheel"
              glib:set-property="allow-scroll-wheel"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-scroll-wheel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1697">Sets whether @self will respond to scroll wheel events.

If @allow_scroll_wheel is `FALSE`, wheel events will be ignored.</doc>
        <source-position filename="src/bis-carousel.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1699">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="allow_scroll_wheel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1700">whether @self will respond to scroll wheel events</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interactive"
              c:identifier="bis_carousel_set_interactive"
              glib:set-property="interactive"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="interactive"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1516">Sets whether @self can be navigated.

This can be used to temporarily disable the carousel to only allow navigating
it in a certain state.</doc>
        <source-position filename="src/bis-carousel.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1518">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1519">whether @self can be navigated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_duration"
              c:identifier="bis_carousel_set_reveal_duration"
              glib:set-property="reveal-duration"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="reveal-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1788">Sets the page reveal duration, in milliseconds.

Reveal duration is used when animating adding or removing pages.</doc>
        <source-position filename="src/bis-carousel.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1790">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="reveal_duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1791">the new reveal duration value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scroll_params"
              c:identifier="bis_carousel_set_scroll_params"
              glib:set-property="scroll-params"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="scroll-params"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1604">Sets the scroll animation spring parameters for @self.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/bis-carousel.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1606">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1607">the new parameters</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="bis_carousel_set_spacing"
              glib:set-property="spacing"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="spacing"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1562">Sets spacing between pages in pixels.</doc>
        <source-position filename="src/bis-carousel.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1564">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1565">the new spacing value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_allow_long_swipes"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_allow_long_swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="991">Whether to allow swiping for more than one page at a time.

If the value is `FALSE`, each swipe can only move to the adjacent pages.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_allow_mouse_drag"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_allow_mouse_drag"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="963">Sets whether the `BisCarousel` can be dragged with mouse pointer.

If the value is `FALSE`, dragging is only available on touch.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-scroll-wheel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_scroll_wheel"
                getter="get_allow_scroll_wheel"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_allow_scroll_wheel"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_allow_scroll_wheel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="977">Whether the widget will respond to scroll wheel events.

If the value is `FALSE`, wheel events will be ignored.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interactive"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_interactive"
                getter="get_interactive"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_interactive"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_interactive"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="916">Whether the carousel can be navigated.

This can be used to temporarily disable the carousel to only allow
navigating it in a certain state.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-pages"
                version="1.0"
                transfer-ownership="none"
                getter="get_n_pages"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_n_pages"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="886">The number of pages in a `BisCarousel`.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position"
                version="1.0"
                transfer-ownership="none"
                getter="get_position"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_position"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="900">Current scrolling position, unitless.

1 matches 1 page. Use [method@Carousel.scroll_to] for changing it.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reveal-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_duration"
                getter="get_reveal_duration"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1005">Page reveal duration, in milliseconds.

Reveal duration is used when animating adding or removing pages.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="scroll-params"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_scroll_params"
                getter="get_scroll_params">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_scroll_params"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_scroll_params"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="945">Scroll animation spring parameters.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="spacing"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_spacing"
                getter="get_spacing"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_get_spacing"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_set_spacing"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="931">Spacing between pages in pixels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="page-changed" when="last" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel.c"
             line="1027">This signal is emitted after a page has been changed.

It can be used to implement "infinite scrolling" by amending the pages
after every scroll.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel.c"
                 line="1030">current page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CarouselClass"
            c:type="BisCarouselClass"
            glib:is-gtype-struct-for="Carousel">
      <source-position filename="src/bis-carousel.h" line="24"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorDots"
           c:symbol-prefix="carousel_indicator_dots"
           c:type="BisCarouselIndicatorDots"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisCarouselIndicatorDots"
           glib:get-type="bis_carousel_indicator_dots_get_type"
           glib:type-struct="CarouselIndicatorDotsClass">
      <doc xml:space="preserve"
           filename="src/bis-carousel-indicator-dots.c"
           line="26">A dots indicator for [class@Carousel].

&lt;picture&gt;
  &lt;source srcset="carousel-indicator-dots-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel-indicator-dots.png" alt="carousel-indicator-dots"&gt;
&lt;/picture&gt;

The `BisCarouselIndicatorDots` widget shows a set of dots for each page of a
given [class@Carousel]. The dot representing the carousel's active page is
larger and more opaque than the others, the transition to the active and
inactive state is gradual to match the carousel's position.

See also [class@CarouselIndicatorLines].

## CSS nodes

`BisCarouselIndicatorDots` has a single CSS node with name
`carouselindicatordots`.</doc>
      <source-position filename="src/bis-carousel-indicator-dots.h" line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="bis_carousel_indicator_dots_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-dots.c"
             line="370">Creates a new `BisCarouselIndicatorDots`.</doc>
        <source-position filename="src/bis-carousel-indicator-dots.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel-indicator-dots.c"
               line="375">the newly created `BisCarouselIndicatorDots`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="bis_carousel_indicator_dots_get_carousel"
              glib:get-property="carousel"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-dots.c"
             line="385">Gets the displayed carousel.</doc>
        <source-position filename="src/bis-carousel-indicator-dots.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-carousel-indicator-dots.c"
               line="391">the displayed carousel</doc>
          <type name="Carousel" c:type="BisCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-dots.c"
                 line="387">an indicator</doc>
            <type name="CarouselIndicatorDots"
                  c:type="BisCarouselIndicatorDots*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="bis_carousel_indicator_dots_set_carousel"
              glib:set-property="carousel"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-dots.c"
             line="403">Sets the displayed carousel.</doc>
        <source-position filename="src/bis-carousel-indicator-dots.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-dots.c"
                 line="405">an indicator</doc>
            <type name="CarouselIndicatorDots"
                  c:type="BisCarouselIndicatorDots*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-dots.c"
                 line="406">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_indicator_dots_get_carousel"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_indicator_dots_set_carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-dots.c"
             line="338">The displayed carousel.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorDotsClass"
            c:type="BisCarouselIndicatorDotsClass"
            glib:is-gtype-struct-for="CarouselIndicatorDots">
      <source-position filename="src/bis-carousel-indicator-dots.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorLines"
           c:symbol-prefix="carousel_indicator_lines"
           c:type="BisCarouselIndicatorLines"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisCarouselIndicatorLines"
           glib:get-type="bis_carousel_indicator_lines_get_type"
           glib:type-struct="CarouselIndicatorLinesClass">
      <doc xml:space="preserve"
           filename="src/bis-carousel-indicator-lines.c"
           line="25">A lines indicator for [class@Carousel].

&lt;picture&gt;
  &lt;source srcset="carousel-indicator-dots-lines.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="carousel-indicator-lines.png" alt="carousel-indicator-lines"&gt;
&lt;/picture&gt;

The `BisCarouselIndicatorLines` widget shows a set of lines for each page of
a given [class@Carousel]. The carousel's active page is shown as another line
that moves between them to match the carousel's position.

See also [class@CarouselIndicatorDots].

## CSS nodes

`BisCarouselIndicatorLines` has a single CSS node with name
`carouselindicatorlines`.</doc>
      <source-position filename="src/bis-carousel-indicator-lines.h"
                       line="23"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="bis_carousel_indicator_lines_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-lines.c"
             line="355">Creates a new `BisCarouselIndicatorLines`.</doc>
        <source-position filename="src/bis-carousel-indicator-lines.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-carousel-indicator-lines.c"
               line="360">the newly created `BisCarouselIndicatorLines`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="bis_carousel_indicator_lines_get_carousel"
              glib:get-property="carousel"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-lines.c"
             line="370">Gets the displayed carousel.</doc>
        <source-position filename="src/bis-carousel-indicator-lines.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-carousel-indicator-lines.c"
               line="376">the displayed carousel</doc>
          <type name="Carousel" c:type="BisCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-lines.c"
                 line="372">an indicator</doc>
            <type name="CarouselIndicatorLines"
                  c:type="BisCarouselIndicatorLines*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="bis_carousel_indicator_lines_set_carousel"
              glib:set-property="carousel"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-lines.c"
             line="388">Sets the displayed carousel.</doc>
        <source-position filename="src/bis-carousel-indicator-lines.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-lines.c"
                 line="390">an indicator</doc>
            <type name="CarouselIndicatorLines"
                  c:type="BisCarouselIndicatorLines*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-carousel-indicator-lines.c"
                 line="391">a carousel</doc>
            <type name="Carousel" c:type="BisCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <attribute name="org.gtk.Property.get"
                   value="bis_carousel_indicator_lines_get_carousel"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_carousel_indicator_lines_set_carousel"/>
        <doc xml:space="preserve"
             filename="src/bis-carousel-indicator-lines.c"
             line="323">The displayed carousel.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorLinesClass"
            c:type="BisCarouselIndicatorLinesClass"
            glib:is-gtype-struct-for="CarouselIndicatorLines">
      <source-position filename="src/bis-carousel-indicator-lines.h"
                       line="23"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <function-macro name="DEPRECATED_IN_1_1_FOR"
                    c:identifier="BIS_DEPRECATED_IN_1_1_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="129"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_2_FOR"
                    c:identifier="BIS_DEPRECATED_IN_1_2_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="147"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_3_FOR"
                    c:identifier="BIS_DEPRECATED_IN_1_3_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="165"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_1_FOR"
                    c:identifier="BIS_DEPRECATED_TYPE_IN_1_1_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="131"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_2_FOR"
                    c:identifier="BIS_DEPRECATED_TYPE_IN_1_2_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="149"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_TYPE_IN_1_3_FOR"
                    c:identifier="BIS_DEPRECATED_TYPE_IN_1_3_FOR"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="167"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DURATION_INFINITE"
              value="4294967295"
              c:type="BIS_DURATION_INFINITE">
      <doc xml:space="preserve"
           filename="src/bis-animation.h"
           line="23">Indicates an [class@Animation] with an infinite duration.

This value is mostly used internally.</doc>
      <source-position filename="src/bis-animation.h" line="31"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="BIS_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="53"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Easing"
                 version="1.0"
                 glib:type-name="BisEasing"
                 glib:get-type="bis_easing_get_type"
                 c:type="BisEasing">
      <doc xml:space="preserve"
           filename="src/bis-easing.c"
           line="22">Describes the available easing functions for use with
[class@TimedAnimation].

New values may be added to this enumeration over time.</doc>
      <member name="linear"
              value="0"
              c:identifier="BIS_LINEAR"
              glib:nick="linear"
              glib:name="BIS_LINEAR">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="24">Linear tweening.</doc>
      </member>
      <member name="ease_in_quad"
              value="1"
              c:identifier="BIS_EASE_IN_QUAD"
              glib:nick="ease-in-quad"
              glib:name="BIS_EASE_IN_QUAD">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="25">Quadratic tweening.</doc>
      </member>
      <member name="ease_out_quad"
              value="2"
              c:identifier="BIS_EASE_OUT_QUAD"
              glib:nick="ease-out-quad"
              glib:name="BIS_EASE_OUT_QUAD">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="26">Quadratic tweening, inverse of `BIS_EASE_IN_QUAD`.</doc>
      </member>
      <member name="ease_in_out_quad"
              value="3"
              c:identifier="BIS_EASE_IN_OUT_QUAD"
              glib:nick="ease-in-out-quad"
              glib:name="BIS_EASE_IN_OUT_QUAD">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="27">Quadratic tweening, combining `BIS_EASE_IN_QUAD` and
  `BIS_EASE_OUT_QUAD`.</doc>
      </member>
      <member name="ease_in_cubic"
              value="4"
              c:identifier="BIS_EASE_IN_CUBIC"
              glib:nick="ease-in-cubic"
              glib:name="BIS_EASE_IN_CUBIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="29">Cubic tweening.</doc>
      </member>
      <member name="ease_out_cubic"
              value="5"
              c:identifier="BIS_EASE_OUT_CUBIC"
              glib:nick="ease-out-cubic"
              glib:name="BIS_EASE_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="30">Cubic tweening, inverse of `BIS_EASE_IN_CUBIC`.</doc>
      </member>
      <member name="ease_in_out_cubic"
              value="6"
              c:identifier="BIS_EASE_IN_OUT_CUBIC"
              glib:nick="ease-in-out-cubic"
              glib:name="BIS_EASE_IN_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="31">Cubic tweening, combining `BIS_EASE_IN_CUBIC` and
  `BIS_EASE_OUT_CUBIC`.</doc>
      </member>
      <member name="ease_in_quart"
              value="7"
              c:identifier="BIS_EASE_IN_QUART"
              glib:nick="ease-in-quart"
              glib:name="BIS_EASE_IN_QUART">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="33">Quartic tweening.</doc>
      </member>
      <member name="ease_out_quart"
              value="8"
              c:identifier="BIS_EASE_OUT_QUART"
              glib:nick="ease-out-quart"
              glib:name="BIS_EASE_OUT_QUART">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="34">Quartic tweening, inverse of `BIS_EASE_IN_QUART`.</doc>
      </member>
      <member name="ease_in_out_quart"
              value="9"
              c:identifier="BIS_EASE_IN_OUT_QUART"
              glib:nick="ease-in-out-quart"
              glib:name="BIS_EASE_IN_OUT_QUART">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="35">Quartic tweening, combining `BIS_EASE_IN_QUART` and
  `BIS_EASE_OUT_QUART`.</doc>
      </member>
      <member name="ease_in_quint"
              value="10"
              c:identifier="BIS_EASE_IN_QUINT"
              glib:nick="ease-in-quint"
              glib:name="BIS_EASE_IN_QUINT">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="37">Quintic tweening.</doc>
      </member>
      <member name="ease_out_quint"
              value="11"
              c:identifier="BIS_EASE_OUT_QUINT"
              glib:nick="ease-out-quint"
              glib:name="BIS_EASE_OUT_QUINT">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="38">Quintic tweening, inverse of `BIS_EASE_IN_QUINT`.</doc>
      </member>
      <member name="ease_in_out_quint"
              value="12"
              c:identifier="BIS_EASE_IN_OUT_QUINT"
              glib:nick="ease-in-out-quint"
              glib:name="BIS_EASE_IN_OUT_QUINT">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="39">Quintic tweening, combining `BIS_EASE_IN_QUINT` and
  `BIS_EASE_OUT_QUINT`.</doc>
      </member>
      <member name="ease_in_sine"
              value="13"
              c:identifier="BIS_EASE_IN_SINE"
              glib:nick="ease-in-sine"
              glib:name="BIS_EASE_IN_SINE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="41">Sine wave tweening.</doc>
      </member>
      <member name="ease_out_sine"
              value="14"
              c:identifier="BIS_EASE_OUT_SINE"
              glib:nick="ease-out-sine"
              glib:name="BIS_EASE_OUT_SINE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="42">Sine wave tweening, inverse of `BIS_EASE_IN_SINE`.</doc>
      </member>
      <member name="ease_in_out_sine"
              value="15"
              c:identifier="BIS_EASE_IN_OUT_SINE"
              glib:nick="ease-in-out-sine"
              glib:name="BIS_EASE_IN_OUT_SINE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="43">Sine wave tweening, combining `BIS_EASE_IN_SINE` and
  `BIS_EASE_OUT_SINE`.</doc>
      </member>
      <member name="ease_in_expo"
              value="16"
              c:identifier="BIS_EASE_IN_EXPO"
              glib:nick="ease-in-expo"
              glib:name="BIS_EASE_IN_EXPO">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="45">Exponential tweening.</doc>
      </member>
      <member name="ease_out_expo"
              value="17"
              c:identifier="BIS_EASE_OUT_EXPO"
              glib:nick="ease-out-expo"
              glib:name="BIS_EASE_OUT_EXPO">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="46">Exponential tweening, inverse of `BIS_EASE_IN_EXPO`.</doc>
      </member>
      <member name="ease_in_out_expo"
              value="18"
              c:identifier="BIS_EASE_IN_OUT_EXPO"
              glib:nick="ease-in-out-expo"
              glib:name="BIS_EASE_IN_OUT_EXPO">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="47">Exponential tweening, combining `BIS_EASE_IN_EXPO` and
  `BIS_EASE_OUT_EXPO`.</doc>
      </member>
      <member name="ease_in_circ"
              value="19"
              c:identifier="BIS_EASE_IN_CIRC"
              glib:nick="ease-in-circ"
              glib:name="BIS_EASE_IN_CIRC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="49">Circular tweening.</doc>
      </member>
      <member name="ease_out_circ"
              value="20"
              c:identifier="BIS_EASE_OUT_CIRC"
              glib:nick="ease-out-circ"
              glib:name="BIS_EASE_OUT_CIRC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="50">Circular tweening, inverse of `BIS_EASE_IN_CIRC`.</doc>
      </member>
      <member name="ease_in_out_circ"
              value="21"
              c:identifier="BIS_EASE_IN_OUT_CIRC"
              glib:nick="ease-in-out-circ"
              glib:name="BIS_EASE_IN_OUT_CIRC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="51">Circular tweening, combining `BIS_EASE_IN_CIRC` and
  `BIS_EASE_OUT_CIRC`.</doc>
      </member>
      <member name="ease_in_elastic"
              value="22"
              c:identifier="BIS_EASE_IN_ELASTIC"
              glib:nick="ease-in-elastic"
              glib:name="BIS_EASE_IN_ELASTIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="53">Elastic tweening, with offshoot on start.</doc>
      </member>
      <member name="ease_out_elastic"
              value="23"
              c:identifier="BIS_EASE_OUT_ELASTIC"
              glib:nick="ease-out-elastic"
              glib:name="BIS_EASE_OUT_ELASTIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="54">Elastic tweening, with offshoot on end, inverse of
  `BIS_EASE_IN_ELASTIC`.</doc>
      </member>
      <member name="ease_in_out_elastic"
              value="24"
              c:identifier="BIS_EASE_IN_OUT_ELASTIC"
              glib:nick="ease-in-out-elastic"
              glib:name="BIS_EASE_IN_OUT_ELASTIC">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="56">Elastic tweening, with offshoot on both ends,
  combining `BIS_EASE_IN_ELASTIC` and `BIS_EASE_OUT_ELASTIC`.</doc>
      </member>
      <member name="ease_in_back"
              value="25"
              c:identifier="BIS_EASE_IN_BACK"
              glib:nick="ease-in-back"
              glib:name="BIS_EASE_IN_BACK">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="58">Overshooting cubic tweening, with backtracking on start.</doc>
      </member>
      <member name="ease_out_back"
              value="26"
              c:identifier="BIS_EASE_OUT_BACK"
              glib:nick="ease-out-back"
              glib:name="BIS_EASE_OUT_BACK">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="59">Overshooting cubic tweening, with backtracking on end,
  inverse of `BIS_EASE_IN_BACK`.</doc>
      </member>
      <member name="ease_in_out_back"
              value="27"
              c:identifier="BIS_EASE_IN_OUT_BACK"
              glib:nick="ease-in-out-back"
              glib:name="BIS_EASE_IN_OUT_BACK">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="61">Overshooting cubic tweening, with backtracking on both
  ends, combining `BIS_EASE_IN_BACK` and `BIS_EASE_OUT_BACK`.</doc>
      </member>
      <member name="ease_in_bounce"
              value="28"
              c:identifier="BIS_EASE_IN_BOUNCE"
              glib:nick="ease-in-bounce"
              glib:name="BIS_EASE_IN_BOUNCE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="63">Exponentially decaying parabolic (bounce) tweening,
  on start.</doc>
      </member>
      <member name="ease_out_bounce"
              value="29"
              c:identifier="BIS_EASE_OUT_BOUNCE"
              glib:nick="ease-out-bounce"
              glib:name="BIS_EASE_OUT_BOUNCE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="65">Exponentially decaying parabolic (bounce) tweening,
  with bounce on end, inverse of `BIS_EASE_IN_BOUNCE`.</doc>
      </member>
      <member name="ease_in_out_bounce"
              value="30"
              c:identifier="BIS_EASE_IN_OUT_BOUNCE"
              glib:nick="ease-in-out-bounce"
              glib:name="BIS_EASE_IN_OUT_BOUNCE">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="67">Exponentially decaying parabolic (bounce) tweening,
  with bounce on both ends, combining `BIS_EASE_IN_BOUNCE` and
  `BIS_EASE_OUT_BOUNCE`.</doc>
      </member>
      <function name="ease" c:identifier="bis_easing_ease" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="430">Computes easing with @easing for @value.

@value should generally be in the [0, 1] range.</doc>
        <source-position filename="src/bis-easing.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-easing.c"
               line="439">the easing for @value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-easing.c"
                 line="432">an easing value</doc>
            <type name="Easing" c:type="BisEasing"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-easing.c"
                 line="433">a value to ease</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="EnumListItem"
           c:symbol-prefix="enum_list_item"
           c:type="BisEnumListItem"
           version="1.0"
           parent="GObject.Object"
           final="1"
           glib:type-name="BisEnumListItem"
           glib:get-type="bis_enum_list_item_get_type"
           glib:type-struct="EnumListItemClass">
      <doc xml:space="preserve"
           filename="src/bis-enum-list-model.c"
           line="48">`BisEnumListItem` is the type of items in a [class@EnumListModel].</doc>
      <source-position filename="src/bis-enum-list-model.h" line="22"/>
      <method name="get_name"
              c:identifier="bis_enum_list_item_get_name"
              glib:get-property="name"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="name"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="176">Gets the enum value name.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-enum-list-model.c"
               line="181">the enum value name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="BisEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick"
              c:identifier="bis_enum_list_item_get_nick"
              glib:get-property="nick"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="nick"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="193">Gets the enum value nick.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-enum-list-model.c"
               line="198">the enum value nick</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="BisEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="bis_enum_list_item_get_value"
              glib:get-property="value"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="159">Gets the enum value.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-enum-list-model.c"
               line="164">the enum value</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListItem" c:type="BisEnumListItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                version="1.0"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="bis_enum_list_item_get_name"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="117">The enum value name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nick"
                version="1.0"
                transfer-ownership="none"
                getter="get_nick"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="bis_enum_list_item_get_nick"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="129">The enum value nick.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                version="1.0"
                transfer-ownership="none"
                getter="get_value"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="bis_enum_list_item_get_value"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="105">The enum value.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="EnumListItemClass"
            c:type="BisEnumListItemClass"
            glib:is-gtype-struct-for="EnumListItem">
      <source-position filename="src/bis-enum-list-model.h" line="22"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="EnumListModel"
           c:symbol-prefix="enum_list_model"
           c:type="BisEnumListModel"
           version="1.0"
           parent="GObject.Object"
           final="1"
           glib:type-name="BisEnumListModel"
           glib:get-type="bis_enum_list_model_get_type"
           glib:type-struct="EnumListModelClass">
      <doc xml:space="preserve"
           filename="src/bis-enum-list-model.c"
           line="15">A [iface@Gio.ListModel] representing values of a given enum.

`BisEnumListModel` contains objects of type [class@EnumListItem].</doc>
      <source-position filename="src/bis-enum-list-model.h" line="36"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new"
                   c:identifier="bis_enum_list_model_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="335">Creates a new `BisEnumListModel` for @enum_type.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-enum-list-model.c"
               line="341">the newly created `BisEnumListModel`</doc>
          <type name="EnumListModel" c:type="BisEnumListModel*"/>
        </return-value>
        <parameters>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-enum-list-model.c"
                 line="337">the type of the enum to construct the model from</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="find_position"
              c:identifier="bis_enum_list_model_find_position"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="370">Finds the position of a given enum value in @self.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListModel" c:type="BisEnumListModel*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-enum-list-model.c"
                 line="372">an enum value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enum_type"
              c:identifier="bis_enum_list_model_get_enum_type"
              glib:get-property="enum-type"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="enum-type"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="353">Gets the type of the enum represented by @self.</doc>
        <source-position filename="src/bis-enum-list-model.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-enum-list-model.c"
               line="358">the enum type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumListModel" c:type="BisEnumListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="enum-type"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_enum_type">
        <attribute name="org.gtk.Property.get"
                   value="bis_enum_list_model_get_enum_type"/>
        <doc xml:space="preserve"
             filename="src/bis-enum-list-model.c"
             line="281">The type of the enum represented by the model.</doc>
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <record name="EnumListModelClass"
            c:type="BisEnumListModelClass"
            glib:is-gtype-struct-for="EnumListModel">
      <source-position filename="src/bis-enum-list-model.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="FoldThresholdPolicy"
                 version="1.0"
                 glib:type-name="BisFoldThresholdPolicy"
                 glib:get-type="bis_fold_threshold_policy_get_type"
                 c:type="BisFoldThresholdPolicy">
      <doc xml:space="preserve"
           filename="src/bis-fold-threshold-policy.c"
           line="10">Determines when [class@Lapel] and [class@Album] will fold.</doc>
      <member name="minimum"
              value="0"
              c:identifier="BIS_FOLD_THRESHOLD_POLICY_MINIMUM"
              glib:nick="minimum"
              glib:name="BIS_FOLD_THRESHOLD_POLICY_MINIMUM">
        <doc xml:space="preserve"
             filename="src/bis-fold-threshold-policy.c"
             line="12">Folding is based on the minimum size</doc>
      </member>
      <member name="natural"
              value="1"
              c:identifier="BIS_FOLD_THRESHOLD_POLICY_NATURAL"
              glib:nick="natural"
              glib:name="BIS_FOLD_THRESHOLD_POLICY_NATURAL">
        <doc xml:space="preserve"
             filename="src/bis-fold-threshold-policy.c"
             line="13">Folding is based on the natural size</doc>
      </member>
    </enumeration>
    <class name="Hugger"
           c:symbol-prefix="hugger"
           c:type="BisHugger"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisHugger"
           glib:get-type="bis_hugger_get_type"
           glib:type-struct="HuggerClass">
      <doc xml:space="preserve"
           filename="src/bis-hugger.c"
           line="27">A best fit container.

&lt;picture&gt;
  &lt;source srcset="hugger-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="hugger-wide.png" alt="hugger-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="hugger-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="hugger-narrow.png" alt="hugger-narrow"&gt;
&lt;/picture&gt;

The `BisHugger` widget is a container which only shows the first of its
children that fits in the available size. It is convenient to offer different
widgets to represent the same data with different levels of detail, making
the widget seem to squeeze itself to fit in the available space.

Transitions between children can be animated as fades. This can be controlled
with [property@Hugger:transition-type].

## CSS nodes

`BisHugger` has a single CSS node with name `hugger`.</doc>
      <source-position filename="src/bis-hugger.h" line="38"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="bis_hugger_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1344">Creates a new `BisHugger`.</doc>
        <source-position filename="src/bis-hugger.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1349">the newly created `BisHugger`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="bis_hugger_add" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1359">Adds a child to @self.</doc>
        <source-position filename="src/bis-hugger.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1366">the [class@HuggerPage] for @child</doc>
          <type name="HuggerPage" c:type="BisHuggerPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1361">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1362">the widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_none"
              c:identifier="bis_hugger_get_allow_none"
              glib:get-property="allow-none"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="allow-none"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1563">Gets whether to allow squeezing beyond the last child's minimum size.</doc>
        <source-position filename="src/bis-hugger.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1569">whether @self allows squeezing beyond the last child</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1565">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="bis_hugger_get_homogeneous"
              glib:get-property="homogeneous"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1461">Gets whether all children have the same size for the opposite orientation.</doc>
        <source-position filename="src/bis-hugger.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1467">whether @self is homogeneous</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1463">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="bis_hugger_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="interpolate-size"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1715">Gets whether @self interpolates its size when changing the visible child.</doc>
        <source-position filename="src/bis-hugger.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1721">whether the size is interpolated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1717">A hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="bis_hugger_get_page" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1422">Returns the [class@HuggerPage] object for @child.</doc>
        <source-position filename="src/bis-hugger.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1429">the page object for @child</doc>
          <type name="HuggerPage" c:type="BisHuggerPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1424">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1425">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="bis_hugger_get_pages"
              glib:get-property="pages"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="pages"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1860">Returns a [iface@Gio.ListModel] that contains the pages of @self.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track the visible page.</doc>
        <source-position filename="src/bis-hugger.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1869">a `GtkSelectionModel` for the hugger's children</doc>
          <type name="Gtk.SelectionModel" c:type="GtkSelectionModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1862">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_switch_threshold_policy"
              c:identifier="bis_hugger_get_switch_threshold_policy"
              glib:get-property="switch-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="switch-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1511">Gets the switch threshold policy for @self.</doc>
        <source-position filename="src/bis-hugger.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1513">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="bis_hugger_get_transition_duration"
              glib:get-property="transition-duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="transition-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1612">Gets the transition animation duration for @self.</doc>
        <source-position filename="src/bis-hugger.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1618">the transition duration, in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1614">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="bis_hugger_get_transition_running"
              glib:get-property="transition-running"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="transition-running"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1693">Gets whether a transition is currently running for @self.

If a transition is impossible, the property value will be set to `TRUE` and
then immediately to `FALSE`, so it's possible to rely on its notifications
to know that a transition has happened.</doc>
        <source-position filename="src/bis-hugger.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1703">whether a transition is currently running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1695">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="bis_hugger_get_transition_type"
              glib:get-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1653">Gets the type of animation used for transitions between children in @self.</doc>
        <source-position filename="src/bis-hugger.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1659">the current transition type of @self</doc>
          <type name="HuggerTransitionType" c:type="BisHuggerTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1655">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="bis_hugger_get_visible_child"
              glib:get-property="visible-child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="visible-child"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1443">Gets the currently visible child of @self.</doc>
        <source-position filename="src/bis-hugger.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1449">the visible child</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1445">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xalign"
              c:identifier="bis_hugger_get_xalign"
              glib:get-property="xalign"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="xalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1762">Gets the horizontal alignment, from 0 (start) to 1 (end).</doc>
        <source-position filename="src/bis-hugger.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1768">the alignment value</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1764">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_yalign"
              c:identifier="bis_hugger_get_yalign"
              glib:get-property="yalign"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="yalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1811">Gets the vertical alignment, from 0 (top) to 1 (bottom).</doc>
        <source-position filename="src/bis-hugger.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1817">the alignment value</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1813">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="bis_hugger_remove" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1389">Removes a child widget from @self.</doc>
        <source-position filename="src/bis-hugger.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1391">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1392">the child to remove</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_none"
              c:identifier="bis_hugger_set_allow_none"
              glib:set-property="allow-none"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="allow-none"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1581">Sets whether to allow squeezing beyond the last child's minimum size.

If set to `TRUE`, the hugger can shrink to the point where no child can be
shown. This is functionally equivalent to appending a widget with 0×0 minimum
size.</doc>
        <source-position filename="src/bis-hugger.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1583">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="allow_none" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1584">whether @self allows squeezing beyond the last child</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="bis_hugger_set_homogeneous"
              glib:set-property="homogeneous"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1479">Sets whether all children have the same size for the opposite orientation.

For example, if a hugger is horizontal and is homogeneous, it will request
the same height for all its children. If it isn't, the hugger may change
size when a different child becomes visible.</doc>
        <source-position filename="src/bis-hugger.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1481">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1482">whether @self is homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="bis_hugger_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="interpolate-size"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1733">Sets whether @self interpolates its size when changing the visible child.

If `TRUE`, the hugger will interpolate its size between the one of the
previous visible child and the one of the new visible child, according to the
set transition duration and the orientation, e.g. if the hugger is
horizontal, it will interpolate the its height.</doc>
        <source-position filename="src/bis-hugger.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1735">A hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1736">whether to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_switch_threshold_policy"
              c:identifier="bis_hugger_set_switch_threshold_policy"
              glib:set-property="switch-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="switch-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1528">Sets the switch threshold policy for @self.

Determines when the hugger will switch children.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only switch when the
visible child cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`,
it will switch as soon as the visible child doesn't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately switching.</doc>
        <source-position filename="src/bis-hugger.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1530">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1531">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="bis_hugger_set_transition_duration"
              glib:set-property="transition-duration"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="transition-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1630">Sets the transition animation duration for @self.</doc>
        <source-position filename="src/bis-hugger.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1632">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1633">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="bis_hugger_set_transition_type"
              glib:set-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1671">Sets the type of animation used for transitions between children in @self.</doc>
        <source-position filename="src/bis-hugger.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1673">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1674">the new transition type</doc>
            <type name="HuggerTransitionType"
                  c:type="BisHuggerTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xalign"
              c:identifier="bis_hugger_set_xalign"
              glib:set-property="xalign"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="xalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1780">Sets the horizontal alignment, from 0 (start) to 1 (end).

This affects the children allocation during transitions, when they exceed the
size of the hugger.

For example, 0.5 means the child will be centered, 0 means it will keep the
start side aligned and overflow the end side, and 1 means the opposite.</doc>
        <source-position filename="src/bis-hugger.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1782">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1783">the new alignment value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_yalign"
              c:identifier="bis_hugger_set_yalign"
              glib:set-property="yalign"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="yalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1829">Sets the vertical alignment, from 0 (top) to 1 (bottom).

This affects the children allocation during transitions, when they exceed the
size of the hugger.

For example, 0.5 means the child will be centered, 0 means it will keep the
top side aligned and overflow the bottom side, and 1 means the opposite.</doc>
        <source-position filename="src/bis-hugger.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1831">a hugger</doc>
            <type name="Hugger" c:type="BisHugger*"/>
          </instance-parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1832">the new alignment value</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-none"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_none"
                getter="get_allow_none"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_allow_none"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_allow_none"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1091">Whether to allow squeezing beyond the last child's minimum size.

If set to `TRUE`, the hugger can shrink to the point where no child can
be shown. This is functionally equivalent to appending a widget with 0×0
minimum size.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="homogeneous"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_homogeneous"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_homogeneous"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1053">Whether all children have the same size for the opposite orientation.

For example, if a hugger is horizontal and is homogeneous, it will
request the same height for all its children. If it isn't, the hugger may
change size when a different child becomes visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_interpolate_size"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_interpolate_size"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1148">Whether the hugger interpolates its size when changing the visible child.

If `TRUE`, the hugger will interpolate its size between the one of the
previous visible child and the one of the new visible child, according to
the set transition duration and the orientation, e.g. if the hugger is
horizontal, it will interpolate the its height.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pages"
                version="1.0"
                transfer-ownership="none"
                getter="get_pages">
        <attribute name="org.gtk.Property.get" value="bis_hugger_get_pages"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1203">A selection model with the hugger's pages.

This can be used to keep an up-to-date view. The model also implements
[iface@Gtk.SelectionModel] and can be used to track the visible page.</doc>
        <type name="Gtk.SelectionModel"/>
      </property>
      <property name="switch-threshold-policy"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_switch_threshold_policy"
                getter="get_switch_threshold_policy"
                default-value="BIS_FOLD_THRESHOLD_POLICY_NATURAL">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_switch_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_switch_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1069">The switch threshold policy.

Determines when the hugger will switch children.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, it will only switch when the
visible child cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`,
it will switch as soon as the visible child doesn't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately switching.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="transition-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration"
                default-value="200">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_transition_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_transition_duration"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1107">The transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                version="1.0"
                transfer-ownership="none"
                getter="get_transition_running"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_transition_running"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1132">Whether a transition is currently running.

If a transition is impossible, the property value will be set to `TRUE` and
then immediately to `FALSE`, so it's possible to rely on its notifications
to know that a transition has happened.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="BIS_HUGGER_TRANSITION_TYPE_NONE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1119">The type of animation used for transitions between children.</doc>
        <type name="HuggerTransitionType"/>
      </property>
      <property name="visible-child"
                version="1.0"
                transfer-ownership="none"
                getter="get_visible_child">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_get_visible_child"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1041">The currently visible child.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="xalign"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_xalign"
                getter="get_xalign"
                default-value="0.500000">
        <attribute name="org.gtk.Property.get" value="bis_hugger_get_xalign"/>
        <attribute name="org.gtk.Property.set" value="bis_hugger_set_xalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1165">The horizontal alignment, from 0 (start) to 1 (end).

This affects the children allocation during transitions, when they exceed
the size of the hugger.

For example, 0.5 means the child will be centered, 0 means it will keep the
start side aligned and overflow the end side, and 1 means the opposite.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="yalign"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_yalign"
                getter="get_yalign"
                default-value="0.500000">
        <attribute name="org.gtk.Property.get" value="bis_hugger_get_yalign"/>
        <attribute name="org.gtk.Property.set" value="bis_hugger_set_yalign"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1184">The vertical alignment, from 0 (top) to 1 (bottom).

This affects the children allocation during transitions, when they exceed
the size of the hugger.

For example, 0.5 means the child will be centered, 0 means it will keep the
top side aligned and overflow the bottom side, and 1 means the opposite.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="HuggerClass"
            c:type="BisHuggerClass"
            glib:is-gtype-struct-for="Hugger">
      <source-position filename="src/bis-hugger.h" line="38"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="HuggerPage"
           c:symbol-prefix="hugger_page"
           c:type="BisHuggerPage"
           parent="GObject.Object"
           final="1"
           glib:type-name="BisHuggerPage"
           glib:get-type="bis_hugger_page_get_type"
           glib:type-struct="HuggerPageClass">
      <doc xml:space="preserve"
           filename="src/bis-hugger.c"
           line="56">An auxiliary class used by [class@Hugger].</doc>
      <source-position filename="src/bis-hugger.h" line="24"/>
      <method name="get_child"
              c:identifier="bis_hugger_page_get_child"
              glib:get-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1267">Returns the hugger child to which @self belongs.</doc>
        <source-position filename="src/bis-hugger.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1273">the child to which @self belongs</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1269">a hugger page</doc>
            <type name="HuggerPage" c:type="BisHuggerPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="bis_hugger_page_get_enabled"
              glib:get-property="enabled"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1285">Gets whether @self is enabled.</doc>
        <source-position filename="src/bis-hugger.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-hugger.c"
               line="1291">whether @self is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1287">a hugger page</doc>
            <type name="HuggerPage" c:type="BisHuggerPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="bis_hugger_page_set_enabled"
              glib:set-property="enabled"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="1303">Sets whether @self is enabled.

If a child is disabled, it will be ignored when looking for the child
fitting the available size best.

This allows to programmatically and prematurely hide a child even if it fits
in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="src/bis-hugger.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1305">a hugger page</doc>
            <type name="HuggerPage" c:type="BisHuggerPage*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-hugger.c"
                 line="1306">whether @self is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_page_get_child"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="219">The the hugger child to which the page belongs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="enabled"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_hugger_page_get_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_hugger_page_set_enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="231">Whether the child is enabled.

If a child is disabled, it will be ignored when looking for the child
fitting the available size best.

This allows to programmatically and prematurely hide a child even if it
fits in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="HuggerPageClass"
            c:type="BisHuggerPageClass"
            glib:is-gtype-struct-for="HuggerPage">
      <source-position filename="src/bis-hugger.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="HuggerTransitionType"
                 version="1.0"
                 glib:type-name="BisHuggerTransitionType"
                 glib:get-type="bis_hugger_transition_type_get_type"
                 c:type="BisHuggerTransitionType">
      <doc xml:space="preserve"
           filename="src/bis-hugger.c"
           line="62">Describes the possible transitions in a [class@Hugger] widget.</doc>
      <member name="none"
              value="0"
              c:identifier="BIS_HUGGER_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="BIS_HUGGER_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="64">No transition</doc>
      </member>
      <member name="crossfade"
              value="1"
              c:identifier="BIS_HUGGER_TRANSITION_TYPE_CROSSFADE"
              glib:nick="crossfade"
              glib:name="BIS_HUGGER_TRANSITION_TYPE_CROSSFADE">
        <doc xml:space="preserve"
             filename="src/bis-hugger.c"
             line="65">A cross-fade</doc>
      </member>
    </enumeration>
    <class name="Lapel"
           c:symbol-prefix="lapel"
           c:type="BisLapel"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisLapel"
           glib:get-type="bis_lapel_get_type"
           glib:type-struct="LapelClass">
      <doc xml:space="preserve"
           filename="src/bis-lapel.c"
           line="23">An adaptive container acting like a box or an overlay.

&lt;picture&gt;
  &lt;source srcset="lapel-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="lapel-wide.png" alt="lapel-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="lapel-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="lapel-narrow.png" alt="lapel-narrow"&gt;
&lt;/picture&gt;

The `BisLapel` widget can display its children like a [class@Gtk.Box] does or
like a [class@Gtk.Overlay] does, according to the
[property@Lapel:fold-policy] value.

`BisLapel` has at most three children: [property@Lapel:content],
[property@Lapel:lapel] and [property@Lapel:separator]. Content is the primary
child, lapel is displayed next to it when unfolded, or overlays it when
folded. Lapel can be shown or hidden by changing the
[property@Lapel:reveal-lapel] value, as well as via swipe gestures if
[property@Lapel:swipe-to-open] and/or [property@Lapel:swipe-to-close] are set
to `TRUE`.

Optionally, a separator can be provided, which would be displayed between
the content and the lapel when there's no shadow to separate them, depending
on the transition type.

[property@Lapel:lapel] is transparent by default; add the
[`.background`](style-classes.html#background) style class to it if this is
unwanted.

If [property@Lapel:modal] is set to `TRUE`, content becomes completely
inaccessible when the lapel is revealed while folded.

The position of the lapel and separator children relative to the content is
determined by orientation, as well as the [property@Lapel:lapel-position]
value.

Folding the lapel will automatically hide the lapel widget, and unfolding it
will automatically reveal it. If this behavior is not desired, the
[property@Lapel:locked] property can be used to override it.

Common use cases include sidebars, header bars that need to be able to
overlap the window content (for example, in fullscreen mode) and bottom
sheets.

## BisLapel as GtkBuildable

The `BisLapel` implementation of the [iface@Gtk.Buildable] interface supports
setting the lapel child by specifying “lapel” as the “type” attribute of a
`&lt;child&gt;` element, and separator by specifying “separator”. Specifying
“content” child type or omitting it results in setting the content child.

## CSS nodes

`BisLapel` has a single CSS node with name `lapel`. The node will get the style
classes `.folded` when it is folded, and `.unfolded` when it's not.</doc>
      <source-position filename="src/bis-lapel.h" line="25"/>
      <implements name="Swipeable"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="bis_lapel_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1786">Creates a new `BisLapel`.</doc>
        <source-position filename="src/bis-lapel.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="1791">the newly created `BisLapel`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_content"
              c:identifier="bis_lapel_get_content"
              glib:get-property="content"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1801">Gets the content widget for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="1807">the content widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1803">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_duration"
              c:identifier="bis_lapel_get_fold_duration"
              glib:get-property="fold-duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="fold-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2223">Gets the fold transition animation duration for @self, in milliseconds.</doc>
        <source-position filename="src/bis-lapel.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2229">the fold transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2225">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_policy"
              c:identifier="bis_lapel_get_fold_policy"
              glib:get-property="fold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="fold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2115">Gets the fold policy for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2121">the fold policy for @self</doc>
          <type name="LapelFoldPolicy" c:type="BisLapelFoldPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2117">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_threshold_policy"
              c:identifier="bis_lapel_get_fold_threshold_policy"
              glib:get-property="fold-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2174">Gets the fold threshold policy for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2176">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="bis_lapel_get_folded"
              glib:get-property="folded"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="folded"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2264">Gets whether @self is currently folded.

See [property@Lapel:fold-policy].</doc>
        <source-position filename="src/bis-lapel.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2272">`TRUE` if @self is currently folded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2266">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lapel"
              c:identifier="bis_lapel_get_lapel"
              glib:get-property="lapel"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1853">Gets the lapel widget for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="1859">the lapel widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1855">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lapel_position"
              c:identifier="bis_lapel_get_lapel_position"
              glib:get-property="lapel-position"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="lapel-position"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1960">Gets the lapel position for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="1966">the lapel position for @self</doc>
          <type name="Gtk.PackType" c:type="GtkPackType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1962">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="bis_lapel_get_locked"
              glib:get-property="locked"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="locked"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2284">Gets whether @self is locked.</doc>
        <source-position filename="src/bis-lapel.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2290">`TRUE` if @self is locked</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2286">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modal"
              c:identifier="bis_lapel_get_modal"
              glib:get-property="modal"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="modal"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2383">Gets whether @self is modal.</doc>
        <source-position filename="src/bis-lapel.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2389">`TRUE` if @self is modal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2385">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_lapel"
              c:identifier="bis_lapel_get_reveal_lapel"
              glib:get-property="reveal-lapel"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reveal-lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2008">Gets whether the lapel widget is revealed for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2014">`TRUE` if the lapel widget is revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2010">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_params"
              c:identifier="bis_lapel_get_reveal_params"
              glib:get-property="reveal-params"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reveal-params"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2044">Gets the reveal animation spring parameters for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2050">the reveal animation parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2046">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_progress"
              c:identifier="bis_lapel_get_reveal_progress"
              glib:get-property="reveal-progress"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reveal-progress"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2093">Gets the current reveal progress for @self.

0 means fully hidden, 1 means fully revealed.

See [property@Lapel:reveal-lapel].</doc>
        <source-position filename="src/bis-lapel.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2103">the current reveal progress for @self</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2095">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_separator"
              c:identifier="bis_lapel_get_separator"
              glib:get-property="separator"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="separator"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1906">Gets the separator widget for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="1912">the separator widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1908">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_close"
              c:identifier="bis_lapel_get_swipe_to_close"
              glib:get-property="swipe-to-close"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="swipe-to-close"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2483">Gets whether @self can be closed with a swipe gesture.</doc>
        <source-position filename="src/bis-lapel.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2489">`TRUE` if @self can be closed with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2485">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_open"
              c:identifier="bis_lapel_get_swipe_to_open"
              glib:get-property="swipe-to-open"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="swipe-to-open"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2435">Gets whether @self can be opened with a swipe gesture.</doc>
        <source-position filename="src/bis-lapel.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2441">`TRUE` if @self can be opened with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2437">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="bis_lapel_get_transition_type"
              glib:get-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2331">Gets the type of animation used for reveal and fold transitions in @self.</doc>
        <source-position filename="src/bis-lapel.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-lapel.c"
               line="2337">the current transition type of @self</doc>
          <type name="LapelTransitionType" c:type="BisLapelTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2333">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="bis_lapel_set_content"
              glib:set-property="content"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="content"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1819">Sets the content widget for @self.

It's always displayed when unfolded, and partially visible when folded.</doc>
        <source-position filename="src/bis-lapel.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1821">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1822">the content widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_duration"
              c:identifier="bis_lapel_set_fold_duration"
              glib:set-property="fold-duration"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="fold-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2241">Sets the fold transition animation duration for @self, in milliseconds.</doc>
        <source-position filename="src/bis-lapel.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2243">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2244">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_policy"
              c:identifier="bis_lapel_set_fold_policy"
              glib:set-property="fold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="fold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2133">Sets the fold policy for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2135">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2136">the fold policy</doc>
            <type name="LapelFoldPolicy" c:type="BisLapelFoldPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_threshold_policy"
              c:identifier="bis_lapel_set_fold_threshold_policy"
              glib:set-property="fold-threshold-policy"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="fold-threshold-policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2190">Sets the fold threshold policy for @self.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, lapel will only fold when the
children cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`, it
will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <source-position filename="src/bis-lapel.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2192">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2193">the policy to use</doc>
            <type name="FoldThresholdPolicy" c:type="BisFoldThresholdPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lapel"
              c:identifier="bis_lapel_set_lapel"
              glib:set-property="lapel"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1871">Sets the lapel widget for @self.

It's only visible when [property@Lapel:reveal-progress] is greater than 0.</doc>
        <source-position filename="src/bis-lapel.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1873">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="lapel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1874">the lapel widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lapel_position"
              c:identifier="bis_lapel_set_lapel_position"
              glib:set-property="lapel-position"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="lapel-position"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1978">Sets the lapel position for @self.

If it's set to `GTK_PACK_START`, the lapel is displayed before the content,
if `GTK_PACK_END`, it's displayed after the content.</doc>
        <source-position filename="src/bis-lapel.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1980">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1981">the new value</doc>
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locked"
              c:identifier="bis_lapel_set_locked"
              glib:set-property="locked"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="locked"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2302">Sets whether @self is locked.

If `FALSE`, folding when the lapel is revealed automatically closes it, and
unfolding it when the lapel is not revealed opens it. If `TRUE`,
[property@Lapel:reveal-lapel] value never changes on its own.</doc>
        <source-position filename="src/bis-lapel.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2304">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="locked" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2305">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal"
              c:identifier="bis_lapel_set_modal"
              glib:set-property="modal"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="modal"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2401">Sets whether @self is modal.

If `TRUE`, clicking the content widget while lapel is revealed, as well as
pressing the &lt;kbd&gt;Esc&lt;/kbd&gt; key, will close the lapel. If `FALSE`, clicks are
passed through to the content widget.</doc>
        <source-position filename="src/bis-lapel.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2403">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2404">whether @self is modal</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_lapel"
              c:identifier="bis_lapel_set_reveal_lapel"
              glib:set-property="reveal-lapel"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="reveal-lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2026">Sets whether the lapel widget is revealed for @self.</doc>
        <source-position filename="src/bis-lapel.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2028">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="reveal_lapel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2029">whether to reveal the lapel widget</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_params"
              c:identifier="bis_lapel_set_reveal_params"
              glib:set-property="reveal-params"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="reveal-params"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2062">Sets the reveal animation spring parameters for @self.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <source-position filename="src/bis-lapel.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2064">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2065">the new parameters</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_separator"
              c:identifier="bis_lapel_set_separator"
              glib:set-property="separator"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="separator"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1924">Sets the separator widget for @self.

It's displayed between content and lapel when there's no shadow to display.
When exactly it's visible depends on the [property@Lapel:transition-type]
value.</doc>
        <source-position filename="src/bis-lapel.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1926">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="separator"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="1927">the separator widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_close"
              c:identifier="bis_lapel_set_swipe_to_close"
              glib:set-property="swipe-to-close"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="swipe-to-close"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2501">Sets whether @self can be closed with a swipe gesture.

The area that can be swiped depends on the [property@Lapel:transition-type]
value.</doc>
        <source-position filename="src/bis-lapel.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2503">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="swipe_to_close" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2504">whether @self can be closed with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_open"
              c:identifier="bis_lapel_set_swipe_to_open"
              glib:set-property="swipe-to-open"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="swipe-to-open"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2453">Sets whether @self can be opened with a swipe gesture.

The area that can be swiped depends on the [property@Lapel:transition-type]
value.</doc>
        <source-position filename="src/bis-lapel.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2455">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="swipe_to_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2456">whether @self can be opened with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="bis_lapel_set_transition_type"
              glib:set-property="transition-type"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="transition-type"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="2349">Sets the type of animation used for reveal and fold transitions in @self.

[property@Lapel:lapel] is transparent by default, which means the content will
be seen through it with `BIS_LAPEL_TRANSITION_TYPE_OVER` transitions; add the
[`.background`](style-classes.html#background) style class to it if this is
unwanted.</doc>
        <source-position filename="src/bis-lapel.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2351">a lapel</doc>
            <type name="Lapel" c:type="BisLapel*"/>
          </instance-parameter>
          <parameter name="transition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-lapel.c"
                 line="2352">the new transition type</doc>
            <type name="LapelTransitionType" c:type="BisLapelTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <attribute name="org.gtk.Property.get" value="bis_lapel_get_content"/>
        <attribute name="org.gtk.Property.set" value="bis_lapel_set_content"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1263">The content widget.

It's always displayed when unfolded, and partially visible when folded.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="fold-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_duration"
                getter="get_fold_duration"
                default-value="250">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_fold_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_fold_duration"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1402">The fold transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fold-policy"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_policy"
                getter="get_fold_policy"
                default-value="BIS_LAPEL_FOLD_POLICY_AUTO">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_fold_policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1369">The fold policy for the lapel.</doc>
        <type name="LapelFoldPolicy"/>
      </property>
      <property name="fold-threshold-policy"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_threshold_policy"
                getter="get_fold_threshold_policy"
                default-value="BIS_FOLD_THRESHOLD_POLICY_MINIMUM">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_fold_threshold_policy"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_fold_threshold_policy"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1382">Determines when the lapel will fold.

If set to `BIS_FOLD_THRESHOLD_POLICY_MINIMUM`, lapel will only fold when
the children cannot fit anymore. With `BIS_FOLD_THRESHOLD_POLICY_NATURAL`,
it will fold as soon as children don't get their natural size.

This can be useful if you have a long ellipsizing label and want to let it
ellipsize instead of immediately folding.</doc>
        <type name="FoldThresholdPolicy"/>
      </property>
      <property name="folded"
                version="1.0"
                transfer-ownership="none"
                getter="get_folded"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="bis_lapel_get_folded"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1415">Whether the lapel is currently folded.

See [property@Lapel:fold-policy].</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lapel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_lapel"
                getter="get_lapel">
        <attribute name="org.gtk.Property.get" value="bis_lapel_get_lapel"/>
        <attribute name="org.gtk.Property.set" value="bis_lapel_set_lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1277">The lapel widget.

It's only visible when [property@Lapel:reveal-progress] is greater than 0.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="lapel-position"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_lapel_position"
                getter="get_lapel_position"
                default-value="GTK_PACK_START">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_lapel_position"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_lapel_position"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1307">The lapel position.

If it's set to `GTK_PACK_START`, the lapel is displayed before the content,
if `GTK_PACK_END`, it's displayed after the content.</doc>
        <type name="Gtk.PackType"/>
      </property>
      <property name="locked"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_locked"
                getter="get_locked"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get" value="bis_lapel_get_locked"/>
        <attribute name="org.gtk.Property.set" value="bis_lapel_set_locked"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1429">Whether the lapel is locked.

If `FALSE`, folding when the lapel is revealed automatically closes it, and
unfolding it when the lapel is not revealed opens it. If `TRUE`,
[property@Lapel:reveal-lapel] value never changes on its own.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="modal"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_modal"
                getter="get_modal"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get" value="bis_lapel_get_modal"/>
        <attribute name="org.gtk.Property.set" value="bis_lapel_set_modal"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1463">Whether the lapel is modal.

If `TRUE`, clicking the content widget while lapel is revealed, as well as
pressing the &lt;kbd&gt;Esc&lt;/kbd&gt; key, will close the lapel. If `FALSE`, clicks
are passed through to the content widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-lapel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_lapel"
                getter="get_reveal_lapel"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_reveal_lapel"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_reveal_lapel"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1323">Whether the lapel widget is revealed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-params"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_params"
                getter="get_reveal_params">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_reveal_params"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_reveal_params"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1335">The reveal animation spring parameters.

The default value is equivalent to:

```c
bis_spring_params_new (1, 0.5, 500)
```</doc>
        <type name="SpringParams"/>
      </property>
      <property name="reveal-progress"
                version="1.0"
                transfer-ownership="none"
                getter="get_reveal_progress"
                default-value="1.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_reveal_progress"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1353">The current reveal transition progress.

0 means fully hidden, 1 means fully revealed.

See [property@Lapel:reveal-lapel].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="separator"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_separator"
                getter="get_separator">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_separator"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_separator"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1291">The separator widget.

It's displayed between content and lapel when there's no shadow to display.
When exactly it's visible depends on the [property@Lapel:transition-type]
value.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="swipe-to-close"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_close"
                getter="get_swipe_to_close"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_swipe_to_close"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_swipe_to_close"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1494">Whether the lapel can be closed with a swipe gesture.

The area that can be swiped depends on the [property@Lapel:transition-type]
value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipe-to-open"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_open"
                getter="get_swipe_to_open"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_swipe_to_open"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_swipe_to_open"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1479">Whether the lapel can be opened with a swipe gesture.

The area that can be swiped depends on the [property@Lapel:transition-type]
value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="BIS_LAPEL_TRANSITION_TYPE_OVER">
        <attribute name="org.gtk.Property.get"
                   value="bis_lapel_get_transition_type"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_lapel_set_transition_type"/>
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="1445">the type of animation used for reveal and fold transitions.

[property@Lapel:lapel] is transparent by default, which means the content
will be seen through it with `BIS_LAPEL_TRANSITION_TYPE_OVER` transitions;
add the [`.background`](style-classes.html#background) style class to it if
this is unwanted.</doc>
        <type name="LapelTransitionType"/>
      </property>
    </class>
    <record name="LapelClass"
            c:type="BisLapelClass"
            glib:is-gtype-struct-for="Lapel">
      <source-position filename="src/bis-lapel.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="LapelFoldPolicy"
                 version="1.0"
                 glib:type-name="BisLapelFoldPolicy"
                 glib:get-type="bis_lapel_fold_policy_get_type"
                 c:type="BisLapelFoldPolicy">
      <doc xml:space="preserve"
           filename="src/bis-lapel.c"
           line="87">Describes the possible folding behavior of a [class@Lapel] widget.</doc>
      <member name="never"
              value="0"
              c:identifier="BIS_LAPEL_FOLD_POLICY_NEVER"
              glib:nick="never"
              glib:name="BIS_LAPEL_FOLD_POLICY_NEVER">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="89">Disable folding, the lapel cannot reach narrow
  sizes.</doc>
      </member>
      <member name="always"
              value="1"
              c:identifier="BIS_LAPEL_FOLD_POLICY_ALWAYS"
              glib:nick="always"
              glib:name="BIS_LAPEL_FOLD_POLICY_ALWAYS">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="91">Keep the lapel always folded.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="BIS_LAPEL_FOLD_POLICY_AUTO"
              glib:nick="auto"
              glib:name="BIS_LAPEL_FOLD_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="92">Fold and unfold the lapel based on available
  space.</doc>
      </member>
    </enumeration>
    <enumeration name="LapelTransitionType"
                 version="1.0"
                 glib:type-name="BisLapelTransitionType"
                 glib:get-type="bis_lapel_transition_type_get_type"
                 c:type="BisLapelTransitionType">
      <doc xml:space="preserve"
           filename="src/bis-lapel.c"
           line="100">Describes transitions types of a [class@Lapel] widget.

It determines the type of animation when transitioning between children in a
[class@Lapel] widget, as well as which areas can be swiped via
[property@Lapel:swipe-to-open] and [property@Lapel:swipe-to-close].

New values may be added to this enum over time.</doc>
      <member name="over"
              value="0"
              c:identifier="BIS_LAPEL_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="BIS_LAPEL_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="102">The lapel slides over the content, which is
  dimmed. When folded, only the lapel can be swiped.</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="BIS_LAPEL_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="BIS_LAPEL_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="104">The content slides over the lapel. Only the
  content can be swiped.</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="BIS_LAPEL_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="BIS_LAPEL_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/bis-lapel.c"
             line="106">The lapel slides offscreen when hidden,
  neither the lapel nor content overlap each other. Both widgets can be
  swiped.</doc>
      </member>
    </enumeration>
    <class name="Latch"
           c:symbol-prefix="latch"
           c:type="BisLatch"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisLatch"
           glib:get-type="bis_latch_get_type"
           glib:type-struct="LatchClass">
      <doc xml:space="preserve"
           filename="src/bis-latch.c"
           line="14">A widget constraining its child to a given size.

&lt;picture&gt;
  &lt;source srcset="latch-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="latch-wide.png" alt="latch-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="latch-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="latch-narrow.png" alt="latch-narrow"&gt;
&lt;/picture&gt;

The `BisLatch` widget constrains the size of the widget it contains to a
given maximum size. It will constrain the width if it is horizontal, or the
height if it is vertical. The expansion of the child from its minimum to its
maximum size is eased out for a smooth transition.

If the child requires more than the requested maximum size, it will be
allocated the minimum size it can fit in instead.

## CSS nodes

`BisLatch` has a single CSS node with name `latch`.

Its children will receive the style classes `.large` when the child reached
its maximum size, `.small` when the latch allocates its full size to the
child, `.medium` in-between, or none if it hasn't computed its size yet.</doc>
      <source-position filename="src/bis-latch.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="bis_latch_new" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="255">Creates a new `BisLatch`.</doc>
        <source-position filename="src/bis-latch.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch.c"
               line="260">the newly created `BisLatch`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="bis_latch_get_child"
              glib:get-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="270">Gets the child widget of @self.</doc>
        <source-position filename="src/bis-latch.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-latch.c"
               line="276">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="272">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximum_size"
              c:identifier="bis_latch_get_maximum_size"
              glib:get-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="317">Gets the maximum size allocated to the child.</doc>
        <source-position filename="src/bis-latch.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch.c"
               line="323">the maximum size to allocate to the child</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="319">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="bis_latch_get_tightening_threshold"
              glib:get-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="368">Gets the size above which the child is latched.</doc>
        <source-position filename="src/bis-latch.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch.c"
               line="374">the size above which the child is latched</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="370">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="bis_latch_set_child"
              glib:set-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="288">Sets the child widget of @self.</doc>
        <source-position filename="src/bis-latch.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="290">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="291">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="bis_latch_set_maximum_size"
              glib:set-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="339">Sets the maximum size allocated to the child.

It is the width if the latch is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/bis-latch.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="341">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="342">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="bis_latch_set_tightening_threshold"
              glib:set-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="390">Sets the size above which the child is latched.

Starting from this size, the latch will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum size, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the size up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/bis-latch.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="392">a latch</doc>
            <type name="Latch" c:type="BisLatch*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch.c"
                 line="393">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get" value="bis_latch_get_child"/>
        <attribute name="org.gtk.Property.set" value="bis_latch_set_child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="172">The child widget of the `BisLatch`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="maximum-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="184">The maximum size allocated to the child.

It is the width if the latch is horizontal, or the height if it is vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch.c"
             line="198">The size above which the child is latched.

Starting from this size, the latch will tighten its grip on the child,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the child
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the size up to the maximum.
If the threshold is lower than the minimum size to allocate to the child,
that size will be used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="LatchClass"
            c:type="BisLatchClass"
            glib:is-gtype-struct-for="Latch">
      <source-position filename="src/bis-latch.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="LatchLayout"
           c:symbol-prefix="latch_layout"
           c:type="BisLatchLayout"
           version="1.0"
           parent="Gtk.LayoutManager"
           final="1"
           glib:type-name="BisLatchLayout"
           glib:get-type="bis_latch_layout_get_type"
           glib:type-struct="LatchLayoutClass">
      <doc xml:space="preserve"
           filename="src/bis-latch-layout.c"
           line="16">A layout manager constraining its children to a given size.

&lt;picture&gt;
  &lt;source srcset="latch-wide-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="latch-wide.png" alt="latch-wide"&gt;
&lt;/picture&gt;
&lt;picture&gt;
  &lt;source srcset="latch-narrow-dark.png" media="(prefers-color-scheme: dark)"&gt;
  &lt;img src="latch-narrow.png" alt="latch-narrow"&gt;
&lt;/picture&gt;

`BisLatchLayout` constraints the size of the widgets it contains to a given
maximum size. It will constrain the width if it is horizontal, or the height
if it is vertical. The expansion of the children from their minimum to their
maximum size is eased out for a smooth transition.

If a child requires more than the requested maximum size, it will be
allocated the minimum size it can fit in instead.

Each child will get the style  classes .large when it reached its maximum
size, .small when it's allocated the full size, .medium in-between, or none
if it hasn't been allocated yet.</doc>
      <source-position filename="src/bis-latch-layout.h" line="22"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="bis_latch_layout_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="395">Creates a new `BisLatchLayout`.</doc>
        <source-position filename="src/bis-latch-layout.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-latch-layout.c"
               line="400">the newly created `BisLatchLayout`</doc>
          <type name="Gtk.LayoutManager" c:type="GtkLayoutManager*"/>
        </return-value>
      </constructor>
      <method name="get_maximum_size"
              c:identifier="bis_latch_layout_get_maximum_size"
              glib:get-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="410">Gets the maximum size allocated to the children.</doc>
        <source-position filename="src/bis-latch-layout.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch-layout.c"
               line="416">the maximum size to allocate to the children</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="412">a latch layout</doc>
            <type name="LatchLayout" c:type="BisLatchLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="bis_latch_layout_get_tightening_threshold"
              glib:get-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="455">Gets the size above which the children are latched.</doc>
        <source-position filename="src/bis-latch-layout.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch-layout.c"
               line="461">the size above which the children are latched</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="457">a latch layout</doc>
            <type name="LatchLayout" c:type="BisLatchLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="bis_latch_layout_set_maximum_size"
              glib:set-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="428">Sets the maximum size allocated to the children.

It is the width if the layout is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/bis-latch-layout.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="430">a latch layout</doc>
            <type name="LatchLayout" c:type="BisLatchLayout*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="431">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="bis_latch_layout_set_tightening_threshold"
              glib:set-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="473">Sets the size above which the children are latched.

Starting from this size, the layout will tighten its grip on the children,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the children
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the
children, they will be allocated the whole size up to the maximum. If the
threshold is lower than the minimum size to allocate to the children, that
size will be used as the tightening threshold.

Effectively, tightening the grip on a child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/bis-latch-layout.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="475">a latch layout</doc>
            <type name="LatchLayout" c:type="BisLatchLayout*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-layout.c"
                 line="476">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="maximum-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_layout_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_layout_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="345">The maximum size to allocate to the children.

It is the width if the layout is horizontal, or the height if it is
vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_layout_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_layout_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-layout.c"
             line="360">The size above which the children are latched.

Starting from this size, the layout will tighten its grip on the children,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum size, the
children will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the
children, they will be allocated the whole size up to the maximum. If the
threshold is lower than the minimum size to allocate to the children, that
size will be used as the tightening threshold.

Effectively, tightening the grip on a child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="LatchLayoutClass"
            c:type="BisLatchLayoutClass"
            glib:is-gtype-struct-for="LatchLayout">
      <source-position filename="src/bis-latch-layout.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.LayoutManagerClass" c:type="GtkLayoutManagerClass"/>
      </field>
    </record>
    <class name="LatchScrollable"
           c:symbol-prefix="latch_scrollable"
           c:type="BisLatchScrollable"
           version="1.0"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="BisLatchScrollable"
           glib:get-type="bis_latch_scrollable_get_type"
           glib:type-struct="LatchScrollableClass">
      <doc xml:space="preserve"
           filename="src/bis-latch-scrollable.c"
           line="14">A scrollable [class@Latch].

`BisLatchScrollable` is a variant of [class@Latch] that implements the
[iface@Gtk.Scrollable] interface.

The primary use case for `BisLatchScrollable` is latching
[class@Gtk.ListView].</doc>
      <source-position filename="src/bis-latch-scrollable.h" line="22"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new"
                   c:identifier="bis_latch_scrollable_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="338">Creates a new `BisLatchScrollable`.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch-scrollable.c"
               line="343">the newly created `BisLatchScrollable`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="bis_latch_scrollable_get_child"
              glib:get-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="353">Gets the child widget of @self.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/bis-latch-scrollable.c"
               line="359">the child widget of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="355">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximum_size"
              c:identifier="bis_latch_scrollable_get_maximum_size"
              glib:get-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="425">Gets the maximum size allocated to the child.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch-scrollable.c"
               line="431">the maximum size to allocate to the child</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="427">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="bis_latch_scrollable_get_tightening_threshold"
              glib:get-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="476">Gets the size above which the child is latched.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-latch-scrollable.c"
               line="482">the size above which the child is latched</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="478">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="bis_latch_scrollable_set_child"
              glib:set-property="child"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="371">Sets the child widget of @self.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="373">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="374">the child widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="bis_latch_scrollable_set_maximum_size"
              glib:set-property="maximum-size"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="maximum-size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="447">Sets the maximum size allocated to the child.

It is the width if the latch is horizontal, or the height if it is vertical.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="449">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="450">the maximum size</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="bis_latch_scrollable_set_tightening_threshold"
              glib:set-property="tightening-threshold"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="tightening-threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="498">Sets the size above which the child is latched.

Starting from this size, the latch will tighten its grip on the child, slowly
allocating less and less of the available size up to the maximum allocated
size. Below that threshold and below the maximum width, the child will be
allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum. If the threshold
is lower than the minimum size to allocate to the child, that size will be
used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <source-position filename="src/bis-latch-scrollable.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="500">a latch scrollable</doc>
            <type name="LatchScrollable" c:type="BisLatchScrollable*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-latch-scrollable.c"
                 line="501">the tightening threshold</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_scrollable_get_child"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_scrollable_set_child"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="256">The child widget of the `BisLatchScrollable`.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="maximum-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size"
                default-value="600">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_scrollable_get_maximum_size"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_scrollable_set_maximum_size"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="268">The maximum size allocated to the child.

It is the width if the latch is horizontal, or the height if it is vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold"
                default-value="400">
        <attribute name="org.gtk.Property.get"
                   value="bis_latch_scrollable_get_tightening_threshold"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_latch_scrollable_set_tightening_threshold"/>
        <doc xml:space="preserve"
             filename="src/bis-latch-scrollable.c"
             line="282">The size above which the child is latched.

Starting from this size, the latch will tighten its grip on the child,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum width, the child
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum.
If the threshold is lower than the minimum size to allocate to the child,
that size will be used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="LatchScrollableClass"
            c:type="BisLatchScrollableClass"
            glib:is-gtype-struct-for="LatchScrollable">
      <source-position filename="src/bis-latch-scrollable.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="1" c:type="BIS_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/bis-version.h"
           line="17">Bismuth major version component (e.g. 1 if the version is 1.2.3).</doc>
      <source-position filename="src/bis-version.h" line="22"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="BIS_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="src/bis-version.h"
           line="31">Bismuth micro version component (e.g. 3 if the version is 1.2.3).</doc>
      <source-position filename="src/bis-version.h" line="36"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="0" c:type="BIS_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/bis-version.h"
           line="24">Bismuth minor version component (e.g. 2 if the version is 1.2.3).</doc>
      <source-position filename="src/bis-version.h" line="29"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="NavigationDirection"
                 version="1.0"
                 glib:type-name="BisNavigationDirection"
                 glib:get-type="bis_navigation_direction_get_type"
                 c:type="BisNavigationDirection">
      <doc xml:space="preserve"
           filename="src/bis-navigation-direction.c"
           line="10">Describes the direction of a swipe navigation gesture.</doc>
      <member name="back"
              value="0"
              c:identifier="BIS_NAVIGATION_DIRECTION_BACK"
              glib:nick="back"
              glib:name="BIS_NAVIGATION_DIRECTION_BACK">
        <doc xml:space="preserve"
             filename="src/bis-navigation-direction.c"
             line="12">Corresponds to start or top, depending on orientation and text direction</doc>
      </member>
      <member name="forward"
              value="1"
              c:identifier="BIS_NAVIGATION_DIRECTION_FORWARD"
              glib:nick="forward"
              glib:name="BIS_NAVIGATION_DIRECTION_FORWARD">
        <doc xml:space="preserve"
             filename="src/bis-navigation-direction.c"
             line="13">Corresponds to end or bottom, depending on orientation and text direction</doc>
      </member>
    </enumeration>
    <class name="PropertyAnimationTarget"
           c:symbol-prefix="property_animation_target"
           c:type="BisPropertyAnimationTarget"
           version="1.2"
           parent="AnimationTarget"
           final="1"
           glib:type-name="BisPropertyAnimationTarget"
           glib:get-type="bis_property_animation_target_get_type"
           glib:type-struct="PropertyAnimationTargetClass">
      <doc xml:space="preserve"
           filename="src/bis-animation-target.c"
           line="30">An [class@AnimationTarget] changing the value of a property of a
[class@GObject.Object] instance.</doc>
      <source-position filename="src/bis-animation-target.h" line="50"/>
      <constructor name="new"
                   c:identifier="bis_property_animation_target_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="357">Creates a new `BisPropertyAnimationTarget` for the @property_name property on
@object.</doc>
        <source-position filename="src/bis-animation-target.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.c"
               line="365">the newly created `BisPropertyAnimationTarget`</doc>
          <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="359">an object to be animated</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="360">the name of the property on @object to animate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_pspec"
                   c:identifier="bis_property_animation_target_new_for_pspec"
                   version="1.2">
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="387">Creates a new `BisPropertyAnimationTarget` for the @pspec property on
@object.</doc>
        <source-position filename="src/bis-animation-target.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.c"
               line="395">new newly created `BisPropertyAnimationTarget`</doc>
          <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="389">an object to be animated</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="390">the param spec of the property on @object to animate</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_object"
              c:identifier="bis_property_animation_target_get_object"
              glib:get-property="object"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="object"/>
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="412">Gets the object animated by @self.

The `BisPropertyAnimationTarget` instance does not hold a strong reference on
the object; make sure the object is kept alive throughout the target's
lifetime.</doc>
        <source-position filename="src/bis-animation-target.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.c"
               line="422">the animated object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="414">a property animation target</doc>
            <type name="PropertyAnimationTarget"
                  c:type="BisPropertyAnimationTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pspec"
              c:identifier="bis_property_animation_target_get_pspec"
              glib:get-property="pspec"
              version="1.2">
        <attribute name="org.gtk.Method.get_property" value="pspec"/>
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="434">Gets the `GParamSpec` of the property animated by @self.</doc>
        <source-position filename="src/bis-animation-target.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-target.c"
               line="440">the animated property's `GParamSpec`</doc>
          <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-animation-target.c"
                 line="436">a property animation target</doc>
            <type name="PropertyAnimationTarget"
                  c:type="BisPropertyAnimationTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="object"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_object">
        <attribute name="org.gtk.Property.get"
                   value="bis_property_animation_target_get_object"/>
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="319">The object whose property will be animated.

The `BisPropertyAnimationTarget` instance does not hold a strong reference
on the object; make sure the object is kept alive throughout the target's
lifetime.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="pspec"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_pspec">
        <attribute name="org.gtk.Property.get"
                   value="bis_property_animation_target_get_pspec"/>
        <doc xml:space="preserve"
             filename="src/bis-animation-target.c"
             line="335">The `GParamSpec` of the property to be animated.</doc>
        <type name="GObject.ParamSpec"/>
      </property>
    </class>
    <record name="PropertyAnimationTargetClass"
            c:type="BisPropertyAnimationTargetClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="PropertyAnimationTarget">
      <source-position filename="src/bis-animation-target.h" line="50"/>
    </record>
    <class name="SpringAnimation"
           c:symbol-prefix="spring_animation"
           c:type="BisSpringAnimation"
           version="1.0"
           parent="Animation"
           glib:type-name="BisSpringAnimation"
           glib:get-type="bis_spring_animation_get_type"
           glib:type-struct="SpringAnimationClass">
      <doc xml:space="preserve"
           filename="src/bis-spring-animation.c"
           line="18">A spring-based [class@Animation].

`BisSpringAnimation` implements an animation driven by a physical model of a
spring described by [struct@SpringParams], with a resting position in
[property@SpringAnimation:value-to], stretched to
[property@SpringAnimation:value-from].

Since the animation is physically simulated, spring animations don't have a
fixed duration. The animation will stop when the simulated spring comes to a
rest - when the amplitude of the oscillations becomes smaller than
[property@SpringAnimation:epsilon], or immediately when it reaches
[property@SpringAnimation:value-to] if
[property@SpringAnimation:latch] is set to `TRUE`. The estimated duration can
be obtained with [property@SpringAnimation:estimated-duration].

Due to the nature of spring-driven motion the animation can overshoot
[property@SpringAnimation:value-to] before coming to a rest. Whether the
animation will overshoot or not depends on the damping ratio of the spring.
See [struct@SpringParams] for more information about specific damping ratio
values.

If [property@SpringAnimation:latch] is `TRUE`, the animation will abruptly
end as soon as it reaches the final value, preventing overshooting.

Animations can have an initial velocity value, set via
[property@SpringAnimation:initial-velocity], which adjusts the curve without
changing the duration. This makes spring animations useful for deceleration
at the end of gestures.

If the initial and final values are equal, and the initial velocity is not 0,
the animation value will bounce and return to its resting position.</doc>
      <source-position filename="src/bis-spring-animation.h" line="25"/>
      <constructor name="new"
                   c:identifier="bis_spring_animation_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="537">Creates a new `BisSpringAnimation` on @widget.

The animation will animate @target from @from to @to with the dynamics of a
spring described by @spring_params.</doc>
        <source-position filename="src/bis-spring-animation.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="550">the newly created animation</doc>
          <type name="Animation" c:type="BisAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="539">a widget to create animation on</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="540">a value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="541">a value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="spring_params" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="542">physical parameters of the spring</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </parameter>
          <parameter name="target" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="543">a target value to animate</doc>
            <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_epsilon"
              c:identifier="bis_spring_animation_get_epsilon"
              glib:get-property="epsilon"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="epsilon"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="763">Gets the precision of the spring.</doc>
        <source-position filename="src/bis-spring-animation.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="769">the epsilon value</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="765">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_estimated_duration"
              c:identifier="bis_spring_animation_get_estimated_duration"
              glib:get-property="estimated-duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="estimated-duration"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="867">Gets the estimated duration of @self.

Can be [const@DURATION_INFINITE] if the spring damping is set to 0.</doc>
        <source-position filename="src/bis-spring-animation.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="875">the estimated duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="869">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_velocity"
              c:identifier="bis_spring_animation_get_initial_velocity"
              glib:get-property="initial-velocity"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="initial-velocity"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="718">Gets the initial velocity of @self.</doc>
        <source-position filename="src/bis-spring-animation.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="724">the initial velocity</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="720">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_latch"
              c:identifier="bis_spring_animation_get_latch"
              glib:get-property="latch"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="latch"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="818">Gets whether @self should be latched.</doc>
        <source-position filename="src/bis-spring-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="824">whether @self is latched</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="820">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spring_params"
              c:identifier="bis_spring_animation_get_spring_params"
              glib:get-property="spring-params"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="spring-params"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="673">Gets the physical parameters of the spring of @self.</doc>
        <source-position filename="src/bis-spring-animation.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="679">the spring parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="675">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_from"
              c:identifier="bis_spring_animation_get_value_from"
              glib:get-property="value-from"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="581">Gets the value @self will animate from.</doc>
        <source-position filename="src/bis-spring-animation.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="587">the value to animate from</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="583">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_to"
              c:identifier="bis_spring_animation_get_value_to"
              glib:get-property="value-to"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="627">Gets the value @self will animate to.</doc>
        <source-position filename="src/bis-spring-animation.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="633">the value to animate to</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="629">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_velocity"
              c:identifier="bis_spring_animation_get_velocity"
              glib:get-property="velocity"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="velocity"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="887">Gets the current velocity of @self.</doc>
        <source-position filename="src/bis-spring-animation.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-animation.c"
               line="893">the current velocity</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="889">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_epsilon"
              c:identifier="bis_spring_animation_set_epsilon"
              glib:set-property="epsilon"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="epsilon"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="781">Sets the precision of the spring.

The level of precision used to determine when the animation has come to a
rest, that is, when the amplitude of the oscillations becomes smaller than
this value.

If the epsilon value is too small, the animation will take a long time to
stop after the animated value has stopped visibly changing.

If the epsilon value is too large, the animation will end prematurely.

The default value is 0.001.</doc>
        <source-position filename="src/bis-spring-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="783">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="epsilon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="784">the new value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_velocity"
              c:identifier="bis_spring_animation_set_initial_velocity"
              glib:set-property="initial-velocity"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="initial-velocity"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="736">Sets the initial velocity of @self.

Initial velocity affects only the animation curve, but not its duration.</doc>
        <source-position filename="src/bis-spring-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="738">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="739">the initial velocity</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_latch"
              c:identifier="bis_spring_animation_set_latch"
              glib:set-property="latch"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="latch"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="836">Sets whether @self should be latched.

If set to `TRUE`, the animation will abruptly end as soon as it reaches the
final value, preventing overshooting.

It won't prevent overshooting [property@SpringAnimation:value-from] if a
relative negative [property@SpringAnimation:initial-velocity] is set.</doc>
        <source-position filename="src/bis-spring-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="838">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="latch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="839">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spring_params"
              c:identifier="bis_spring_animation_set_spring_params"
              glib:set-property="spring-params"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="spring-params"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="691">Sets the physical parameters of the spring of @self.</doc>
        <source-position filename="src/bis-spring-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="693">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="spring_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="694">the new spring parameters</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_from"
              c:identifier="bis_spring_animation_set_value_from"
              glib:set-property="value-from"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="599">Sets the value @self will animate from.

The animation will start at this value and end at
[property@SpringAnimation:value-to].</doc>
        <source-position filename="src/bis-spring-animation.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="601">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="602">the value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_to"
              c:identifier="bis_spring_animation_set_value_to"
              glib:set-property="value-to"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="645">Sets the value @self will animate to.

The animation will start at [property@SpringAnimation:value-from] and end at
this value.</doc>
        <source-position filename="src/bis-spring-animation.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="647">a spring animation</doc>
            <type name="SpringAnimation" c:type="BisSpringAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-animation.c"
                 line="648">the value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="epsilon"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_epsilon"
                getter="get_epsilon"
                default-value="0.001000">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_epsilon"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_epsilon"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="455">Precision of the spring.

The level of precision used to determine when the animation has come to a
rest, that is, when the amplitude of the oscillations becomes smaller than
this value.

If the epsilon value is too small, the animation will take a long time to
stop after the animated value has stopped visibly changing.

If the epsilon value is too large, the animation will end prematurely.

The default value is 0.001.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="estimated-duration"
                version="1.0"
                transfer-ownership="none"
                getter="get_estimated_duration"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_estimated_duration"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="498">Estimated duration of the animation, in milliseconds.

Can be [const@DURATION_INFINITE] if the spring damping is set to 0.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="initial-velocity"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_initial_velocity"
                getter="get_initial_velocity"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_initial_velocity"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_initial_velocity"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="439">The initial velocity to start the animation with.

Initial velocity affects only the animation curve, but not its duration.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="latch"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_latch"
                getter="get_latch"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_latch"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_latch"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="480">Whether the animation should be latched.

If set to `TRUE`, the animation will abruptly end as soon as it reaches the
final value, preventing overshooting.

It won't prevent overshooting [property@SpringAnimation:value-from] if a
relative negative [property@SpringAnimation:initial-velocity] is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="spring-params"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_spring_params"
                getter="get_spring_params">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_spring_params"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_spring_params"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="427">Physical parameters describing the spring.</doc>
        <type name="SpringParams"/>
      </property>
      <property name="value-from"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_from"
                getter="get_value_from"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_value_from"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_value_from"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="393">The value to animate from.

The animation will start at this value and end at
[property@SpringAnimation:value-to].</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value-to"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_to"
                getter="get_value_to"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_value_to"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_spring_animation_set_value_to"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="410">The value to animate to.

The animation will start at [property@SpringAnimation:value-from] and end
at this value.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="velocity"
                version="1.0"
                transfer-ownership="none"
                getter="get_velocity"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_spring_animation_get_velocity"/>
        <doc xml:space="preserve"
             filename="src/bis-spring-animation.c"
             line="514">Current velocity of the animation.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="SpringAnimationClass"
            c:type="BisSpringAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="SpringAnimation">
      <source-position filename="src/bis-spring-animation.h" line="25"/>
    </record>
    <record name="SpringParams"
            c:type="BisSpringParams"
            opaque="1"
            version="1.0"
            glib:type-name="BisSpringParams"
            glib:get-type="bis_spring_params_get_type"
            c:symbol-prefix="spring_params">
      <doc xml:space="preserve"
           filename="src/bis-spring-params.c"
           line="16">Physical parameters of a spring for [class@SpringAnimation].

Any spring can be described by three parameters: mass, stiffness and damping.

An undamped spring will produce an oscillatory motion which will go on
forever.

The frequency and amplitude of the oscillations will be determined by the
stiffness (how "strong" the spring is) and its mass (how much "inertia" it
has).

If damping is larger than 0, the amplitude of that oscillating motion will
exponientally decrease over time. If that damping is strong enough that the
spring can't complete a full oscillation, it's called an overdamped spring.

If we the spring can oscillate, it's called an underdamped spring.

The value between these two behaviors is called critical damping; a
critically damped spring will comes to rest in the minimum possible time
without producing oscillations.

The damping can be replaced by damping ratio, which produces the following
springs:

* 0: an undamped spring.
* Between 0 and 1: an underdamped spring.
* 1: a critically damped spring.
* Larger than 1: an overdamped spring.

As such</doc>
      <source-position filename="src/bis-spring-params.h" line="17"/>
      <constructor name="new"
                   c:identifier="bis_spring_params_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="62">Creates a new `BisSpringParams` from @mass, @stiffness and @damping_ratio.

The damping value is calculated from @damping_ratio and the other two
parameters.

* If @damping_ratio is 0, the spring will not be damped and will oscillate
  endlessly.
* If @damping_ratio is between 0 and 1, the spring is underdamped and will
  always overshoot.
* If @damping_ratio is 1, the spring is critically damped and will reach its
  resting position the quickest way possible.
* If @damping_ratio is larger than 1, the spring is overdamped and will reach
  its resting position faster than it can complete an oscillation.

[ctor@SpringParams.new_full] allows to pass a raw damping value instead.</doc>
        <source-position filename="src/bis-spring-params.h" line="23"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="84">the newly created spring parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <parameter name="damping_ratio" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="64">the damping ratio of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="mass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="65">the mass of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="stiffness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="66">the stiffness of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="bis_spring_params_new_full"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="103">Creates a new `BisSpringParams` from @mass, @stiffness and @damping.

See [ctor@SpringParams.new] for a simplified constructor using damping ratio
instead of @damping.</doc>
        <source-position filename="src/bis-spring-params.h" line="27"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="114">the newly created spring parameters</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <parameter name="damping" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="105">the damping of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="mass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="106">the mass of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="stiffness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="107">the stiffness of the spring</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_damping"
              c:identifier="bis_spring_params_get_damping"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="179">Gets the damping of @self.</doc>
        <source-position filename="src/bis-spring-params.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="185">the damping</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="181">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_damping_ratio"
              c:identifier="bis_spring_params_get_damping_ratio"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="197">Gets the damping ratio of @self.</doc>
        <source-position filename="src/bis-spring-params.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="203">the damping ratio</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="199">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mass"
              c:identifier="bis_spring_params_get_mass"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="219">Gets the mass of @self.</doc>
        <source-position filename="src/bis-spring-params.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="225">the mass</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="221">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stiffness"
              c:identifier="bis_spring_params_get_stiffness"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="237">Gets the stiffness of @self.</doc>
        <source-position filename="src/bis-spring-params.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="243">the stiffness</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="239">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="bis_spring_params_ref" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="140">Increases the reference count of @self.</doc>
        <source-position filename="src/bis-spring-params.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-spring-params.c"
               line="146">@self</doc>
          <type name="SpringParams" c:type="BisSpringParams*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="142">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="bis_spring_params_unref"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-spring-params.c"
             line="160">Decreases the reference count of @self.

If the last reference is dropped, the structure is freed.</doc>
        <source-position filename="src/bis-spring-params.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-spring-params.c"
                 line="162">spring params</doc>
            <type name="SpringParams" c:type="BisSpringParams*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="SwipeTracker"
           c:symbol-prefix="swipe_tracker"
           c:type="BisSwipeTracker"
           version="1.0"
           parent="GObject.Object"
           final="1"
           glib:type-name="BisSwipeTracker"
           glib:get-type="bis_swipe_tracker_get_type"
           glib:type-struct="SwipeTrackerClass">
      <doc xml:space="preserve"
           filename="src/bis-swipe-tracker.c"
           line="39">A swipe tracker used in [class@Carousel], [class@Lapel] and [class@Album].

The `BisSwipeTracker` object can be used for implementing widgets with swipe
gestures. It supports touch-based swipes, pointer dragging, and touchpad
scrolling.

The widgets will probably want to expose the [property@SwipeTracker:enabled]
property. If they expect to use horizontal orientation,
[property@SwipeTracker:reversed] can be used for supporting RTL text
direction.</doc>
      <source-position filename="src/bis-swipe-tracker.h" line="23"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="bis_swipe_tracker_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1191">Creates a new `BisSwipeTracker` for @widget.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1197">the newly created `BisSwipeTracker`</doc>
          <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
        </return-value>
        <parameters>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1193">a widget to add the tracker on</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_allow_long_swipes"
              c:identifier="bis_swipe_tracker_get_allow_long_swipes"
              glib:get-property="allow-long-swipes"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1370">Gets whether to allow swiping for more than one snap point at a time.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1376">whether long swipes are allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1372">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="bis_swipe_tracker_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag"
              version="1.0">
        <attribute name="org.gtk.Method.get_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1325">Gets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1331">whether mouse dragging is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1327">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="bis_swipe_tracker_get_enabled"
              glib:get-property="enabled"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1229">Gets whether @self is enabled.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1235">whether @self is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1231">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reversed"
              c:identifier="bis_swipe_tracker_get_reversed"
              glib:get-property="reversed"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reversed"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1280">Gets whether @self is reversing the swipe direction.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1286">whether the direction is reversed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1282">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipeable"
              c:identifier="bis_swipe_tracker_get_swipeable"
              glib:get-property="swipeable"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="swipeable"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1211">Get the widget @self is attached to.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipe-tracker.c"
               line="1217">the swipeable widget</doc>
          <type name="Swipeable" c:type="BisSwipeable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1213">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="bis_swipe_tracker_set_allow_long_swipes"
              glib:set-property="allow-long-swipes"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-long-swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1388">Sets whether to allow swiping for more than one snap point at a time.

If the value is `FALSE`, each swipe can only move to the adjacent snap
points.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1390">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1391">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="bis_swipe_tracker_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag"
              version="1.0">
        <attribute name="org.gtk.Method.set_property"
                   value="allow-mouse-drag"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1343">Sets whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1345">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1346">whether to allow mouse dragging</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="bis_swipe_tracker_set_enabled"
              glib:set-property="enabled"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1247">Sets whether @self is enabled.

When it's not enabled, no events will be processed. Usually widgets will want
to expose this via a property.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1249">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1250">whether @self is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reversed"
              c:identifier="bis_swipe_tracker_set_reversed"
              glib:set-property="reversed"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="reversed"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1298">Sets whether to reverse the swipe direction.

If the swipe tracker is horizontal, it can be used for supporting RTL text
direction.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1300">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
          <parameter name="reversed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1301">whether to reverse the swipe direction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="shift_position"
              c:identifier="bis_swipe_tracker_shift_position"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1416">Moves the current progress value by @delta.

This can be used to adjust the current position if snap points move during
the gesture.</doc>
        <source-position filename="src/bis-swipe-tracker.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1418">a swipe tracker</doc>
            <type name="SwipeTracker" c:type="BisSwipeTracker*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1419">the position delta</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_swipe_tracker_get_allow_long_swipes"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_swipe_tracker_set_allow_long_swipes"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1076">Whether to allow swiping for more than one snap point at a time.

If the value is `FALSE`, each swipe can only move to the adjacent snap
points.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_swipe_tracker_get_allow_mouse_drag"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_swipe_tracker_set_allow_mouse_drag"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1064">Whether to allow dragging with mouse pointer.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <attribute name="org.gtk.Property.get"
                   value="bis_swipe_tracker_get_enabled"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_swipe_tracker_set_enabled"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1034">Whether the swipe tracker is enabled.

When it's not enabled, no events will be processed. Usually widgets will
want to expose this via a property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reversed"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reversed"
                getter="get_reversed"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_swipe_tracker_get_reversed"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_swipe_tracker_set_reversed"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1049">Whether to reverse the swipe direction.

If the swipe tracker is horizontal, it can be used for supporting RTL text
direction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipeable"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_swipeable">
        <attribute name="org.gtk.Property.get"
                   value="bis_swipe_tracker_get_swipeable"/>
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1022">The widget the swipe tracker is attached to.</doc>
        <type name="Swipeable"/>
      </property>
      <glib:signal name="begin-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1119">This signal is emitted right before a swipe will be started, after the
drag threshold has been passed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1155">This signal is emitted as soon as the gesture has stopped.

The user is expected to animate the deceleration from the current progress
value to @to with an animation using @velocity as the initial velocity,
provided in pixels per second. [class@SpringAnimation] is usually a good
fit for this.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1158">the velocity of the swipe</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1159">the progress value to animate to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="prepare" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1097">This signal is emitted when a possible swipe is detected.

The @direction value can be used to restrict the swipe to a certain
direction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1100">the direction of the swipe</doc>
            <type name="NavigationDirection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipe-tracker.c"
             line="1136">This signal is emitted every time the progress value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipe-tracker.c"
                 line="1139">the current animation progress value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SwipeTrackerClass"
            c:type="BisSwipeTrackerClass"
            glib:is-gtype-struct-for="SwipeTracker">
      <source-position filename="src/bis-swipe-tracker.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="Swipeable"
               c:symbol-prefix="swipeable"
               c:type="BisSwipeable"
               version="1.0"
               glib:type-name="BisSwipeable"
               glib:get-type="bis_swipeable_get_type"
               glib:type-struct="SwipeableInterface">
      <doc xml:space="preserve"
           filename="src/bis-swipeable.c"
           line="11">An interface for swipeable widgets.

The `BisSwipeable` interface is implemented by all swipeable widgets.

See [class@SwipeTracker] for details about implementing it.</doc>
      <source-position filename="src/bis-swipeable.h" line="54"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="get_cancel_progress"
                      invoker="get_cancel_progress"
                      version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="106">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="src/bis-swipeable.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="112">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="108">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_distance" invoker="get_distance" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="30">Gets the swipe distance of @self.

This corresponds to how many pixels 1 unit represents.</doc>
        <source-position filename="src/bis-swipeable.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="38">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="32">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress" invoker="get_progress" version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="83">Gets the current progress of @self.</doc>
        <source-position filename="src/bis-swipeable.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="89">the current progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="85">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_snap_points"
                      invoker="get_snap_points"
                      version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="55">Gets the snap points of @self.

Each snap point represents a progress value that is considered acceptable to
end the swipe on.</doc>
        <source-position filename="src/bis-swipeable.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="65">the snap points</doc>
          <array length="0" zero-terminated="0" c:type="double*">
            <type name="gdouble" c:type="double"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="57">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="58">location to return the number of the snap points</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_swipe_area"
                      invoker="get_swipe_area"
                      version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="129">Gets the area @self can start a swipe from for the given direction and
gesture type.

This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="src/bis-swipeable.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="131">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="132">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="BisNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="133">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="134">a pointer to a rectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_cancel_progress"
              c:identifier="bis_swipeable_get_cancel_progress"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="106">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="src/bis-swipeable.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="112">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="108">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance"
              c:identifier="bis_swipeable_get_distance"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="30">Gets the swipe distance of @self.

This corresponds to how many pixels 1 unit represents.</doc>
        <source-position filename="src/bis-swipeable.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="38">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="32">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="bis_swipeable_get_progress"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="83">Gets the current progress of @self.</doc>
        <source-position filename="src/bis-swipeable.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="89">the current progress, unitless</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="85">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_points"
              c:identifier="bis_swipeable_get_snap_points"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="55">Gets the snap points of @self.

Each snap point represents a progress value that is considered acceptable to
end the swipe on.</doc>
        <source-position filename="src/bis-swipeable.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/bis-swipeable.c"
               line="65">the snap points</doc>
          <array length="0" zero-terminated="0" c:type="double*">
            <type name="gdouble" c:type="double"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="57">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="58">location to return the number of the snap points</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipe_area"
              c:identifier="bis_swipeable_get_swipe_area"
              version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.c"
             line="129">Gets the area @self can start a swipe from for the given direction and
gesture type.

This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="src/bis-swipeable.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="131">a swipeable</doc>
            <type name="Swipeable" c:type="BisSwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="132">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="BisNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="133">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="134">a pointer to a rectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SwipeableInterface"
            c:type="BisSwipeableInterface"
            glib:is-gtype-struct-for="Swipeable"
            version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-swipeable.h"
           line="25">An interface for swipeable widgets.</doc>
      <source-position filename="src/bis-swipeable.h" line="54"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="src/bis-swipeable.h"
             line="27">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_distance">
        <callback name="get_distance">
          <source-position filename="src/bis-swipeable.h" line="42"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="38">the swipe distance in pixels</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="32">a swipeable</doc>
              <type name="Swipeable" c:type="BisSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_snap_points">
        <callback name="get_snap_points">
          <source-position filename="src/bis-swipeable.h" line="43"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="65">the snap points</doc>
            <array length="1" zero-terminated="0" c:type="double*">
              <type name="gdouble" c:type="double"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="57">a swipeable</doc>
              <type name="Swipeable" c:type="BisSwipeable*"/>
            </parameter>
            <parameter name="n_snap_points"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="58">location to return the number of the snap points</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="src/bis-swipeable.h" line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="89">the current progress, unitless</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="85">a swipeable</doc>
              <type name="Swipeable" c:type="BisSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancel_progress">
        <callback name="get_cancel_progress">
          <source-position filename="src/bis-swipeable.h" line="46"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-swipeable.c"
                 line="112">the cancel progress, unitless</doc>
            <type name="gdouble" c:type="double"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="108">a swipeable</doc>
              <type name="Swipeable" c:type="BisSwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_swipe_area">
        <callback name="get_swipe_area">
          <source-position filename="src/bis-swipeable.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="131">a swipeable</doc>
              <type name="Swipeable" c:type="BisSwipeable*"/>
            </parameter>
            <parameter name="navigation_direction" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="132">the direction of the swipe</doc>
              <type name="NavigationDirection"
                    c:type="BisNavigationDirection"/>
            </parameter>
            <parameter name="is_drag" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="133">whether the swipe is caused by a dragging gesture</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/bis-swipeable.c"
                   line="134">a pointer to a rectangle to store the swipe area</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TimedAnimation"
           c:symbol-prefix="timed_animation"
           c:type="BisTimedAnimation"
           version="1.0"
           parent="Animation"
           final="1"
           glib:type-name="BisTimedAnimation"
           glib:get-type="bis_timed_animation_get_type"
           glib:type-struct="TimedAnimationClass">
      <doc xml:space="preserve"
           filename="src/bis-timed-animation.c"
           line="15">A time-based [class@Animation].

`BisTimedAnimation` implements a simple animation interpolating the given
value from [property@TimedAnimation:value-from] to
[property@TimedAnimation:value-to] over
[property@TimedAnimation:duration] milliseconds using the curve described by
[property@TimedAnimation:easing].

If [property@TimedAnimation:reverse] is set to `TRUE`, `BisTimedAnimation`
will instead animate from [property@TimedAnimation:value-to] to
[property@TimedAnimation:value-from], and the easing curve will be inverted.

The animation can repeat a certain amount of times, or endlessly, depending
on the [property@TimedAnimation:repeat-count] value. If
[property@TimedAnimation:alternate] is set to `TRUE`, it will also change the
direction every other iteration.</doc>
      <source-position filename="src/bis-timed-animation.h" line="25"/>
      <constructor name="new"
                   c:identifier="bis_timed_animation_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="337">Creates a new `BisTimedAnimation` on @widget to animate @target from @from
to @to.</doc>
        <source-position filename="src/bis-timed-animation.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="348">the newly created animation</doc>
          <type name="Animation" c:type="BisAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="339">a widget to create animation on</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="340">a value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="341">a value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="342">a duration for the animation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="target" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="343">a target value to animate</doc>
            <type name="AnimationTarget" c:type="BisAnimationTarget*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_alternate"
              c:identifier="bis_timed_animation_get_alternate"
              glib:get-property="alternate"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="alternate"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="643">Gets whether @self changes direction on every iteration.</doc>
        <source-position filename="src/bis-timed-animation.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="649">whether @self alternates</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="645">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="bis_timed_animation_get_duration"
              glib:get-property="duration"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="duration"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="471">Gets the duration of @self.</doc>
        <source-position filename="src/bis-timed-animation.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="477">the duration of @self, in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="473">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_easing"
              c:identifier="bis_timed_animation_get_easing"
              glib:get-property="easing"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="easing"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="514">Gets the easing function @self uses.</doc>
        <source-position filename="src/bis-timed-animation.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="520">the easing function @self uses</doc>
          <type name="Easing" c:type="BisEasing"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="516">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_repeat_count"
              c:identifier="bis_timed_animation_get_repeat_count"
              glib:get-property="repeat-count"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="repeat-count"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="559">Gets the number of times @self will play.</doc>
        <source-position filename="src/bis-timed-animation.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="565">the number of times @self will play</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="561">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reverse"
              c:identifier="bis_timed_animation_get_reverse"
              glib:get-property="reverse"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="reverse"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="602">Gets whether @self plays backwards.</doc>
        <source-position filename="src/bis-timed-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="608">whether @self plays backwards</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="604">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_from"
              c:identifier="bis_timed_animation_get_value_from"
              glib:get-property="value-from"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="377">Gets the value @self will animate from.</doc>
        <source-position filename="src/bis-timed-animation.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="383">the value to animate from</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="379">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_to"
              c:identifier="bis_timed_animation_get_value_to"
              glib:get-property="value-to"
              version="1.0">
        <attribute name="org.gtk.Method.get_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="424">Gets the value @self will animate to.</doc>
        <source-position filename="src/bis-timed-animation.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-timed-animation.c"
               line="430">the value to animate to</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="426">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alternate"
              c:identifier="bis_timed_animation_set_alternate"
              glib:set-property="alternate"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="alternate"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="661">Sets whether @self changes direction on every iteration.</doc>
        <source-position filename="src/bis-timed-animation.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="663">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="alternate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="664">whether @self alternates</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duration"
              c:identifier="bis_timed_animation_set_duration"
              glib:set-property="duration"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="duration"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="489">Sets the duration of @self.

If the animation repeats more than once, sets the duration of one iteration.</doc>
        <source-position filename="src/bis-timed-animation.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="491">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="492">the duration to use, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_easing"
              c:identifier="bis_timed_animation_set_easing"
              glib:set-property="easing"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="easing"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="533">Sets the easing function @self will use.

See [enum@Easing] for the description of specific easing functions.</doc>
        <source-position filename="src/bis-timed-animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="535">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="easing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="536">the easing function to use</doc>
            <type name="Easing" c:type="BisEasing"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_repeat_count"
              c:identifier="bis_timed_animation_set_repeat_count"
              glib:set-property="repeat-count"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="repeat-count"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="577">Sets the number of times @self will play.

If set to 0, @self will repeat endlessly.</doc>
        <source-position filename="src/bis-timed-animation.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="579">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="repeat_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="580">the number of times @self will play</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reverse"
              c:identifier="bis_timed_animation_set_reverse"
              glib:set-property="reverse"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="reverse"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="620">Sets whether @self plays backwards.</doc>
        <source-position filename="src/bis-timed-animation.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="622">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="623">whether @self plays backwards</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_from"
              c:identifier="bis_timed_animation_set_value_from"
              glib:set-property="value-from"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="value-from"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="395">Sets the value @self will animate from.

The animation will start at this value and end at
[property@TimedAnimation:value-to].

If [property@TimedAnimation:reverse] is `TRUE`, the animation will end at
this value instead.</doc>
        <source-position filename="src/bis-timed-animation.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="397">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="398">the value to animate from</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_to"
              c:identifier="bis_timed_animation_set_value_to"
              glib:set-property="value-to"
              version="1.0">
        <attribute name="org.gtk.Method.set_property" value="value-to"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="442">Sets the value @self will animate to.

The animation will start at [property@TimedAnimation:value-from] and end at
this value.

If [property@TimedAnimation:reverse] is `TRUE`, the animation will start
at this value instead.</doc>
        <source-position filename="src/bis-timed-animation.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="444">a timed animation</doc>
            <type name="TimedAnimation" c:type="BisTimedAnimation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bis-timed-animation.c"
                 line="445">the value to animate to</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="alternate"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_alternate"
                getter="get_alternate"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_alternate"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_alternate"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="317">Whether the animation changes direction on every iteration.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="duration"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_duration"
                getter="get_duration"
                default-value="0">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_duration"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_duration"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="253">Duration of the animation, in milliseconds.

Describes how much time the animation will take.

If the animation repeats more than once, describes the duration of one
iteration.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="easing"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_easing"
                getter="get_easing"
                default-value="BIS_EASE_OUT_CUBIC">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_easing"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_easing"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="272">Easing function used in the animation.

Describes the curve the value is interpolated on.

See [enum@Easing] for the description of specific easing functions.</doc>
        <type name="Easing"/>
      </property>
      <property name="repeat-count"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_repeat_count"
                getter="get_repeat_count"
                default-value="1">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_repeat_count"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_repeat_count"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="289">Number of times the animation will play.

If set to 0, the animation will repeat endlessly.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reverse"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_reverse"
                getter="get_reverse"
                default-value="FALSE">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_reverse"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_reverse"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="305">Whether the animation plays backwards.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="value-from"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_from"
                getter="get_value_from"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_value_from"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_value_from"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="213">The value to animate from.

The animation will start at this value and end at
[property@TimedAnimation:value-to].

If [property@TimedAnimation:reverse] is `TRUE`, the animation will end at
this value instead.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value-to"
                version="1.0"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_value_to"
                getter="get_value_to"
                default-value="0.000000">
        <attribute name="org.gtk.Property.get"
                   value="bis_timed_animation_get_value_to"/>
        <attribute name="org.gtk.Property.set"
                   value="bis_timed_animation_set_value_to"/>
        <doc xml:space="preserve"
             filename="src/bis-timed-animation.c"
             line="233">The value to animate to.

The animation will start at [property@TimedAnimation:value-from] and end at
this value.

If [property@TimedAnimation:reverse] is `TRUE`, the animation will start
at this value instead.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="TimedAnimationClass"
            c:type="BisTimedAnimationClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="TimedAnimation">
      <source-position filename="src/bis-timed-animation.h" line="25"/>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="BIS_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="src/bis-version.h" line="175"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_S" value="1.0.0" c:type="BIS_VERSION_S">
      <doc xml:space="preserve"
           filename="src/bis-version.h"
           line="45">Bismuth version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="src/bis-version.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="easing_ease"
              c:identifier="bis_easing_ease"
              moved-to="Easing.ease"
              version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-easing.c"
           line="430">Computes easing with @easing for @value.

@value should generally be in the [0, 1] range.</doc>
      <source-position filename="src/bis-easing.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-easing.c"
             line="439">the easing for @value</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-easing.c"
               line="432">an easing value</doc>
          <type name="Easing" c:type="BisEasing"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-easing.c"
               line="433">a value to ease</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_enable_animations"
              c:identifier="bis_get_enable_animations"
              version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-animation-util.c"
           line="30">Checks whether animations are enabled for @widget.

This should be used when implementing an animated widget to know whether to
animate it or not.</doc>
      <source-position filename="src/bis-animation-util.h" line="26"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-animation-util.c"
             line="39">whether animations are enabled for @widget</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-util.c"
               line="32">a `GtkWidget`</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_major_version" c:identifier="bis_get_major_version">
      <doc xml:space="preserve"
           filename="src/bis-version.c"
           line="13">Returns the major version number of the Bismuth library.

For example, in libbismuth version 1.2.3 this is 1.

This function is in the library, so it represents the libbismuth library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the major version of the libbismuth headers you have
included when compiling your code.</doc>
      <source-position filename="src/bis-version.h" line="181"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-version.c"
             line="25">the major version number of the Bismuth library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_micro_version" c:identifier="bis_get_micro_version">
      <doc xml:space="preserve"
           filename="src/bis-version.c"
           line="53">Returns the micro version number of the Bismuth library.

For example, in libbismuth version 1.2.3 this is 3.

This function is in the library, so it represents the libbismuth library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the micro version of the libbismuth headers you have
included when compiling your code.</doc>
      <source-position filename="src/bis-version.h" line="185"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-version.c"
             line="65">the micro version number of the Bismuth library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="get_minor_version" c:identifier="bis_get_minor_version">
      <doc xml:space="preserve"
           filename="src/bis-version.c"
           line="33">Returns the minor version number of the Bismuth library.

For example, in libbismuth version 1.2.3 this is 2.

This function is in the library, so it represents the libbismuth library your
code is running against. Contrast with the [const@MAJOR_VERSION] constant,
which represents the minor version of the libbismuth headers you have
included when compiling your code.</doc>
      <source-position filename="src/bis-version.h" line="183"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-version.c"
             line="45">the minor version number of the Bismuth library</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="init" c:identifier="bis_init" version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-main.c"
           line="15">Initializes Libbismuth.

This function can be used instead of [func@Gtk.init] as it initializes GTK
implicitly.

There's no need to call this function if you're using [class@Application].

If Libbismuth has already been initialized, the function will simply return.

This makes sure translations, types, themes, and icons for the Bismuth
library are set up properly.</doc>
      <source-position filename="src/bis-main.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="is_initialized" c:identifier="bis_is_initialized">
      <doc xml:space="preserve"
           filename="src/bis-main.c"
           line="46">Use this function to check if libbismuth has been initialized with
[func@init].</doc>
      <source-position filename="src/bis-main.h" line="22"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-main.c"
             line="52">the initialization status</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="lerp" c:identifier="bis_lerp" version="1.0">
      <doc xml:space="preserve"
           filename="src/bis-animation-util.c"
           line="12">Computes the linear interpolation between @a and @b for @t.</doc>
      <source-position filename="src/bis-animation-util.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bis-animation-util.c"
             line="20">the computed value</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-util.c"
               line="14">the start</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-util.c"
               line="15">the end</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="t" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bis-animation-util.c"
               line="16">the interpolation rate</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
