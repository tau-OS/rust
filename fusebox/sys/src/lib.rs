// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git @ eab91ba8f88b)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type FuseboxFuseCategory = c_int;
pub const FUSEBOX_FUSE_CATEGORY_NETWORK: FuseboxFuseCategory = 0;
pub const FUSEBOX_FUSE_CATEGORY_PERSONAL: FuseboxFuseCategory = 1;
pub const FUSEBOX_FUSE_CATEGORY_SYSTEM: FuseboxFuseCategory = 2;
pub const FUSEBOX_FUSE_CATEGORY_CUSTOM: FuseboxFuseCategory = 3;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FuseboxFuseClass {
    pub parent_class: gobject::GObjectClass,
    pub get_widget: Option<unsafe extern "C" fn(*mut FuseboxFuse) -> *mut gtk::GtkWidget>,
    pub shown: Option<unsafe extern "C" fn(*mut FuseboxFuse)>,
    pub hidden: Option<unsafe extern "C" fn(*mut FuseboxFuse)>,
    pub search: Option<
        unsafe extern "C" fn(
            *mut FuseboxFuse,
            *const c_char,
            gio::GAsyncReadyCallback,
            *mut c_void,
        ),
    >,
    pub search_finish: Option<
        unsafe extern "C" fn(*mut FuseboxFuse, *mut gio::GAsyncResult) -> *mut glib::GHashTable,
    >,
    pub search_callback: Option<unsafe extern "C" fn(*mut FuseboxFuse, *const c_char)>,
}

impl ::std::fmt::Debug for FuseboxFuseClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("FuseboxFuseClass @ {self:p}"))
            .field("get_widget", &self.get_widget)
            .field("shown", &self.shown)
            .field("hidden", &self.hidden)
            .field("search", &self.search)
            .field("search_finish", &self.search_finish)
            .field("search_callback", &self.search_callback)
            .finish()
    }
}

#[repr(C)]
pub struct _FuseboxFusePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type FuseboxFusePrivate = *mut _FuseboxFusePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct FuseboxFusesManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for FuseboxFusesManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("FuseboxFusesManagerClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _FuseboxFusesManagerPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type FuseboxFusesManagerPrivate = *mut _FuseboxFusesManagerPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FuseboxFuse {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut FuseboxFusePrivate,
    pub SEP: *mut c_char,
}

impl ::std::fmt::Debug for FuseboxFuse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("FuseboxFuse @ {self:p}"))
            .field("SEP", &self.SEP)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct FuseboxFusesManager {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut FuseboxFusesManagerPrivate,
}

impl ::std::fmt::Debug for FuseboxFusesManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("FuseboxFusesManager @ {self:p}"))
            .finish()
    }
}

#[link(name = "fusebox-1")]
extern "C" {

    //=========================================================================
    // FuseboxFuseCategory
    //=========================================================================
    pub fn fusebox_fuse_category_get_type() -> GType;

    //=========================================================================
    // FuseboxFuse
    //=========================================================================
    pub fn fusebox_fuse_get_type() -> GType;
    pub fn fusebox_fuse_get_widget(self_: *mut FuseboxFuse) -> *mut gtk::GtkWidget;
    pub fn fusebox_fuse_shown(self_: *mut FuseboxFuse);
    pub fn fusebox_fuse_hidden(self_: *mut FuseboxFuse);
    pub fn fusebox_fuse_search(
        self_: *mut FuseboxFuse,
        search: *const c_char,
        _callback_: gio::GAsyncReadyCallback,
        _callback__target: *mut c_void,
    );
    pub fn fusebox_fuse_search_finish(
        self_: *mut FuseboxFuse,
        _res_: *mut gio::GAsyncResult,
    ) -> *mut glib::GHashTable;
    pub fn fusebox_fuse_search_callback(self_: *mut FuseboxFuse, location: *const c_char);
    pub fn fusebox_fuse_get_category(self_: *mut FuseboxFuse) -> FuseboxFuseCategory;
    pub fn fusebox_fuse_get_index(self_: *mut FuseboxFuse) -> c_int;
    pub fn fusebox_fuse_get_code_name(self_: *mut FuseboxFuse) -> *const c_char;
    pub fn fusebox_fuse_get_display_name(self_: *mut FuseboxFuse) -> *const c_char;
    pub fn fusebox_fuse_get_description(self_: *mut FuseboxFuse) -> *const c_char;
    pub fn fusebox_fuse_get_icon(self_: *mut FuseboxFuse) -> *const c_char;
    pub fn fusebox_fuse_get_supported_settings(self_: *mut FuseboxFuse) -> *mut glib::GHashTable;
    pub fn fusebox_fuse_get_can_show(self_: *mut FuseboxFuse) -> gboolean;
    pub fn fusebox_fuse_set_can_show(self_: *mut FuseboxFuse, value: gboolean);

    //=========================================================================
    // FuseboxFusesManager
    //=========================================================================
    pub fn fusebox_fuses_manager_get_type() -> GType;
    pub fn fusebox_fuses_manager_get_default() -> *mut FuseboxFusesManager;
    pub fn fusebox_fuses_manager_has_fuses(self_: *mut FuseboxFusesManager) -> gboolean;
    pub fn fusebox_fuses_manager_get_fuses(self_: *mut FuseboxFusesManager) -> *mut glib::GList;

}
