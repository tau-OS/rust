// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi,Fuse};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "FuseboxFusesManager")]
    pub struct FusesManager(Object<ffi::FuseboxFusesManager, ffi::FuseboxFusesManagerClass>);

    match fn {
        type_ => || ffi::fusebox_fuses_manager_get_type(),
    }
}

impl FusesManager {
        pub const NONE: Option<&'static FusesManager> = None;
    

    #[doc(alias = "fusebox_fuses_manager_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> FusesManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::fusebox_fuses_manager_get_default())
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::FusesManager>> Sealed for T {}
}

pub trait FusesManagerExt: IsA<FusesManager> + sealed::Sealed + 'static {
    #[doc(alias = "fusebox_fuses_manager_has_fuses")]
    fn has_fuses(&self) -> bool {
        unsafe {
            from_glib(ffi::fusebox_fuses_manager_has_fuses(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "fusebox_fuses_manager_get_fuses")]
    #[doc(alias = "get_fuses")]
    fn fuses(&self) -> Vec<Fuse> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::fusebox_fuses_manager_get_fuses(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "fuse-added")]
    fn connect_fuse_added<F: Fn(&Self, &Fuse) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn fuse_added_trampoline<P: IsA<FusesManager>, F: Fn(&P, &Fuse) + 'static>(this: *mut ffi::FuseboxFusesManager, fuse: *mut ffi::FuseboxFuse, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(FusesManager::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(fuse))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"fuse-added\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(fuse_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<FusesManager>> FusesManagerExt for O {}
