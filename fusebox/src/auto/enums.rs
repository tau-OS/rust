// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "FuseboxFuseCategory")]
pub enum FuseCategory {
    #[doc(alias = "FUSEBOX_FUSE_CATEGORY_NETWORK")]
    Network,
    #[doc(alias = "FUSEBOX_FUSE_CATEGORY_PERSONAL")]
    Personal,
    #[doc(alias = "FUSEBOX_FUSE_CATEGORY_SYSTEM")]
    System,
    #[doc(alias = "FUSEBOX_FUSE_CATEGORY_CUSTOM")]
    Custom,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for FuseCategory {
    type GlibType = ffi::FuseboxFuseCategory;

    #[inline]
    fn into_glib(self) -> ffi::FuseboxFuseCategory {
        match self {
            Self::Network => ffi::FUSEBOX_FUSE_CATEGORY_NETWORK,
            Self::Personal => ffi::FUSEBOX_FUSE_CATEGORY_PERSONAL,
            Self::System => ffi::FUSEBOX_FUSE_CATEGORY_SYSTEM,
            Self::Custom => ffi::FUSEBOX_FUSE_CATEGORY_CUSTOM,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::FuseboxFuseCategory> for FuseCategory {
    #[inline]
    unsafe fn from_glib(value: ffi::FuseboxFuseCategory) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::FUSEBOX_FUSE_CATEGORY_NETWORK => Self::Network,
            ffi::FUSEBOX_FUSE_CATEGORY_PERSONAL => Self::Personal,
            ffi::FUSEBOX_FUSE_CATEGORY_SYSTEM => Self::System,
            ffi::FUSEBOX_FUSE_CATEGORY_CUSTOM => Self::Custom,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for FuseCategory {
    #[inline]
    #[doc(alias = "fusebox_fuse_category_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::fusebox_fuse_category_get_type()) }
    }
}

impl glib::HasParamSpec for FuseCategory {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for FuseCategory {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for FuseCategory {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FuseCategory {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<FuseCategory> for glib::Value {
    #[inline]
    fn from(v: FuseCategory) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
