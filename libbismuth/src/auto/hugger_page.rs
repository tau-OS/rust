// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "BisHuggerPage")]
    pub struct HuggerPage(Object<ffi::BisHuggerPage, ffi::BisHuggerPageClass>);

    match fn {
        type_ => || ffi::bis_hugger_page_get_type(),
    }
}

impl HuggerPage {
    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`HuggerPage`] objects.
    ///
    /// This method returns an instance of [`HuggerPageBuilder`](crate::builders::HuggerPageBuilder) which can be used to create [`HuggerPage`] objects.
    pub fn builder() -> HuggerPageBuilder {
        HuggerPageBuilder::new()
    }

    #[doc(alias = "bis_hugger_page_get_child")]
    #[doc(alias = "get_child")]
    pub fn child(&self) -> gtk::Widget {
        unsafe { from_glib_none(ffi::bis_hugger_page_get_child(self.to_glib_none().0)) }
    }

    #[doc(alias = "bis_hugger_page_get_enabled")]
    #[doc(alias = "get_enabled")]
    pub fn is_enabled(&self) -> bool {
        unsafe { from_glib(ffi::bis_hugger_page_get_enabled(self.to_glib_none().0)) }
    }

    #[doc(alias = "bis_hugger_page_set_enabled")]
    pub fn set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::bis_hugger_page_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "enabled")]
    pub fn connect_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enabled_trampoline<F: Fn(&HuggerPage) + 'static>(
            this: *mut ffi::BisHuggerPage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::enabled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`HuggerPage`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct HuggerPageBuilder {
    builder: glib::object::ObjectBuilder<'static, HuggerPage>,
}

impl HuggerPageBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn enabled(self, enabled: bool) -> Self {
        Self {
            builder: self.builder.property("enabled", enabled),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`HuggerPage`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> HuggerPage {
        self.builder.build()
    }
}
