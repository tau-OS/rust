// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "BisEnumListModel")]
    pub struct EnumListModel(Object<ffi::BisEnumListModel, ffi::BisEnumListModelClass>) @implements gio::ListModel;

    match fn {
        type_ => || ffi::bis_enum_list_model_get_type(),
    }
}

impl EnumListModel {
    #[doc(alias = "bis_enum_list_model_new")]
    pub fn new(enum_type: glib::types::Type) -> EnumListModel {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::bis_enum_list_model_new(enum_type.into_glib()))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`EnumListModel`] objects.
            ///
            /// This method returns an instance of [`EnumListModelBuilder`](crate::builders::EnumListModelBuilder) which can be used to create [`EnumListModel`] objects.
            pub fn builder() -> EnumListModelBuilder {
                EnumListModelBuilder::new()
            }
        

    #[doc(alias = "bis_enum_list_model_find_position")]
    pub fn find_position(&self, value: i32) -> u32 {
        unsafe {
            ffi::bis_enum_list_model_find_position(self.to_glib_none().0, value)
        }
    }

    #[doc(alias = "bis_enum_list_model_get_enum_type")]
    #[doc(alias = "get_enum_type")]
    #[doc(alias = "enum-type")]
    pub fn enum_type(&self) -> glib::types::Type {
        unsafe {
            from_glib(ffi::bis_enum_list_model_get_enum_type(self.to_glib_none().0))
        }
    }
}

impl Default for EnumListModel {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`EnumListModel`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct EnumListModelBuilder {
            builder: glib::object::ObjectBuilder<'static, EnumListModel>,
        }

        impl EnumListModelBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn enum_type(self, enum_type: glib::types::Type) -> Self {
                            Self { builder: self.builder.property("enum-type", enum_type), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`EnumListModel`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> EnumListModel {
    self.builder.build() }
}
