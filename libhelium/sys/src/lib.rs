// Generated by gir (https://github.com/gtk-rs/gir @ 2d5d67805483)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 040da0b3a013)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type HeAboutWindowLicenses = c_int;
pub const HE_ABOUT_WINDOW_LICENSES_GPLv3: HeAboutWindowLicenses = 0;
pub const HE_ABOUT_WINDOW_LICENSES_MIT: HeAboutWindowLicenses = 1;
pub const HE_ABOUT_WINDOW_LICENSES_MPLv2: HeAboutWindowLicenses = 2;
pub const HE_ABOUT_WINDOW_LICENSES_UNLICENSE: HeAboutWindowLicenses = 3;
pub const HE_ABOUT_WINDOW_LICENSES_APACHEv2: HeAboutWindowLicenses = 4;
pub const HE_ABOUT_WINDOW_LICENSES_WTFPL: HeAboutWindowLicenses = 5;
pub const HE_ABOUT_WINDOW_LICENSES_PROPRIETARY: HeAboutWindowLicenses = 6;

pub type HeBannerStyle = c_int;
pub const HE_BANNER_STYLE_INFO: HeBannerStyle = 0;
pub const HE_BANNER_STYLE_WARNING: HeBannerStyle = 1;
pub const HE_BANNER_STYLE_ERROR: HeBannerStyle = 2;

pub type HeBottomBarPosition = c_int;
pub const HE_BOTTOM_BAR_POSITION_LEFT: HeBottomBarPosition = 0;
pub const HE_BOTTOM_BAR_POSITION_RIGHT: HeBottomBarPosition = 1;

pub type HeColors = c_int;
pub const HE_COLORS_NONE: HeColors = 0;
pub const HE_COLORS_RED: HeColors = 1;
pub const HE_COLORS_ORANGE: HeColors = 2;
pub const HE_COLORS_YELLOW: HeColors = 3;
pub const HE_COLORS_GREEN: HeColors = 4;
pub const HE_COLORS_BLUE: HeColors = 5;
pub const HE_COLORS_INDIGO: HeColors = 6;
pub const HE_COLORS_PURPLE: HeColors = 7;
pub const HE_COLORS_PINK: HeColors = 8;
pub const HE_COLORS_MINT: HeColors = 9;
pub const HE_COLORS_BROWN: HeColors = 10;
pub const HE_COLORS_LIGHT: HeColors = 11;
pub const HE_COLORS_DARK: HeColors = 12;

pub type HeContentBlockImageClusterImagePosition = c_int;
pub const HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_LEFT:
    HeContentBlockImageClusterImagePosition = 0;
pub const HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_LEFT:
    HeContentBlockImageClusterImagePosition = 1;
pub const HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_RIGHT:
    HeContentBlockImageClusterImagePosition = 2;
pub const HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_RIGHT:
    HeContentBlockImageClusterImagePosition = 3;

pub type HeDesktopColorScheme = c_int;
pub const HE_DESKTOP_COLOR_SCHEME_NO_PREFERENCE: HeDesktopColorScheme = 0;
pub const HE_DESKTOP_COLOR_SCHEME_DARK: HeDesktopColorScheme = 1;
pub const HE_DESKTOP_COLOR_SCHEME_LIGHT: HeDesktopColorScheme = 2;

pub type HeDesktopDarkModeStrength = c_int;
pub const HE_DESKTOP_DARK_MODE_STRENGTH_MEDIUM: HeDesktopDarkModeStrength = 0;
pub const HE_DESKTOP_DARK_MODE_STRENGTH_HARSH: HeDesktopDarkModeStrength = 1;
pub const HE_DESKTOP_DARK_MODE_STRENGTH_SOFT: HeDesktopDarkModeStrength = 2;

pub type HeModifierBadgeAlignment = c_int;
pub const HE_MODIFIER_BADGE_ALIGNMENT_LEFT: HeModifierBadgeAlignment = 0;
pub const HE_MODIFIER_BADGE_ALIGNMENT_CENTER: HeModifierBadgeAlignment = 1;
pub const HE_MODIFIER_BADGE_ALIGNMENT_RIGHT: HeModifierBadgeAlignment = 2;

pub type HeOverlayButtonAlignment = c_int;
pub const HE_OVERLAY_BUTTON_ALIGNMENT_LEFT: HeOverlayButtonAlignment = 0;
pub const HE_OVERLAY_BUTTON_ALIGNMENT_CENTER: HeOverlayButtonAlignment = 1;
pub const HE_OVERLAY_BUTTON_ALIGNMENT_RIGHT: HeOverlayButtonAlignment = 2;

pub type HeOverlayButtonSize = c_int;
pub const HE_OVERLAY_BUTTON_SIZE_SMALL: HeOverlayButtonSize = 0;
pub const HE_OVERLAY_BUTTON_SIZE_MEDIUM: HeOverlayButtonSize = 1;
pub const HE_OVERLAY_BUTTON_SIZE_LARGE: HeOverlayButtonSize = 2;

pub type HeTabSwitcherTabBarBehavior = c_int;
pub const HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_ALWAYS: HeTabSwitcherTabBarBehavior = 0;
pub const HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_SINGLE: HeTabSwitcherTabBarBehavior = 1;
pub const HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_NEVER: HeTabSwitcherTabBarBehavior = 2;

// Constants
pub const HE_COLOR_LAB_CONSTANTS_Kn: c_int = 18;
pub const HE_COLOR_LAB_CONSTANTS_Xn: c_double = 0.9570855264;
pub const HE_COLOR_LAB_CONSTANTS_Yn: c_double = 1.0114135331;
pub const HE_COLOR_LAB_CONSTANTS_Zn: c_double = 1.1190554598;
pub const HE_COLOR_LAB_CONSTANTS_t0: c_double = 0.1379310345;
pub const HE_COLOR_LAB_CONSTANTS_t1: c_double = 0.2068965523;
pub const HE_COLOR_LAB_CONSTANTS_t2: c_double = 0.1284185508;
pub const HE_COLOR_LAB_CONSTANTS_t3: c_double = 0.0088564521;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAboutWindowClass {
    pub parent_class: HeWindowClass,
}

impl ::std::fmt::Debug for HeAboutWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAboutWindowClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeAboutWindowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeAboutWindowPrivate = *mut _HeAboutWindowPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAppBarClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeAppBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAppBarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeAppBarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeAppBarPrivate = *mut _HeAppBarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeApplicationClass {
    pub parent_class: gtk::GtkApplicationClass,
}

impl ::std::fmt::Debug for HeApplicationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeApplicationClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeApplicationPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeApplicationPrivate = *mut _HeApplicationPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeApplicationWindowClass {
    pub parent_class: gtk::GtkApplicationWindowClass,
}

impl ::std::fmt::Debug for HeApplicationWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeApplicationWindowClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeApplicationWindowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeApplicationWindowPrivate = *mut _HeApplicationWindowPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAvatarClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeAvatarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAvatarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeAvatarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeAvatarPrivate = *mut _HeAvatarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBadgeClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeBadgeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBadgeClass @ {self:p}")).finish()
    }
}

#[repr(C)]
pub struct _HeBadgePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeBadgePrivate = *mut _HeBadgePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBannerClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeBannerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBannerClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeBannerPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeBannerPrivate = *mut _HeBannerPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBinClass {
    pub parent_class: gtk::GtkWidgetClass,
    pub add_child: Option<
        unsafe extern "C" fn(
            *mut HeBin,
            *mut gtk::GtkBuilder,
            *mut gobject::GObject,
            *const c_char,
        ),
    >,
}

impl ::std::fmt::Debug for HeBinClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBinClass @ {self:p}"))
            .field("add_child", &self.add_child)
            .finish()
    }
}

#[repr(C)]
pub struct _HeBinPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeBinPrivate = *mut _HeBinPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBottomBarClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeBottomBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBottomBarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeBottomBarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeBottomBarPrivate = *mut _HeBottomBarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeButtonClass {
    pub parent_class: gtk::GtkButtonClass,
}

impl ::std::fmt::Debug for HeButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeButtonClass @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeButtonContentClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for HeButtonContentClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeButtonContentClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeButtonContentPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeButtonContentPrivate = *mut _HeButtonContentPrivate;

#[repr(C)]
pub struct _HeButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeButtonPrivate = *mut _HeButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeChipClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeChipClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeChipClass @ {self:p}")).finish()
    }
}

#[repr(C)]
pub struct _HeChipPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeChipPrivate = *mut _HeChipPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeColorLABColor {
    pub l: c_double,
    pub a: c_double,
    pub b: c_double,
}

impl ::std::fmt::Debug for HeColorLABColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeColorLABColor @ {self:p}"))
            .field("l", &self.l)
            .field("a", &self.a)
            .field("b", &self.b)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeColorLCHColor {
    pub l: c_double,
    pub c: c_double,
    pub h: c_double,
}

impl ::std::fmt::Debug for HeColorLCHColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeColorLCHColor @ {self:p}"))
            .field("l", &self.l)
            .field("c", &self.c)
            .field("h", &self.h)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeColorRGBColor {
    pub r: c_int,
    pub g: c_int,
    pub b: c_int,
}

impl ::std::fmt::Debug for HeColorRGBColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeColorRGBColor @ {self:p}"))
            .field("r", &self.r)
            .field("g", &self.g)
            .field("b", &self.b)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeColorXYZColor {
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
}

impl ::std::fmt::Debug for HeColorXYZColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeColorXYZColor @ {self:p}"))
            .field("x", &self.x)
            .field("y", &self.y)
            .field("z", &self.z)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlockClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeContentBlockClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlockClass @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlockImageClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeContentBlockImageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlockImageClass @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlockImageClusterClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeContentBlockImageClusterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlockImageClusterClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeContentBlockImageClusterPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeContentBlockImageClusterPrivate = *mut _HeContentBlockImageClusterPrivate;

#[repr(C)]
pub struct _HeContentBlockImagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeContentBlockImagePrivate = *mut _HeContentBlockImagePrivate;

#[repr(C)]
pub struct _HeContentBlockPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeContentBlockPrivate = *mut _HeContentBlockPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentListClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeContentListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentListClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeContentListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeContentListPrivate = *mut _HeContentListPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDesktopClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for HeDesktopClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDesktopClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeDesktopPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeDesktopPrivate = *mut _HeDesktopPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDialogClass {
    pub parent_class: HeWindowClass,
}

impl ::std::fmt::Debug for HeDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDialogClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeDialogPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeDialogPrivate = *mut _HeDialogPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDisclosureButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeDisclosureButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDisclosureButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeDisclosureButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeDisclosureButtonPrivate = *mut _HeDisclosureButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeEmptyPageClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeEmptyPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeEmptyPageClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeEmptyPagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeEmptyPagePrivate = *mut _HeEmptyPagePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeFillButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeFillButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeFillButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeFillButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeFillButtonPrivate = *mut _HeFillButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeIconicButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeIconicButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeIconicButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeIconicButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeIconicButtonPrivate = *mut _HeIconicButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeMiniContentBlockClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeMiniContentBlockClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeMiniContentBlockClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeMiniContentBlockPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeMiniContentBlockPrivate = *mut _HeMiniContentBlockPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeModifierBadgeClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeModifierBadgeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeModifierBadgeClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeModifierBadgePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeModifierBadgePrivate = *mut _HeModifierBadgePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeNavigationRailClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeNavigationRailClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeNavigationRailClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeNavigationRailPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeNavigationRailPrivate = *mut _HeNavigationRailPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeOutlineButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeOutlineButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeOutlineButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeOutlineButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeOutlineButtonPrivate = *mut _HeOutlineButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeOverlayButtonClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeOverlayButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeOverlayButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeOverlayButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeOverlayButtonPrivate = *mut _HeOverlayButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HePillButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HePillButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HePillButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HePillButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HePillButtonPrivate = *mut _HePillButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSegmentedButtonClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for HeSegmentedButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSegmentedButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSegmentedButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSegmentedButtonPrivate = *mut _HeSegmentedButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsListClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeSettingsListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsListClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSettingsListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSettingsListPrivate = *mut _HeSettingsListPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsPageClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeSettingsPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsPageClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSettingsPagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSettingsPagePrivate = *mut _HeSettingsPagePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsRowClass {
    pub parent_class: gtk::GtkListBoxRowClass,
}

impl ::std::fmt::Debug for HeSettingsRowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsRowClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSettingsRowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSettingsRowPrivate = *mut _HeSettingsRowPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsWindowClass {
    pub parent_class: HeWindowClass,
}

impl ::std::fmt::Debug for HeSettingsWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsWindowClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSettingsWindowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSettingsWindowPrivate = *mut _HeSettingsWindowPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSideBarClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeSideBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSideBarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeSideBarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeSideBarPrivate = *mut _HeSideBarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTabClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeTabClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTabClass @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTabPageClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeTabPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTabPageClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeTabPagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeTabPagePrivate = *mut _HeTabPagePrivate;

#[repr(C)]
pub struct _HeTabPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeTabPrivate = *mut _HeTabPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTabSwitcherClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeTabSwitcherClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTabSwitcherClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeTabSwitcherPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeTabSwitcherPrivate = *mut _HeTabSwitcherPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTextButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeTextButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTextButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeTextButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeTextButtonPrivate = *mut _HeTextButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTintButtonClass {
    pub parent_class: HeButtonClass,
}

impl ::std::fmt::Debug for HeTintButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTintButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeTintButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeTintButtonPrivate = *mut _HeTintButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeToastClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeToastClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeToastClass @ {self:p}")).finish()
    }
}

#[repr(C)]
pub struct _HeToastPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeToastPrivate = *mut _HeToastPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewAuxClass {
    pub parent_class: HeViewClass,
}

impl ::std::fmt::Debug for HeViewAuxClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewAuxClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewAuxPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewAuxPrivate = *mut _HeViewAuxPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewChooserClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeViewChooserClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewChooserClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewChooserPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewChooserPrivate = *mut _HeViewChooserPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewClass {
    pub parent_class: gtk::GtkWidgetClass,
    pub add_child: Option<
        unsafe extern "C" fn(
            *mut HeView,
            *mut gtk::GtkBuilder,
            *mut gobject::GObject,
            *const c_char,
        ),
    >,
}

impl ::std::fmt::Debug for HeViewClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewClass @ {self:p}"))
            .field("add_child", &self.add_child)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewDualClass {
    pub parent_class: HeViewClass,
}

impl ::std::fmt::Debug for HeViewDualClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewDualClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewDualPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewDualPrivate = *mut _HeViewDualPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewMonoClass {
    pub parent_class: HeViewClass,
}

impl ::std::fmt::Debug for HeViewMonoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewMonoClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewMonoPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewMonoPrivate = *mut _HeViewMonoPrivate;

#[repr(C)]
pub struct _HeViewPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewPrivate = *mut _HeViewPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewSubTitleClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeViewSubTitleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewSubTitleClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewSubTitlePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewSubTitlePrivate = *mut _HeViewSubTitlePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewSwitcherClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeViewSwitcherClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewSwitcherClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewSwitcherPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewSwitcherPrivate = *mut _HeViewSwitcherPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewTitleClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeViewTitleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewTitleClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeViewTitlePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeViewTitlePrivate = *mut _HeViewTitlePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeWelcomeScreenClass {
    pub parent_class: HeBinClass,
}

impl ::std::fmt::Debug for HeWelcomeScreenClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeWelcomeScreenClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeWelcomeScreenPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeWelcomeScreenPrivate = *mut _HeWelcomeScreenPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeWindowClass {
    pub parent_class: gtk::GtkWindowClass,
}

impl ::std::fmt::Debug for HeWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeWindowClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _HeWindowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type HeWindowPrivate = *mut _HeWindowPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAboutWindow {
    pub parent_instance: HeWindow,
    pub priv_: *mut HeAboutWindowPrivate,
    pub _translate_url: *mut c_char,
    pub _issue_url: *mut c_char,
    pub _more_info_url: *mut c_char,
}

impl ::std::fmt::Debug for HeAboutWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAboutWindow @ {self:p}"))
            .field("_translate_url", &self._translate_url)
            .field("_issue_url", &self._issue_url)
            .field("_more_info_url", &self._more_info_url)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAppBar {
    pub parent_instance: HeBin,
    pub priv_: *mut HeAppBarPrivate,
    pub flat: gboolean,
    pub back_button: *mut gtk::GtkButton,
    pub btn_box: *mut gtk::GtkBox,
}

impl ::std::fmt::Debug for HeAppBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAppBar @ {self:p}"))
            .field("flat", &self.flat)
            .field("back_button", &self.back_button)
            .field("btn_box", &self.btn_box)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeApplication {
    pub parent_instance: gtk::GtkApplication,
    pub priv_: *mut HeApplicationPrivate,
}

impl ::std::fmt::Debug for HeApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeApplication @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeApplicationWindow {
    pub parent_instance: gtk::GtkApplicationWindow,
    pub priv_: *mut HeApplicationWindowPrivate,
}

impl ::std::fmt::Debug for HeApplicationWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeApplicationWindow @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeAvatar {
    pub parent_instance: HeBin,
    pub priv_: *mut HeAvatarPrivate,
}

impl ::std::fmt::Debug for HeAvatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeAvatar @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBadge {
    pub parent_instance: HeBin,
    pub priv_: *mut HeBadgePrivate,
}

impl ::std::fmt::Debug for HeBadge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBadge @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBanner {
    pub parent_instance: HeBin,
    pub priv_: *mut HeBannerPrivate,
}

impl ::std::fmt::Debug for HeBanner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBanner @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBin {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut HeBinPrivate,
}

impl ::std::fmt::Debug for HeBin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBin @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeBottomBar {
    pub parent_instance: HeBin,
    pub priv_: *mut HeBottomBarPrivate,
}

impl ::std::fmt::Debug for HeBottomBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeBottomBar @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeButton {
    pub parent_instance: gtk::GtkButton,
    pub priv_: *mut HeButtonPrivate,
}

impl ::std::fmt::Debug for HeButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeButton @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeButtonContent {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut HeButtonContentPrivate,
    pub image: *mut gtk::GtkImage,
}

impl ::std::fmt::Debug for HeButtonContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeButtonContent @ {self:p}"))
            .field("image", &self.image)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeChip {
    pub parent_instance: HeButton,
    pub priv_: *mut HeChipPrivate,
}

impl ::std::fmt::Debug for HeChip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeChip @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlock {
    pub parent_instance: HeBin,
    pub priv_: *mut HeContentBlockPrivate,
}

impl ::std::fmt::Debug for HeContentBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlock @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlockImage {
    pub parent_instance: HeBin,
    pub priv_: *mut HeContentBlockImagePrivate,
}

impl ::std::fmt::Debug for HeContentBlockImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlockImage @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentBlockImageCluster {
    pub parent_instance: HeBin,
    pub priv_: *mut HeContentBlockImageClusterPrivate,
}

impl ::std::fmt::Debug for HeContentBlockImageCluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentBlockImageCluster @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeContentList {
    pub parent_instance: HeBin,
    pub priv_: *mut HeContentListPrivate,
    pub children: *mut glib::GList,
}

impl ::std::fmt::Debug for HeContentList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeContentList @ {self:p}"))
            .field("children", &self.children)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDesktop {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut HeDesktopPrivate,
}

impl ::std::fmt::Debug for HeDesktop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDesktop @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDialog {
    pub parent_instance: HeWindow,
    pub priv_: *mut HeDialogPrivate,
    pub cancel_button: *mut HeTextButton,
}

impl ::std::fmt::Debug for HeDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDialog @ {self:p}"))
            .field("cancel_button", &self.cancel_button)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeDisclosureButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeDisclosureButtonPrivate,
}

impl ::std::fmt::Debug for HeDisclosureButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeDisclosureButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeEmptyPage {
    pub parent_instance: HeBin,
    pub priv_: *mut HeEmptyPagePrivate,
    pub action_button: *mut HePillButton,
}

impl ::std::fmt::Debug for HeEmptyPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeEmptyPage @ {self:p}"))
            .field("action_button", &self.action_button)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeFillButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeFillButtonPrivate,
}

impl ::std::fmt::Debug for HeFillButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeFillButton @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeIconicButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeIconicButtonPrivate,
}

impl ::std::fmt::Debug for HeIconicButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeIconicButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeMiniContentBlock {
    pub parent_instance: HeBin,
    pub priv_: *mut HeMiniContentBlockPrivate,
}

impl ::std::fmt::Debug for HeMiniContentBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeMiniContentBlock @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeModifierBadge {
    pub parent_instance: HeBin,
    pub priv_: *mut HeModifierBadgePrivate,
}

impl ::std::fmt::Debug for HeModifierBadge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeModifierBadge @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeNavigationRail {
    pub parent_instance: HeBin,
    pub priv_: *mut HeNavigationRailPrivate,
}

impl ::std::fmt::Debug for HeNavigationRail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeNavigationRail @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeOutlineButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeOutlineButtonPrivate,
}

impl ::std::fmt::Debug for HeOutlineButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeOutlineButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeOverlayButton {
    pub parent_instance: HeBin,
    pub priv_: *mut HeOverlayButtonPrivate,
}

impl ::std::fmt::Debug for HeOverlayButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeOverlayButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HePillButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HePillButtonPrivate,
}

impl ::std::fmt::Debug for HePillButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HePillButton @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSegmentedButton {
    pub parent_instance: gtk::GtkBox,
    pub priv_: *mut HeSegmentedButtonPrivate,
}

impl ::std::fmt::Debug for HeSegmentedButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSegmentedButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsList {
    pub parent_instance: HeBin,
    pub priv_: *mut HeSettingsListPrivate,
    pub children: *mut glib::GList,
}

impl ::std::fmt::Debug for HeSettingsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsList @ {self:p}"))
            .field("children", &self.children)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsPage {
    pub parent_instance: HeBin,
    pub priv_: *mut HeSettingsPagePrivate,
}

impl ::std::fmt::Debug for HeSettingsPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsPage @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsRow {
    pub parent_instance: gtk::GtkListBoxRow,
    pub priv_: *mut HeSettingsRowPrivate,
}

impl ::std::fmt::Debug for HeSettingsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsRow @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSettingsWindow {
    pub parent_instance: HeWindow,
    pub priv_: *mut HeSettingsWindowPrivate,
}

impl ::std::fmt::Debug for HeSettingsWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSettingsWindow @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeSideBar {
    pub parent_instance: HeBin,
    pub priv_: *mut HeSideBarPrivate,
}

impl ::std::fmt::Debug for HeSideBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeSideBar @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTab {
    pub parent_instance: HeBin,
    pub priv_: *mut HeTabPrivate,
    pub page_container: *mut HeTabPage,
}

impl ::std::fmt::Debug for HeTab {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTab @ {self:p}"))
            .field("page_container", &self.page_container)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTabPage {
    pub parent_instance: HeBin,
    pub priv_: *mut HeTabPagePrivate,
}

impl ::std::fmt::Debug for HeTabPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTabPage @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTabSwitcher {
    pub parent_instance: HeBin,
    pub priv_: *mut HeTabSwitcherPrivate,
    pub notebook: *mut gtk::GtkNotebook,
}

impl ::std::fmt::Debug for HeTabSwitcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTabSwitcher @ {self:p}"))
            .field("notebook", &self.notebook)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTextButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeTextButtonPrivate,
}

impl ::std::fmt::Debug for HeTextButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTextButton @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeTintButton {
    pub parent_instance: HeButton,
    pub priv_: *mut HeTintButtonPrivate,
}

impl ::std::fmt::Debug for HeTintButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeTintButton @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeToast {
    pub parent_instance: HeBin,
    pub priv_: *mut HeToastPrivate,
}

impl ::std::fmt::Debug for HeToast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeToast @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeView {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut HeViewPrivate,
}

impl ::std::fmt::Debug for HeView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeView @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewAux {
    pub parent_instance: HeView,
    pub priv_: *mut HeViewAuxPrivate,
}

impl ::std::fmt::Debug for HeViewAux {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewAux @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewChooser {
    pub parent_instance: HeBin,
    pub priv_: *mut HeViewChooserPrivate,
}

impl ::std::fmt::Debug for HeViewChooser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewChooser @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewDual {
    pub parent_instance: HeView,
    pub priv_: *mut HeViewDualPrivate,
}

impl ::std::fmt::Debug for HeViewDual {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewDual @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewMono {
    pub parent_instance: HeView,
    pub priv_: *mut HeViewMonoPrivate,
}

impl ::std::fmt::Debug for HeViewMono {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewMono @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewSubTitle {
    pub parent_instance: HeBin,
    pub priv_: *mut HeViewSubTitlePrivate,
}

impl ::std::fmt::Debug for HeViewSubTitle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewSubTitle @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewSwitcher {
    pub parent_instance: HeBin,
    pub priv_: *mut HeViewSwitcherPrivate,
}

impl ::std::fmt::Debug for HeViewSwitcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewSwitcher @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeViewTitle {
    pub parent_instance: HeBin,
    pub priv_: *mut HeViewTitlePrivate,
}

impl ::std::fmt::Debug for HeViewTitle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeViewTitle @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeWelcomeScreen {
    pub parent_instance: HeBin,
    pub priv_: *mut HeWelcomeScreenPrivate,
}

impl ::std::fmt::Debug for HeWelcomeScreen {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeWelcomeScreen @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct HeWindow {
    pub parent_instance: gtk::GtkWindow,
    pub priv_: *mut HeWindowPrivate,
}

impl ::std::fmt::Debug for HeWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("HeWindow @ {self:p}")).finish()
    }
}

#[link(name = "helium-1")]
extern "C" {

    //=========================================================================
    // HeAboutWindowLicenses
    //=========================================================================
    pub fn he_about_window_licenses_get_type() -> GType;

    //=========================================================================
    // HeBannerStyle
    //=========================================================================
    pub fn he_banner_style_get_type() -> GType;

    //=========================================================================
    // HeBottomBarPosition
    //=========================================================================
    pub fn he_bottom_bar_position_get_type() -> GType;

    //=========================================================================
    // HeColors
    //=========================================================================
    pub fn he_colors_get_type() -> GType;

    //=========================================================================
    // HeContentBlockImageClusterImagePosition
    //=========================================================================
    pub fn he_content_block_image_cluster_image_position_get_type() -> GType;

    //=========================================================================
    // HeDesktopColorScheme
    //=========================================================================
    pub fn he_desktop_color_scheme_get_type() -> GType;

    //=========================================================================
    // HeDesktopDarkModeStrength
    //=========================================================================
    pub fn he_desktop_dark_mode_strength_get_type() -> GType;

    //=========================================================================
    // HeModifierBadgeAlignment
    //=========================================================================
    pub fn he_modifier_badge_alignment_get_type() -> GType;

    //=========================================================================
    // HeOverlayButtonAlignment
    //=========================================================================
    pub fn he_overlay_button_alignment_get_type() -> GType;

    //=========================================================================
    // HeOverlayButtonSize
    //=========================================================================
    pub fn he_overlay_button_size_get_type() -> GType;

    //=========================================================================
    // HeTabSwitcherTabBarBehavior
    //=========================================================================
    pub fn he_tab_switcher_tab_bar_behavior_get_type() -> GType;

    //=========================================================================
    // HeColorLABColor
    //=========================================================================
    pub fn he_color_lab_color_get_type() -> GType;

    //=========================================================================
    // HeColorLCHColor
    //=========================================================================
    pub fn he_color_lch_color_get_type() -> GType;

    //=========================================================================
    // HeColorRGBColor
    //=========================================================================
    pub fn he_color_rgb_color_get_type() -> GType;

    //=========================================================================
    // HeColorXYZColor
    //=========================================================================
    pub fn he_color_xyz_color_get_type() -> GType;

    //=========================================================================
    // HeAboutWindow
    //=========================================================================
    pub fn he_about_window_get_type() -> GType;
    pub fn he_about_window_new(
        parent: *mut gtk::GtkWindow,
        app_name: *const c_char,
        app_id: *const c_char,
        version: *const c_char,
        icon: *const c_char,
        translate_url: *const c_char,
        issue_url: *const c_char,
        more_info_url: *const c_char,
        translators: *mut *mut c_char,
        translators_length1: c_int,
        developers: *mut *mut c_char,
        developers_length1: c_int,
        copyright_year: c_int,
        license: HeAboutWindowLicenses,
        color: HeColors,
    ) -> *mut HeAboutWindow;
    pub fn he_about_window_get_color(self_: *mut HeAboutWindow) -> HeColors;
    pub fn he_about_window_set_color(self_: *mut HeAboutWindow, value: HeColors);
    pub fn he_about_window_get_license(self_: *mut HeAboutWindow) -> HeAboutWindowLicenses;
    pub fn he_about_window_set_license(self_: *mut HeAboutWindow, value: HeAboutWindowLicenses);
    pub fn he_about_window_get_version(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_version(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_app_name(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_app_name(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_icon(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_icon(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_translator_names(
        self_: *mut HeAboutWindow,
        result_length1: *mut c_int,
    ) -> *mut *mut c_char;
    pub fn he_about_window_set_translator_names(
        self_: *mut HeAboutWindow,
        value: *mut *mut c_char,
        value_length1: c_int,
    );
    pub fn he_about_window_get_developer_names(
        self_: *mut HeAboutWindow,
        result_length1: *mut c_int,
    ) -> *mut *mut c_char;
    pub fn he_about_window_set_developer_names(
        self_: *mut HeAboutWindow,
        value: *mut *mut c_char,
        value_length1: c_int,
    );
    pub fn he_about_window_get_copyright_year(self_: *mut HeAboutWindow) -> c_int;
    pub fn he_about_window_set_copyright_year(self_: *mut HeAboutWindow, value: c_int);
    pub fn he_about_window_get_app_id(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_app_id(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_translate_url(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_translate_url(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_issue_url(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_issue_url(self_: *mut HeAboutWindow, value: *const c_char);
    pub fn he_about_window_get_more_info_url(self_: *mut HeAboutWindow) -> *const c_char;
    pub fn he_about_window_set_more_info_url(self_: *mut HeAboutWindow, value: *const c_char);

    //=========================================================================
    // HeAppBar
    //=========================================================================
    pub fn he_app_bar_get_type() -> GType;
    pub fn he_app_bar_append(self_: *mut HeAppBar, child: *mut gtk::GtkWidget);
    pub fn he_app_bar_remove(self_: *mut HeAppBar, child: *mut gtk::GtkWidget);
    pub fn he_app_bar_new() -> *mut HeAppBar;
    pub fn he_app_bar_get_stack(self_: *mut HeAppBar) -> *mut gtk::GtkStack;
    pub fn he_app_bar_set_stack(self_: *mut HeAppBar, value: *mut gtk::GtkStack);
    pub fn he_app_bar_get_scroller(self_: *mut HeAppBar) -> *mut gtk::GtkScrolledWindow;
    pub fn he_app_bar_set_scroller(self_: *mut HeAppBar, value: *mut gtk::GtkScrolledWindow);
    pub fn he_app_bar_get_viewtitle_label(self_: *mut HeAppBar) -> *const c_char;
    pub fn he_app_bar_set_viewtitle_label(self_: *mut HeAppBar, value: *const c_char);
    pub fn he_app_bar_get_viewtitle_widget(self_: *mut HeAppBar) -> *mut gtk::GtkWidget;
    pub fn he_app_bar_set_viewtitle_widget(self_: *mut HeAppBar, value: *mut gtk::GtkWidget);
    pub fn he_app_bar_get_viewsubtitle_label(self_: *mut HeAppBar) -> *const c_char;
    pub fn he_app_bar_set_viewsubtitle_label(self_: *mut HeAppBar, value: *const c_char);
    pub fn he_app_bar_get_show_buttons(self_: *mut HeAppBar) -> gboolean;
    pub fn he_app_bar_set_show_buttons(self_: *mut HeAppBar, value: gboolean);
    pub fn he_app_bar_get_show_back(self_: *mut HeAppBar) -> gboolean;
    pub fn he_app_bar_set_show_back(self_: *mut HeAppBar, value: gboolean);

    //=========================================================================
    // HeApplication
    //=========================================================================
    pub fn he_application_get_type() -> GType;
    pub fn he_application_new(
        application_id: *const c_char,
        flags: gio::GApplicationFlags,
    ) -> *mut HeApplication;
    pub fn he_application_get_default_accent_color(
        self_: *mut HeApplication,
    ) -> *mut HeColorRGBColor;
    pub fn he_application_set_default_accent_color(
        self_: *mut HeApplication,
        value: *mut HeColorRGBColor,
    );
    pub fn he_application_get_accent_color(self_: *mut HeApplication, result: *mut HeColorRGBColor);
    pub fn he_application_get_foreground(self_: *mut HeApplication, result: *mut HeColorRGBColor);
    pub fn he_application_get_accent_foreground(
        self_: *mut HeApplication,
        result: *mut HeColorRGBColor,
    );

    //=========================================================================
    // HeApplicationWindow
    //=========================================================================
    pub fn he_application_window_get_type() -> GType;
    pub fn he_application_window_new(app: *mut HeApplication) -> *mut HeApplicationWindow;
    pub fn he_application_window_get_modal(self_: *mut HeApplicationWindow) -> gboolean;
    pub fn he_application_window_set_modal(self_: *mut HeApplicationWindow, value: gboolean);
    pub fn he_application_window_get_has_title(self_: *mut HeApplicationWindow) -> gboolean;
    pub fn he_application_window_set_has_title(self_: *mut HeApplicationWindow, value: gboolean);
    pub fn he_application_window_get_has_back_button(self_: *mut HeApplicationWindow) -> gboolean;
    pub fn he_application_window_set_has_back_button(
        self_: *mut HeApplicationWindow,
        value: gboolean,
    );

    //=========================================================================
    // HeAvatar
    //=========================================================================
    pub fn he_avatar_get_type() -> GType;
    pub fn he_avatar_new(size: c_int, image: *const c_char, text: *const c_char) -> *mut HeAvatar;
    pub fn he_avatar_get_image(self_: *mut HeAvatar) -> *const c_char;
    pub fn he_avatar_set_image(self_: *mut HeAvatar, value: *const c_char);
    pub fn he_avatar_get_size(self_: *mut HeAvatar) -> c_int;
    pub fn he_avatar_set_size(self_: *mut HeAvatar, value: c_int);
    pub fn he_avatar_get_text(self_: *mut HeAvatar) -> *const c_char;
    pub fn he_avatar_set_text(self_: *mut HeAvatar, value: *const c_char);

    //=========================================================================
    // HeBadge
    //=========================================================================
    pub fn he_badge_get_type() -> GType;
    pub fn he_badge_new() -> *mut HeBadge;
    pub fn he_badge_get_child(self_: *mut HeBadge) -> *mut gtk::GtkWidget;
    pub fn he_badge_set_child(self_: *mut HeBadge, value: *mut gtk::GtkWidget);
    pub fn he_badge_get_label(self_: *mut HeBadge) -> *const c_char;
    pub fn he_badge_set_label(self_: *mut HeBadge, value: *const c_char);

    //=========================================================================
    // HeBanner
    //=========================================================================
    pub fn he_banner_get_type() -> GType;
    pub fn he_banner_add_action_button(self_: *mut HeBanner, widget: *mut gtk::GtkWidget);
    pub fn he_banner_remove_action(self_: *mut HeBanner, widget: *mut gtk::GtkWidget);
    pub fn he_banner_set_banner_style(self_: *mut HeBanner, style: HeBannerStyle);
    pub fn he_banner_new(title: *const c_char, description: *const c_char) -> *mut HeBanner;
    pub fn he_banner_get_title(self_: *mut HeBanner) -> *const c_char;
    pub fn he_banner_set_title(self_: *mut HeBanner, value: *const c_char);
    pub fn he_banner_get_description(self_: *mut HeBanner) -> *const c_char;
    pub fn he_banner_set_description(self_: *mut HeBanner, value: *const c_char);
    pub fn he_banner_get_style(self_: *mut HeBanner) -> HeBannerStyle;
    pub fn he_banner_set_style(self_: *mut HeBanner, value: HeBannerStyle);

    //=========================================================================
    // HeBin
    //=========================================================================
    pub fn he_bin_get_type() -> GType;
    pub fn he_bin_add_child(
        self_: *mut HeBin,
        builder: *mut gtk::GtkBuilder,
        child: *mut gobject::GObject,
        type_: *const c_char,
    );
    pub fn he_bin_new() -> *mut HeBin;
    pub fn he_bin_get_child(self_: *mut HeBin) -> *mut gtk::GtkWidget;
    pub fn he_bin_set_child(self_: *mut HeBin, value: *mut gtk::GtkWidget);

    //=========================================================================
    // HeBottomBar
    //=========================================================================
    pub fn he_bottom_bar_get_type() -> GType;
    pub fn he_bottom_bar_new_with_details(
        title: *const c_char,
        description: *const c_char,
    ) -> *mut HeBottomBar;
    pub fn he_bottom_bar_new() -> *mut HeBottomBar;
    pub fn he_bottom_bar_append_button(
        self_: *mut HeBottomBar,
        icon: *mut HeIconicButton,
        position: HeBottomBarPosition,
    );
    pub fn he_bottom_bar_prepend_button(
        self_: *mut HeBottomBar,
        icon: *mut HeIconicButton,
        position: HeBottomBarPosition,
    );
    pub fn he_bottom_bar_remove_button(
        self_: *mut HeBottomBar,
        icon: *mut HeIconicButton,
        position: HeBottomBarPosition,
    );
    pub fn he_bottom_bar_insert_button_after(
        self_: *mut HeBottomBar,
        icon: *mut HeIconicButton,
        after: *mut HeIconicButton,
        position: HeBottomBarPosition,
    );
    pub fn he_bottom_bar_reorder_button_after(
        self_: *mut HeBottomBar,
        icon: *mut HeIconicButton,
        sibling: *mut HeIconicButton,
        position: HeBottomBarPosition,
    );
    pub fn he_bottom_bar_get_title(self_: *mut HeBottomBar) -> *const c_char;
    pub fn he_bottom_bar_set_title(self_: *mut HeBottomBar, value: *const c_char);
    pub fn he_bottom_bar_get_description(self_: *mut HeBottomBar) -> *const c_char;
    pub fn he_bottom_bar_set_description(self_: *mut HeBottomBar, value: *const c_char);
    pub fn he_bottom_bar_get_menu_model(self_: *mut HeBottomBar) -> *mut gio::GMenuModel;
    pub fn he_bottom_bar_set_menu_model(self_: *mut HeBottomBar, value: *mut gio::GMenuModel);
    pub fn he_bottom_bar_get_collapse_actions(self_: *mut HeBottomBar) -> gboolean;
    pub fn he_bottom_bar_set_collapse_actions(self_: *mut HeBottomBar, value: gboolean);

    //=========================================================================
    // HeButton
    //=========================================================================
    pub fn he_button_get_type() -> GType;
    pub fn he_button_get_color(self_: *mut HeButton) -> HeColors;
    pub fn he_button_set_color(self_: *mut HeButton, value: HeColors);
    pub fn he_button_get_icon(self_: *mut HeButton) -> *mut c_char;
    pub fn he_button_set_icon(self_: *mut HeButton, value: *const c_char);

    //=========================================================================
    // HeButtonContent
    //=========================================================================
    pub fn he_button_content_get_type() -> GType;
    pub fn he_button_content_new() -> *mut HeButtonContent;
    pub fn he_button_content_get_icon(self_: *mut HeButtonContent) -> *mut c_char;
    pub fn he_button_content_set_icon(self_: *mut HeButtonContent, value: *const c_char);
    pub fn he_button_content_get_label(self_: *mut HeButtonContent) -> *mut c_char;
    pub fn he_button_content_set_label(self_: *mut HeButtonContent, value: *const c_char);

    //=========================================================================
    // HeChip
    //=========================================================================
    pub fn he_chip_get_type() -> GType;
    pub fn he_chip_new(label: *const c_char) -> *mut HeChip;

    //=========================================================================
    // HeContentBlock
    //=========================================================================
    pub fn he_content_block_get_type() -> GType;
    pub fn he_content_block_new(
        title: *const c_char,
        subtitle: *const c_char,
        icon: *const c_char,
        primary_button: *mut HeButton,
        secondary_button: *mut HeButton,
    ) -> *mut HeContentBlock;
    pub fn he_content_block_get_title(self_: *mut HeContentBlock) -> *const c_char;
    pub fn he_content_block_set_title(self_: *mut HeContentBlock, value: *const c_char);
    pub fn he_content_block_get_subtitle(self_: *mut HeContentBlock) -> *const c_char;
    pub fn he_content_block_set_subtitle(self_: *mut HeContentBlock, value: *const c_char);
    pub fn he_content_block_get_icon(self_: *mut HeContentBlock) -> *const c_char;
    pub fn he_content_block_set_icon(self_: *mut HeContentBlock, value: *const c_char);
    pub fn he_content_block_set_gicon(self_: *mut HeContentBlock, value: *mut gio::GIcon);
    pub fn he_content_block_get_secondary_button(self_: *mut HeContentBlock) -> *mut HeButton;
    pub fn he_content_block_set_secondary_button(self_: *mut HeContentBlock, value: *mut HeButton);
    pub fn he_content_block_get_primary_button(self_: *mut HeContentBlock) -> *mut HeButton;
    pub fn he_content_block_set_primary_button(self_: *mut HeContentBlock, value: *mut HeButton);

    //=========================================================================
    // HeContentBlockImage
    //=========================================================================
    pub fn he_content_block_image_get_type() -> GType;
    pub fn he_content_block_image_new(file: *const c_char) -> *mut HeContentBlockImage;
    pub fn he_content_block_image_get_file(self_: *mut HeContentBlockImage) -> *const c_char;
    pub fn he_content_block_image_set_file(self_: *mut HeContentBlockImage, value: *const c_char);
    pub fn he_content_block_image_get_requested_height(self_: *mut HeContentBlockImage) -> c_int;
    pub fn he_content_block_image_set_requested_height(
        self_: *mut HeContentBlockImage,
        value: c_int,
    );
    pub fn he_content_block_image_get_requested_width(self_: *mut HeContentBlockImage) -> c_int;
    pub fn he_content_block_image_set_requested_width(
        self_: *mut HeContentBlockImage,
        value: c_int,
    );

    //=========================================================================
    // HeContentBlockImageCluster
    //=========================================================================
    pub fn he_content_block_image_cluster_get_type() -> GType;
    pub fn he_content_block_image_cluster_set_image(
        self_: *mut HeContentBlockImageCluster,
        image: *mut HeContentBlockImage,
        position: HeContentBlockImageClusterImagePosition,
    );
    pub fn he_content_block_image_cluster_remove_image(
        self_: *mut HeContentBlockImageCluster,
        image: *mut HeContentBlockImage,
    );
    pub fn he_content_block_image_cluster_new(
        title: *const c_char,
        subtitle: *const c_char,
        icon: *const c_char,
    ) -> *mut HeContentBlockImageCluster;
    pub fn he_content_block_image_cluster_get_title(
        self_: *mut HeContentBlockImageCluster,
    ) -> *const c_char;
    pub fn he_content_block_image_cluster_set_title(
        self_: *mut HeContentBlockImageCluster,
        value: *const c_char,
    );
    pub fn he_content_block_image_cluster_get_subtitle(
        self_: *mut HeContentBlockImageCluster,
    ) -> *const c_char;
    pub fn he_content_block_image_cluster_set_subtitle(
        self_: *mut HeContentBlockImageCluster,
        value: *const c_char,
    );
    pub fn he_content_block_image_cluster_get_icon(
        self_: *mut HeContentBlockImageCluster,
    ) -> *const c_char;
    pub fn he_content_block_image_cluster_set_icon(
        self_: *mut HeContentBlockImageCluster,
        value: *const c_char,
    );

    //=========================================================================
    // HeContentList
    //=========================================================================
    pub fn he_content_list_get_type() -> GType;
    pub fn he_content_list_add(self_: *mut HeContentList, child: *mut gtk::GtkWidget);
    pub fn he_content_list_remove(self_: *mut HeContentList, child: *mut gtk::GtkWidget);
    pub fn he_content_list_new() -> *mut HeContentList;
    pub fn he_content_list_get_title(self_: *mut HeContentList) -> *const c_char;
    pub fn he_content_list_set_title(self_: *mut HeContentList, value: *const c_char);
    pub fn he_content_list_get_description(self_: *mut HeContentList) -> *const c_char;
    pub fn he_content_list_set_description(self_: *mut HeContentList, value: *const c_char);

    //=========================================================================
    // HeDesktop
    //=========================================================================
    pub fn he_desktop_get_type() -> GType;
    pub fn he_desktop_new() -> *mut HeDesktop;
    pub fn he_desktop_get_prefers_color_scheme(self_: *mut HeDesktop) -> HeDesktopColorScheme;
    pub fn he_desktop_get_dark_mode_strength(self_: *mut HeDesktop) -> HeDesktopDarkModeStrength;
    pub fn he_desktop_get_accent_color(self_: *mut HeDesktop) -> *mut HeColorRGBColor;

    //=========================================================================
    // HeDialog
    //=========================================================================
    pub fn he_dialog_get_type() -> GType;
    pub fn he_dialog_add(self_: *mut HeDialog, widget: *mut gtk::GtkWidget);
    pub fn he_dialog_new(
        modal: gboolean,
        parent: *mut gtk::GtkWindow,
        title: *const c_char,
        subtitle: *const c_char,
        info: *const c_char,
        icon: *const c_char,
        primary_button: *mut HeFillButton,
        secondary_button: *mut HeTintButton,
    ) -> *mut HeDialog;
    pub fn he_dialog_get_title(self_: *mut HeDialog) -> *const c_char;
    pub fn he_dialog_set_title(self_: *mut HeDialog, value: *const c_char);
    pub fn he_dialog_get_subtitle(self_: *mut HeDialog) -> *const c_char;
    pub fn he_dialog_set_subtitle(self_: *mut HeDialog, value: *const c_char);
    pub fn he_dialog_get_info(self_: *mut HeDialog) -> *const c_char;
    pub fn he_dialog_set_info(self_: *mut HeDialog, value: *const c_char);
    pub fn he_dialog_get_icon(self_: *mut HeDialog) -> *const c_char;
    pub fn he_dialog_set_icon(self_: *mut HeDialog, value: *const c_char);
    pub fn he_dialog_get_secondary_button(self_: *mut HeDialog) -> *mut HeTintButton;
    pub fn he_dialog_set_secondary_button(self_: *mut HeDialog, value: *mut HeTintButton);
    pub fn he_dialog_get_primary_button(self_: *mut HeDialog) -> *mut HeFillButton;
    pub fn he_dialog_set_primary_button(self_: *mut HeDialog, value: *mut HeFillButton);

    //=========================================================================
    // HeDisclosureButton
    //=========================================================================
    pub fn he_disclosure_button_get_type() -> GType;
    pub fn he_disclosure_button_new(icon: *const c_char) -> *mut HeDisclosureButton;
    pub fn he_disclosure_button_new_from_icon(icon: *const c_char) -> *mut HeDisclosureButton;
    pub fn he_disclosure_button_get_icon(self_: *mut HeDisclosureButton) -> *const c_char;
    pub fn he_disclosure_button_set_icon(self_: *mut HeDisclosureButton, value: *const c_char);

    //=========================================================================
    // HeEmptyPage
    //=========================================================================
    pub fn he_empty_page_get_type() -> GType;
    pub fn he_empty_page_new() -> *mut HeEmptyPage;
    pub fn he_empty_page_get_title(self_: *mut HeEmptyPage) -> *const c_char;
    pub fn he_empty_page_set_title(self_: *mut HeEmptyPage, value: *const c_char);
    pub fn he_empty_page_get_description(self_: *mut HeEmptyPage) -> *const c_char;
    pub fn he_empty_page_set_description(self_: *mut HeEmptyPage, value: *const c_char);
    pub fn he_empty_page_get_icon(self_: *mut HeEmptyPage) -> *const c_char;
    pub fn he_empty_page_set_icon(self_: *mut HeEmptyPage, value: *const c_char);
    pub fn he_empty_page_get_button(self_: *mut HeEmptyPage) -> *const c_char;
    pub fn he_empty_page_set_button(self_: *mut HeEmptyPage, value: *const c_char);

    //=========================================================================
    // HeFillButton
    //=========================================================================
    pub fn he_fill_button_get_type() -> GType;
    pub fn he_fill_button_new(label: *const c_char) -> *mut HeFillButton;

    //=========================================================================
    // HeIconicButton
    //=========================================================================
    pub fn he_iconic_button_get_type() -> GType;
    pub fn he_iconic_button_new(icon: *const c_char) -> *mut HeIconicButton;
    pub fn he_iconic_button_get_icon(self_: *mut HeIconicButton) -> *const c_char;
    pub fn he_iconic_button_set_icon(self_: *mut HeIconicButton, value: *const c_char);
    pub fn he_iconic_button_get_tooltip(self_: *mut HeIconicButton) -> *const c_char;
    pub fn he_iconic_button_set_tooltip(self_: *mut HeIconicButton, value: *const c_char);

    //=========================================================================
    // HeMiniContentBlock
    //=========================================================================
    pub fn he_mini_content_block_get_type() -> GType;
    pub fn he_mini_content_block_new_with_details(
        title: *const c_char,
        subtitle: *const c_char,
        primary_button: *mut HeButton,
    ) -> *mut HeMiniContentBlock;
    pub fn he_mini_content_block_new() -> *mut HeMiniContentBlock;
    pub fn he_mini_content_block_get_title(self_: *mut HeMiniContentBlock) -> *const c_char;
    pub fn he_mini_content_block_set_title(self_: *mut HeMiniContentBlock, value: *const c_char);
    pub fn he_mini_content_block_get_subtitle(self_: *mut HeMiniContentBlock) -> *const c_char;
    pub fn he_mini_content_block_set_subtitle(self_: *mut HeMiniContentBlock, value: *const c_char);
    pub fn he_mini_content_block_get_icon(self_: *mut HeMiniContentBlock) -> *const c_char;
    pub fn he_mini_content_block_set_icon(self_: *mut HeMiniContentBlock, value: *const c_char);
    pub fn he_mini_content_block_set_gicon(self_: *mut HeMiniContentBlock, value: *mut gio::GIcon);
    pub fn he_mini_content_block_set_paintable(
        self_: *mut HeMiniContentBlock,
        value: *mut gdk::GdkPaintable,
    );
    pub fn he_mini_content_block_get_primary_button(
        self_: *mut HeMiniContentBlock,
    ) -> *mut HeButton;
    pub fn he_mini_content_block_set_primary_button(
        self_: *mut HeMiniContentBlock,
        value: *mut HeButton,
    );

    //=========================================================================
    // HeModifierBadge
    //=========================================================================
    pub fn he_modifier_badge_get_type() -> GType;
    pub fn he_modifier_badge_new(label: *const c_char) -> *mut HeModifierBadge;
    pub fn he_modifier_badge_get_color(self_: *mut HeModifierBadge) -> HeColors;
    pub fn he_modifier_badge_set_color(self_: *mut HeModifierBadge, value: HeColors);
    pub fn he_modifier_badge_get_tinted(self_: *mut HeModifierBadge) -> gboolean;
    pub fn he_modifier_badge_set_tinted(self_: *mut HeModifierBadge, value: gboolean);
    pub fn he_modifier_badge_get_label(self_: *mut HeModifierBadge) -> *const c_char;
    pub fn he_modifier_badge_set_label(self_: *mut HeModifierBadge, value: *const c_char);
    pub fn he_modifier_badge_get_alignment(self_: *mut HeModifierBadge)
        -> HeModifierBadgeAlignment;
    pub fn he_modifier_badge_set_alignment(
        self_: *mut HeModifierBadge,
        value: HeModifierBadgeAlignment,
    );

    //=========================================================================
    // HeNavigationRail
    //=========================================================================
    pub fn he_navigation_rail_get_type() -> GType;
    pub fn he_navigation_rail_new() -> *mut HeNavigationRail;
    pub fn he_navigation_rail_get_stack(self_: *mut HeNavigationRail) -> *mut gtk::GtkStack;
    pub fn he_navigation_rail_set_stack(self_: *mut HeNavigationRail, value: *mut gtk::GtkStack);
    pub fn he_navigation_rail_get_orientation(self_: *mut HeNavigationRail) -> gtk::GtkOrientation;
    pub fn he_navigation_rail_set_orientation(
        self_: *mut HeNavigationRail,
        value: gtk::GtkOrientation,
    );

    //=========================================================================
    // HeOutlineButton
    //=========================================================================
    pub fn he_outline_button_get_type() -> GType;
    pub fn he_outline_button_new(label: *const c_char) -> *mut HeOutlineButton;

    //=========================================================================
    // HeOverlayButton
    //=========================================================================
    pub fn he_overlay_button_get_type() -> GType;
    pub fn he_overlay_button_new(
        icon: *const c_char,
        label: *const c_char,
        secondary_icon: *const c_char,
    ) -> *mut HeOverlayButton;
    pub fn he_overlay_button_get_size(self_: *mut HeOverlayButton) -> HeOverlayButtonSize;
    pub fn he_overlay_button_set_size(self_: *mut HeOverlayButton, value: HeOverlayButtonSize);
    pub fn he_overlay_button_get_color(self_: *mut HeOverlayButton) -> HeColors;
    pub fn he_overlay_button_set_color(self_: *mut HeOverlayButton, value: HeColors);
    pub fn he_overlay_button_get_secondary_color(self_: *mut HeOverlayButton) -> HeColors;
    pub fn he_overlay_button_set_secondary_color(self_: *mut HeOverlayButton, value: HeColors);
    pub fn he_overlay_button_get_secondary_icon(self_: *mut HeOverlayButton) -> *mut c_char;
    pub fn he_overlay_button_set_secondary_icon(self_: *mut HeOverlayButton, value: *const c_char);
    pub fn he_overlay_button_get_icon(self_: *mut HeOverlayButton) -> *mut c_char;
    pub fn he_overlay_button_set_icon(self_: *mut HeOverlayButton, value: *const c_char);
    pub fn he_overlay_button_get_label(self_: *mut HeOverlayButton) -> *const c_char;
    pub fn he_overlay_button_set_label(self_: *mut HeOverlayButton, value: *const c_char);
    pub fn he_overlay_button_get_child(self_: *mut HeOverlayButton) -> *mut gtk::GtkWidget;
    pub fn he_overlay_button_set_child(self_: *mut HeOverlayButton, value: *mut gtk::GtkWidget);
    pub fn he_overlay_button_get_alignment(self_: *mut HeOverlayButton)
        -> HeOverlayButtonAlignment;
    pub fn he_overlay_button_set_alignment(
        self_: *mut HeOverlayButton,
        value: HeOverlayButtonAlignment,
    );

    //=========================================================================
    // HePillButton
    //=========================================================================
    pub fn he_pill_button_get_type() -> GType;
    pub fn he_pill_button_new(label: *const c_char) -> *mut HePillButton;

    //=========================================================================
    // HeSegmentedButton
    //=========================================================================
    pub fn he_segmented_button_get_type() -> GType;
    pub fn he_segmented_button_add_child(
        self_: *mut HeSegmentedButton,
        builder: *mut gtk::GtkBuilder,
        child: *mut gobject::GObject,
        type_: *const c_char,
    );
    pub fn he_segmented_button_new() -> *mut HeSegmentedButton;

    //=========================================================================
    // HeSettingsList
    //=========================================================================
    pub fn he_settings_list_get_type() -> GType;
    pub fn he_settings_list_add(self_: *mut HeSettingsList, child: *mut gtk::GtkWidget);
    pub fn he_settings_list_remove(self_: *mut HeSettingsList, child: *mut gtk::GtkWidget);
    pub fn he_settings_list_new() -> *mut HeSettingsList;
    pub fn he_settings_list_get_title(self_: *mut HeSettingsList) -> *const c_char;
    pub fn he_settings_list_set_title(self_: *mut HeSettingsList, value: *const c_char);
    pub fn he_settings_list_get_description(self_: *mut HeSettingsList) -> *const c_char;
    pub fn he_settings_list_set_description(self_: *mut HeSettingsList, value: *const c_char);

    //=========================================================================
    // HeSettingsPage
    //=========================================================================
    pub fn he_settings_page_get_type() -> GType;
    pub fn he_settings_page_add_list(self_: *mut HeSettingsPage, list: *mut HeSettingsList);
    pub fn he_settings_page_new(title: *const c_char) -> *mut HeSettingsPage;
    pub fn he_settings_page_get_title(self_: *mut HeSettingsPage) -> *const c_char;
    pub fn he_settings_page_set_title(self_: *mut HeSettingsPage, value: *const c_char);

    //=========================================================================
    // HeSettingsRow
    //=========================================================================
    pub fn he_settings_row_get_type() -> GType;
    pub fn he_settings_row_new_with_details(
        title: *const c_char,
        subtitle: *const c_char,
        primary_button: *mut HeButton,
    ) -> *mut HeSettingsRow;
    pub fn he_settings_row_new() -> *mut HeSettingsRow;
    pub fn he_settings_row_get_title(self_: *mut HeSettingsRow) -> *const c_char;
    pub fn he_settings_row_set_title(self_: *mut HeSettingsRow, value: *const c_char);
    pub fn he_settings_row_get_subtitle(self_: *mut HeSettingsRow) -> *const c_char;
    pub fn he_settings_row_set_subtitle(self_: *mut HeSettingsRow, value: *const c_char);
    pub fn he_settings_row_get_icon(self_: *mut HeSettingsRow) -> *const c_char;
    pub fn he_settings_row_set_icon(self_: *mut HeSettingsRow, value: *const c_char);
    pub fn he_settings_row_set_gicon(self_: *mut HeSettingsRow, value: *mut gio::GIcon);
    pub fn he_settings_row_set_paintable(self_: *mut HeSettingsRow, value: *mut gdk::GdkPaintable);
    pub fn he_settings_row_get_primary_button(self_: *mut HeSettingsRow) -> *mut HeButton;
    pub fn he_settings_row_set_primary_button(self_: *mut HeSettingsRow, value: *mut HeButton);
    pub fn he_settings_row_get_activatable_widget(self_: *mut HeSettingsRow)
        -> *mut gtk::GtkWidget;
    pub fn he_settings_row_set_activatable_widget(
        self_: *mut HeSettingsRow,
        value: *mut gtk::GtkWidget,
    );

    //=========================================================================
    // HeSettingsWindow
    //=========================================================================
    pub fn he_settings_window_get_type() -> GType;
    pub fn he_settings_window_add_page(self_: *mut HeSettingsWindow, page: *mut HeSettingsPage);
    pub fn he_settings_window_add_list(self_: *mut HeSettingsWindow, list: *mut HeSettingsList);
    pub fn he_settings_window_new(parent: *mut gtk::GtkWindow) -> *mut HeSettingsWindow;

    //=========================================================================
    // HeSideBar
    //=========================================================================
    pub fn he_side_bar_get_type() -> GType;
    pub fn he_side_bar_new(title: *const c_char, subtitle: *const c_char) -> *mut HeSideBar;
    pub fn he_side_bar_get_title(self_: *mut HeSideBar) -> *const c_char;
    pub fn he_side_bar_set_title(self_: *mut HeSideBar, value: *const c_char);
    pub fn he_side_bar_get_titlewidget(self_: *mut HeSideBar) -> *mut gtk::GtkWidget;
    pub fn he_side_bar_set_titlewidget(self_: *mut HeSideBar, value: *mut gtk::GtkWidget);
    pub fn he_side_bar_get_subtitle(self_: *mut HeSideBar) -> *const c_char;
    pub fn he_side_bar_set_subtitle(self_: *mut HeSideBar, value: *const c_char);
    pub fn he_side_bar_get_show_buttons(self_: *mut HeSideBar) -> gboolean;
    pub fn he_side_bar_set_show_buttons(self_: *mut HeSideBar, value: gboolean);
    pub fn he_side_bar_get_show_back(self_: *mut HeSideBar) -> gboolean;
    pub fn he_side_bar_set_show_back(self_: *mut HeSideBar, value: gboolean);
    pub fn he_side_bar_get_stack(self_: *mut HeSideBar) -> *mut gtk::GtkStack;
    pub fn he_side_bar_set_stack(self_: *mut HeSideBar, value: *mut gtk::GtkStack);
    pub fn he_side_bar_get_scroller(self_: *mut HeSideBar) -> *mut gtk::GtkScrolledWindow;
    pub fn he_side_bar_set_scroller(self_: *mut HeSideBar, value: *mut gtk::GtkScrolledWindow);
    pub fn he_side_bar_get_has_margins(self_: *mut HeSideBar) -> gboolean;
    pub fn he_side_bar_set_has_margins(self_: *mut HeSideBar, value: gboolean);

    //=========================================================================
    // HeTab
    //=========================================================================
    pub fn he_tab_get_type() -> GType;
    pub fn he_tab_new(label: *const c_char, page: *mut gtk::GtkWidget) -> *mut HeTab;
    pub fn he_tab_get_label(self_: *mut HeTab) -> *const c_char;
    pub fn he_tab_set_label(self_: *mut HeTab, value: *const c_char);
    pub fn he_tab_set_tooltip(self_: *mut HeTab, value: *const c_char);
    pub fn he_tab_get_pinned(self_: *mut HeTab) -> gboolean;
    pub fn he_tab_set_pinned(self_: *mut HeTab, value: gboolean);
    pub fn he_tab_get_can_pin(self_: *mut HeTab) -> gboolean;
    pub fn he_tab_set_can_pin(self_: *mut HeTab, value: gboolean);
    pub fn he_tab_get_can_close(self_: *mut HeTab) -> gboolean;
    pub fn he_tab_set_can_close(self_: *mut HeTab, value: gboolean);
    pub fn he_tab_get_page(self_: *mut HeTab) -> *mut gtk::GtkWidget;
    pub fn he_tab_set_page(self_: *mut HeTab, value: *mut gtk::GtkWidget);
    pub fn he_tab_get_menu(self_: *mut HeTab) -> *mut gio::GMenu;
    pub fn he_tab_get_actions(self_: *mut HeTab) -> *mut gio::GSimpleActionGroup;

    //=========================================================================
    // HeTabPage
    //=========================================================================
    pub fn he_tab_page_get_type() -> GType;
    pub fn he_tab_page_new(tab: *mut HeTab) -> *mut HeTabPage;
    pub fn he_tab_page_get_tab(self_: *mut HeTabPage) -> *mut HeTab;
    pub fn he_tab_page_set_tab(self_: *mut HeTabPage, value: *mut HeTab);

    //=========================================================================
    // HeTabSwitcher
    //=========================================================================
    pub fn he_tab_switcher_get_type() -> GType;
    pub fn he_tab_switcher_get_tab_position(self_: *mut HeTabSwitcher, tab: *mut HeTab) -> c_int;
    pub fn he_tab_switcher_insert_tab(
        self_: *mut HeTabSwitcher,
        tab: *mut HeTab,
        index: c_int,
    ) -> c_uint;
    pub fn he_tab_switcher_remove_tab(self_: *mut HeTabSwitcher, tab: *mut HeTab);
    pub fn he_tab_switcher_new() -> *mut HeTabSwitcher;
    pub fn he_tab_switcher_get_n_tabs(self_: *mut HeTabSwitcher) -> c_int;
    pub fn he_tab_switcher_get_tabs(self_: *mut HeTabSwitcher) -> *mut glib::GList;
    pub fn he_tab_switcher_get_tab_bar_behavior(
        self_: *mut HeTabSwitcher,
    ) -> HeTabSwitcherTabBarBehavior;
    pub fn he_tab_switcher_set_tab_bar_behavior(
        self_: *mut HeTabSwitcher,
        value: HeTabSwitcherTabBarBehavior,
    );
    pub fn he_tab_switcher_get_allow_duplicate_tabs(self_: *mut HeTabSwitcher) -> gboolean;
    pub fn he_tab_switcher_set_allow_duplicate_tabs(self_: *mut HeTabSwitcher, value: gboolean);
    pub fn he_tab_switcher_get_allow_drag(self_: *mut HeTabSwitcher) -> gboolean;
    pub fn he_tab_switcher_set_allow_drag(self_: *mut HeTabSwitcher, value: gboolean);
    pub fn he_tab_switcher_get_allow_pinning(self_: *mut HeTabSwitcher) -> gboolean;
    pub fn he_tab_switcher_set_allow_pinning(self_: *mut HeTabSwitcher, value: gboolean);
    pub fn he_tab_switcher_get_allow_closing(self_: *mut HeTabSwitcher) -> gboolean;
    pub fn he_tab_switcher_set_allow_closing(self_: *mut HeTabSwitcher, value: gboolean);
    pub fn he_tab_switcher_get_allow_new_window(self_: *mut HeTabSwitcher) -> gboolean;
    pub fn he_tab_switcher_set_allow_new_window(self_: *mut HeTabSwitcher, value: gboolean);
    pub fn he_tab_switcher_get_current(self_: *mut HeTabSwitcher) -> *mut HeTab;
    pub fn he_tab_switcher_set_current(self_: *mut HeTabSwitcher, value: *mut HeTab);
    pub fn he_tab_switcher_get_menu(self_: *mut HeTabSwitcher) -> *mut gio::GMenu;
    pub fn he_tab_switcher_get_actions(self_: *mut HeTabSwitcher) -> *mut gio::GSimpleActionGroup;

    //=========================================================================
    // HeTextButton
    //=========================================================================
    pub fn he_text_button_get_type() -> GType;
    pub fn he_text_button_new(label: *const c_char) -> *mut HeTextButton;
    pub fn he_text_button_new_from_icon(icon: *const c_char) -> *mut HeTextButton;

    //=========================================================================
    // HeTintButton
    //=========================================================================
    pub fn he_tint_button_get_type() -> GType;
    pub fn he_tint_button_new(label: *const c_char) -> *mut HeTintButton;
    pub fn he_tint_button_new_from_icon(icon: *const c_char) -> *mut HeTintButton;

    //=========================================================================
    // HeToast
    //=========================================================================
    pub fn he_toast_get_type() -> GType;
    pub fn he_toast_new(label: *const c_char) -> *mut HeToast;
    pub fn he_toast_send_notification(self_: *mut HeToast);
    pub fn he_toast_get_label(self_: *mut HeToast) -> *const c_char;
    pub fn he_toast_set_label(self_: *mut HeToast, value: *const c_char);
    pub fn he_toast_get_default_action(self_: *mut HeToast) -> *const c_char;
    pub fn he_toast_set_default_action(self_: *mut HeToast, value: *const c_char);

    //=========================================================================
    // HeView
    //=========================================================================
    pub fn he_view_get_type() -> GType;
    pub fn he_view_add_child(
        self_: *mut HeView,
        builder: *mut gtk::GtkBuilder,
        child: *mut gobject::GObject,
        type_: *const c_char,
    );
    pub fn he_view_add(self_: *mut HeView, widget: *mut gtk::GtkWidget);
    pub fn he_view_get_title(self_: *mut HeView) -> *const c_char;
    pub fn he_view_set_title(self_: *mut HeView, value: *const c_char);
    pub fn he_view_get_stack(self_: *mut HeView) -> *mut gtk::GtkStack;
    pub fn he_view_set_stack(self_: *mut HeView, value: *mut gtk::GtkStack);
    pub fn he_view_get_subtitle(self_: *mut HeView) -> *const c_char;
    pub fn he_view_set_subtitle(self_: *mut HeView, value: *const c_char);
    pub fn he_view_get_has_margins(self_: *mut HeView) -> gboolean;
    pub fn he_view_set_has_margins(self_: *mut HeView, value: gboolean);

    //=========================================================================
    // HeViewAux
    //=========================================================================
    pub fn he_view_aux_get_type() -> GType;
    pub fn he_view_aux_new() -> *mut HeViewAux;
    pub fn he_view_aux_get_show_aux(self_: *mut HeViewAux) -> gboolean;
    pub fn he_view_aux_set_show_aux(self_: *mut HeViewAux, value: gboolean);

    //=========================================================================
    // HeViewChooser
    //=========================================================================
    pub fn he_view_chooser_get_type() -> GType;
    pub fn he_view_chooser_new() -> *mut HeViewChooser;
    pub fn he_view_chooser_get_stack(self_: *mut HeViewChooser) -> *mut gtk::GtkStack;
    pub fn he_view_chooser_set_stack(self_: *mut HeViewChooser, value: *mut gtk::GtkStack);

    //=========================================================================
    // HeViewDual
    //=========================================================================
    pub fn he_view_dual_get_type() -> GType;
    pub fn he_view_dual_new() -> *mut HeViewDual;

    //=========================================================================
    // HeViewMono
    //=========================================================================
    pub fn he_view_mono_get_type() -> GType;
    pub fn he_view_mono_new() -> *mut HeViewMono;

    //=========================================================================
    // HeViewSubTitle
    //=========================================================================
    pub fn he_view_sub_title_get_type() -> GType;
    pub fn he_view_sub_title_new() -> *mut HeViewSubTitle;
    pub fn he_view_sub_title_get_label(self_: *mut HeViewSubTitle) -> *const c_char;
    pub fn he_view_sub_title_set_label(self_: *mut HeViewSubTitle, value: *const c_char);

    //=========================================================================
    // HeViewSwitcher
    //=========================================================================
    pub fn he_view_switcher_get_type() -> GType;
    pub fn he_view_switcher_new() -> *mut HeViewSwitcher;
    pub fn he_view_switcher_get_stack(self_: *mut HeViewSwitcher) -> *mut gtk::GtkStack;
    pub fn he_view_switcher_set_stack(self_: *mut HeViewSwitcher, value: *mut gtk::GtkStack);

    //=========================================================================
    // HeViewTitle
    //=========================================================================
    pub fn he_view_title_get_type() -> GType;
    pub fn he_view_title_new() -> *mut HeViewTitle;
    pub fn he_view_title_get_label(self_: *mut HeViewTitle) -> *const c_char;
    pub fn he_view_title_set_label(self_: *mut HeViewTitle, value: *const c_char);

    //=========================================================================
    // HeWelcomeScreen
    //=========================================================================
    pub fn he_welcome_screen_get_type() -> GType;
    pub fn he_welcome_screen_add_child(
        self_: *mut HeWelcomeScreen,
        builder: *mut gtk::GtkBuilder,
        child: *mut gobject::GObject,
        type_: *const c_char,
    );
    pub fn he_welcome_screen_new(
        appname: *const c_char,
        description: *const c_char,
    ) -> *mut HeWelcomeScreen;
    pub fn he_welcome_screen_get_appname(self_: *mut HeWelcomeScreen) -> *const c_char;
    pub fn he_welcome_screen_set_appname(self_: *mut HeWelcomeScreen, value: *const c_char);
    pub fn he_welcome_screen_get_description(self_: *mut HeWelcomeScreen) -> *const c_char;
    pub fn he_welcome_screen_set_description(self_: *mut HeWelcomeScreen, value: *const c_char);

    //=========================================================================
    // HeWindow
    //=========================================================================
    pub fn he_window_get_type() -> GType;
    pub fn he_window_new() -> *mut HeWindow;
    pub fn he_window_get_parent(self_: *mut HeWindow) -> *mut gtk::GtkWindow;
    pub fn he_window_set_parent(self_: *mut HeWindow, value: *mut gtk::GtkWindow);
    pub fn he_window_get_modal(self_: *mut HeWindow) -> gboolean;
    pub fn he_window_set_modal(self_: *mut HeWindow, value: gboolean);
    pub fn he_window_get_has_title(self_: *mut HeWindow) -> gboolean;
    pub fn he_window_set_has_title(self_: *mut HeWindow, value: gboolean);
    pub fn he_window_get_has_back_button(self_: *mut HeWindow) -> gboolean;
    pub fn he_window_set_has_back_button(self_: *mut HeWindow, value: gboolean);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn he_color_rgb_value_to_xyz(v: c_double) -> c_double;
    pub fn he_color_xyz_value_to_lab(v: c_double) -> c_double;
    pub fn he_color_rgb_to_xyz(color: HeColorRGBColor, result: *mut HeColorXYZColor);
    pub fn he_color_rgb_to_lab(color: HeColorRGBColor, result: *mut HeColorLABColor);
    pub fn he_color_rgb_to_lch(color: HeColorRGBColor, result: *mut HeColorLCHColor);
    pub fn he_color_lch_to_lab(color: HeColorLCHColor, result: *mut HeColorLABColor);
    pub fn he_color_lab_to_rgb(color: HeColorLABColor, result: *mut HeColorRGBColor);
    pub fn he_color_lab_to_xyz(color: HeColorLABColor, result: *mut HeColorXYZColor);
    pub fn he_color_contrast_ratio(luma1: c_double, luma2: c_double) -> c_double;
    pub fn he_color_contrast_ratio_for_lch(
        color1: HeColorLCHColor,
        color2: HeColorLCHColor,
    ) -> c_double;
    pub fn he_color_derive_contasting_color(
        color: HeColorLCHColor,
        contrast: *mut c_double,
        lighten: *mut gboolean,
        result: *mut HeColorLCHColor,
    );
    pub fn he_color_to_gdk_rgba(color: HeColorRGBColor, result: *mut gdk::GdkRGBA);
    pub fn he_color_from_gdk_rgba(color: gdk::GdkRGBA, result: *mut HeColorRGBColor);
    pub fn he_misc_find_ancestor_of_type(
        t_type: GType,
        t_dup_func: gobject::GBoxedCopyFunc,
        t_destroy_func: glib::GDestroyNotify,
        widget: *mut gtk::GtkWidget,
    ) -> gpointer;
    pub fn he_misc_contrast_ratio(
        red: c_double,
        green: c_double,
        blue: c_double,
        red2: c_double,
        green2: c_double,
        blue2: c_double,
    ) -> c_double;
    pub fn he_misc_fix_fg_contrast(
        red: c_double,
        green: c_double,
        blue: c_double,
        red2: c_double,
        green2: c_double,
        blue2: c_double,
        result_length1: *mut c_int,
    ) -> *mut c_double;
    pub fn he_colors_to_css_class(self_: HeColors) -> *mut c_char;
    pub fn he_colors_to_string(self_: HeColors) -> *mut c_char;
    pub fn he_about_window_licenses_get_url(self_: HeAboutWindowLicenses) -> *mut c_char;
    pub fn he_about_window_licenses_get_name(self_: HeAboutWindowLicenses) -> *mut c_char;
    pub fn he_content_block_image_cluster_image_position_get_column(
        self_: HeContentBlockImageClusterImagePosition,
    ) -> c_int;
    pub fn he_content_block_image_cluster_image_position_get_row(
        self_: HeContentBlockImageClusterImagePosition,
    ) -> c_int;
    pub fn he_modifier_badge_alignment_to_gtk_align(
        self_: HeModifierBadgeAlignment,
    ) -> gtk::GtkAlign;
    pub fn he_modifier_badge_alignment_from_gtk_align(
        align: gtk::GtkAlign,
    ) -> HeModifierBadgeAlignment;
    pub fn he_overlay_button_size_to_css_class(self_: HeOverlayButtonSize) -> *mut c_char;
    pub fn he_overlay_button_alignment_to_gtk_align(
        self_: HeOverlayButtonAlignment,
    ) -> gtk::GtkAlign;
    pub fn he_overlay_button_alignment_from_gtk_align(
        align: gtk::GtkAlign,
    ) -> HeOverlayButtonAlignment;

}
