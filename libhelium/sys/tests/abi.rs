// Generated by gir (https://github.com/gtk-rs/gir @ 2d5d67805483)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 040da0b3a013)
// DO NOT EDIT

#![cfg(target_os = "linux")]

use libhelium_sys::*;
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::mem::{align_of, size_of};
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["libhelium-1"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG").unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {cmd:?} returned {}", out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!("Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",);
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {abi_cmd:?} failed, {output:?}").into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    (
        "HeAboutWindow",
        Layout {
            size: size_of::<HeAboutWindow>(),
            alignment: align_of::<HeAboutWindow>(),
        },
    ),
    (
        "HeAboutWindowClass",
        Layout {
            size: size_of::<HeAboutWindowClass>(),
            alignment: align_of::<HeAboutWindowClass>(),
        },
    ),
    (
        "HeAboutWindowLicenses",
        Layout {
            size: size_of::<HeAboutWindowLicenses>(),
            alignment: align_of::<HeAboutWindowLicenses>(),
        },
    ),
    (
        "HeAppBar",
        Layout {
            size: size_of::<HeAppBar>(),
            alignment: align_of::<HeAppBar>(),
        },
    ),
    (
        "HeAppBarClass",
        Layout {
            size: size_of::<HeAppBarClass>(),
            alignment: align_of::<HeAppBarClass>(),
        },
    ),
    (
        "HeApplication",
        Layout {
            size: size_of::<HeApplication>(),
            alignment: align_of::<HeApplication>(),
        },
    ),
    (
        "HeApplicationClass",
        Layout {
            size: size_of::<HeApplicationClass>(),
            alignment: align_of::<HeApplicationClass>(),
        },
    ),
    (
        "HeApplicationWindow",
        Layout {
            size: size_of::<HeApplicationWindow>(),
            alignment: align_of::<HeApplicationWindow>(),
        },
    ),
    (
        "HeApplicationWindowClass",
        Layout {
            size: size_of::<HeApplicationWindowClass>(),
            alignment: align_of::<HeApplicationWindowClass>(),
        },
    ),
    (
        "HeAvatar",
        Layout {
            size: size_of::<HeAvatar>(),
            alignment: align_of::<HeAvatar>(),
        },
    ),
    (
        "HeAvatarClass",
        Layout {
            size: size_of::<HeAvatarClass>(),
            alignment: align_of::<HeAvatarClass>(),
        },
    ),
    (
        "HeBadge",
        Layout {
            size: size_of::<HeBadge>(),
            alignment: align_of::<HeBadge>(),
        },
    ),
    (
        "HeBadgeClass",
        Layout {
            size: size_of::<HeBadgeClass>(),
            alignment: align_of::<HeBadgeClass>(),
        },
    ),
    (
        "HeBanner",
        Layout {
            size: size_of::<HeBanner>(),
            alignment: align_of::<HeBanner>(),
        },
    ),
    (
        "HeBannerClass",
        Layout {
            size: size_of::<HeBannerClass>(),
            alignment: align_of::<HeBannerClass>(),
        },
    ),
    (
        "HeBannerStyle",
        Layout {
            size: size_of::<HeBannerStyle>(),
            alignment: align_of::<HeBannerStyle>(),
        },
    ),
    (
        "HeBin",
        Layout {
            size: size_of::<HeBin>(),
            alignment: align_of::<HeBin>(),
        },
    ),
    (
        "HeBinClass",
        Layout {
            size: size_of::<HeBinClass>(),
            alignment: align_of::<HeBinClass>(),
        },
    ),
    (
        "HeBottomBar",
        Layout {
            size: size_of::<HeBottomBar>(),
            alignment: align_of::<HeBottomBar>(),
        },
    ),
    (
        "HeBottomBarClass",
        Layout {
            size: size_of::<HeBottomBarClass>(),
            alignment: align_of::<HeBottomBarClass>(),
        },
    ),
    (
        "HeBottomBarPosition",
        Layout {
            size: size_of::<HeBottomBarPosition>(),
            alignment: align_of::<HeBottomBarPosition>(),
        },
    ),
    (
        "HeButton",
        Layout {
            size: size_of::<HeButton>(),
            alignment: align_of::<HeButton>(),
        },
    ),
    (
        "HeButtonClass",
        Layout {
            size: size_of::<HeButtonClass>(),
            alignment: align_of::<HeButtonClass>(),
        },
    ),
    (
        "HeButtonContent",
        Layout {
            size: size_of::<HeButtonContent>(),
            alignment: align_of::<HeButtonContent>(),
        },
    ),
    (
        "HeButtonContentClass",
        Layout {
            size: size_of::<HeButtonContentClass>(),
            alignment: align_of::<HeButtonContentClass>(),
        },
    ),
    (
        "HeChip",
        Layout {
            size: size_of::<HeChip>(),
            alignment: align_of::<HeChip>(),
        },
    ),
    (
        "HeChipClass",
        Layout {
            size: size_of::<HeChipClass>(),
            alignment: align_of::<HeChipClass>(),
        },
    ),
    (
        "HeColorLABColor",
        Layout {
            size: size_of::<HeColorLABColor>(),
            alignment: align_of::<HeColorLABColor>(),
        },
    ),
    (
        "HeColorLCHColor",
        Layout {
            size: size_of::<HeColorLCHColor>(),
            alignment: align_of::<HeColorLCHColor>(),
        },
    ),
    (
        "HeColorRGBColor",
        Layout {
            size: size_of::<HeColorRGBColor>(),
            alignment: align_of::<HeColorRGBColor>(),
        },
    ),
    (
        "HeColorXYZColor",
        Layout {
            size: size_of::<HeColorXYZColor>(),
            alignment: align_of::<HeColorXYZColor>(),
        },
    ),
    (
        "HeColors",
        Layout {
            size: size_of::<HeColors>(),
            alignment: align_of::<HeColors>(),
        },
    ),
    (
        "HeContentBlock",
        Layout {
            size: size_of::<HeContentBlock>(),
            alignment: align_of::<HeContentBlock>(),
        },
    ),
    (
        "HeContentBlockClass",
        Layout {
            size: size_of::<HeContentBlockClass>(),
            alignment: align_of::<HeContentBlockClass>(),
        },
    ),
    (
        "HeContentBlockImage",
        Layout {
            size: size_of::<HeContentBlockImage>(),
            alignment: align_of::<HeContentBlockImage>(),
        },
    ),
    (
        "HeContentBlockImageClass",
        Layout {
            size: size_of::<HeContentBlockImageClass>(),
            alignment: align_of::<HeContentBlockImageClass>(),
        },
    ),
    (
        "HeContentBlockImageCluster",
        Layout {
            size: size_of::<HeContentBlockImageCluster>(),
            alignment: align_of::<HeContentBlockImageCluster>(),
        },
    ),
    (
        "HeContentBlockImageClusterClass",
        Layout {
            size: size_of::<HeContentBlockImageClusterClass>(),
            alignment: align_of::<HeContentBlockImageClusterClass>(),
        },
    ),
    (
        "HeContentBlockImageClusterImagePosition",
        Layout {
            size: size_of::<HeContentBlockImageClusterImagePosition>(),
            alignment: align_of::<HeContentBlockImageClusterImagePosition>(),
        },
    ),
    (
        "HeContentList",
        Layout {
            size: size_of::<HeContentList>(),
            alignment: align_of::<HeContentList>(),
        },
    ),
    (
        "HeContentListClass",
        Layout {
            size: size_of::<HeContentListClass>(),
            alignment: align_of::<HeContentListClass>(),
        },
    ),
    (
        "HeDesktop",
        Layout {
            size: size_of::<HeDesktop>(),
            alignment: align_of::<HeDesktop>(),
        },
    ),
    (
        "HeDesktopClass",
        Layout {
            size: size_of::<HeDesktopClass>(),
            alignment: align_of::<HeDesktopClass>(),
        },
    ),
    (
        "HeDesktopColorScheme",
        Layout {
            size: size_of::<HeDesktopColorScheme>(),
            alignment: align_of::<HeDesktopColorScheme>(),
        },
    ),
    (
        "HeDesktopDarkModeStrength",
        Layout {
            size: size_of::<HeDesktopDarkModeStrength>(),
            alignment: align_of::<HeDesktopDarkModeStrength>(),
        },
    ),
    (
        "HeDialog",
        Layout {
            size: size_of::<HeDialog>(),
            alignment: align_of::<HeDialog>(),
        },
    ),
    (
        "HeDialogClass",
        Layout {
            size: size_of::<HeDialogClass>(),
            alignment: align_of::<HeDialogClass>(),
        },
    ),
    (
        "HeDisclosureButton",
        Layout {
            size: size_of::<HeDisclosureButton>(),
            alignment: align_of::<HeDisclosureButton>(),
        },
    ),
    (
        "HeDisclosureButtonClass",
        Layout {
            size: size_of::<HeDisclosureButtonClass>(),
            alignment: align_of::<HeDisclosureButtonClass>(),
        },
    ),
    (
        "HeEmptyPage",
        Layout {
            size: size_of::<HeEmptyPage>(),
            alignment: align_of::<HeEmptyPage>(),
        },
    ),
    (
        "HeEmptyPageClass",
        Layout {
            size: size_of::<HeEmptyPageClass>(),
            alignment: align_of::<HeEmptyPageClass>(),
        },
    ),
    (
        "HeFillButton",
        Layout {
            size: size_of::<HeFillButton>(),
            alignment: align_of::<HeFillButton>(),
        },
    ),
    (
        "HeFillButtonClass",
        Layout {
            size: size_of::<HeFillButtonClass>(),
            alignment: align_of::<HeFillButtonClass>(),
        },
    ),
    (
        "HeIconicButton",
        Layout {
            size: size_of::<HeIconicButton>(),
            alignment: align_of::<HeIconicButton>(),
        },
    ),
    (
        "HeIconicButtonClass",
        Layout {
            size: size_of::<HeIconicButtonClass>(),
            alignment: align_of::<HeIconicButtonClass>(),
        },
    ),
    (
        "HeMiniContentBlock",
        Layout {
            size: size_of::<HeMiniContentBlock>(),
            alignment: align_of::<HeMiniContentBlock>(),
        },
    ),
    (
        "HeMiniContentBlockClass",
        Layout {
            size: size_of::<HeMiniContentBlockClass>(),
            alignment: align_of::<HeMiniContentBlockClass>(),
        },
    ),
    (
        "HeModifierBadge",
        Layout {
            size: size_of::<HeModifierBadge>(),
            alignment: align_of::<HeModifierBadge>(),
        },
    ),
    (
        "HeModifierBadgeAlignment",
        Layout {
            size: size_of::<HeModifierBadgeAlignment>(),
            alignment: align_of::<HeModifierBadgeAlignment>(),
        },
    ),
    (
        "HeModifierBadgeClass",
        Layout {
            size: size_of::<HeModifierBadgeClass>(),
            alignment: align_of::<HeModifierBadgeClass>(),
        },
    ),
    (
        "HeNavigationRail",
        Layout {
            size: size_of::<HeNavigationRail>(),
            alignment: align_of::<HeNavigationRail>(),
        },
    ),
    (
        "HeNavigationRailClass",
        Layout {
            size: size_of::<HeNavigationRailClass>(),
            alignment: align_of::<HeNavigationRailClass>(),
        },
    ),
    (
        "HeOutlineButton",
        Layout {
            size: size_of::<HeOutlineButton>(),
            alignment: align_of::<HeOutlineButton>(),
        },
    ),
    (
        "HeOutlineButtonClass",
        Layout {
            size: size_of::<HeOutlineButtonClass>(),
            alignment: align_of::<HeOutlineButtonClass>(),
        },
    ),
    (
        "HeOverlayButton",
        Layout {
            size: size_of::<HeOverlayButton>(),
            alignment: align_of::<HeOverlayButton>(),
        },
    ),
    (
        "HeOverlayButtonAlignment",
        Layout {
            size: size_of::<HeOverlayButtonAlignment>(),
            alignment: align_of::<HeOverlayButtonAlignment>(),
        },
    ),
    (
        "HeOverlayButtonClass",
        Layout {
            size: size_of::<HeOverlayButtonClass>(),
            alignment: align_of::<HeOverlayButtonClass>(),
        },
    ),
    (
        "HeOverlayButtonSize",
        Layout {
            size: size_of::<HeOverlayButtonSize>(),
            alignment: align_of::<HeOverlayButtonSize>(),
        },
    ),
    (
        "HePillButton",
        Layout {
            size: size_of::<HePillButton>(),
            alignment: align_of::<HePillButton>(),
        },
    ),
    (
        "HePillButtonClass",
        Layout {
            size: size_of::<HePillButtonClass>(),
            alignment: align_of::<HePillButtonClass>(),
        },
    ),
    (
        "HeSegmentedButton",
        Layout {
            size: size_of::<HeSegmentedButton>(),
            alignment: align_of::<HeSegmentedButton>(),
        },
    ),
    (
        "HeSegmentedButtonClass",
        Layout {
            size: size_of::<HeSegmentedButtonClass>(),
            alignment: align_of::<HeSegmentedButtonClass>(),
        },
    ),
    (
        "HeSettingsList",
        Layout {
            size: size_of::<HeSettingsList>(),
            alignment: align_of::<HeSettingsList>(),
        },
    ),
    (
        "HeSettingsListClass",
        Layout {
            size: size_of::<HeSettingsListClass>(),
            alignment: align_of::<HeSettingsListClass>(),
        },
    ),
    (
        "HeSettingsPage",
        Layout {
            size: size_of::<HeSettingsPage>(),
            alignment: align_of::<HeSettingsPage>(),
        },
    ),
    (
        "HeSettingsPageClass",
        Layout {
            size: size_of::<HeSettingsPageClass>(),
            alignment: align_of::<HeSettingsPageClass>(),
        },
    ),
    (
        "HeSettingsRow",
        Layout {
            size: size_of::<HeSettingsRow>(),
            alignment: align_of::<HeSettingsRow>(),
        },
    ),
    (
        "HeSettingsRowClass",
        Layout {
            size: size_of::<HeSettingsRowClass>(),
            alignment: align_of::<HeSettingsRowClass>(),
        },
    ),
    (
        "HeSettingsWindow",
        Layout {
            size: size_of::<HeSettingsWindow>(),
            alignment: align_of::<HeSettingsWindow>(),
        },
    ),
    (
        "HeSettingsWindowClass",
        Layout {
            size: size_of::<HeSettingsWindowClass>(),
            alignment: align_of::<HeSettingsWindowClass>(),
        },
    ),
    (
        "HeSideBar",
        Layout {
            size: size_of::<HeSideBar>(),
            alignment: align_of::<HeSideBar>(),
        },
    ),
    (
        "HeSideBarClass",
        Layout {
            size: size_of::<HeSideBarClass>(),
            alignment: align_of::<HeSideBarClass>(),
        },
    ),
    (
        "HeTab",
        Layout {
            size: size_of::<HeTab>(),
            alignment: align_of::<HeTab>(),
        },
    ),
    (
        "HeTabClass",
        Layout {
            size: size_of::<HeTabClass>(),
            alignment: align_of::<HeTabClass>(),
        },
    ),
    (
        "HeTabPage",
        Layout {
            size: size_of::<HeTabPage>(),
            alignment: align_of::<HeTabPage>(),
        },
    ),
    (
        "HeTabPageClass",
        Layout {
            size: size_of::<HeTabPageClass>(),
            alignment: align_of::<HeTabPageClass>(),
        },
    ),
    (
        "HeTabSwitcher",
        Layout {
            size: size_of::<HeTabSwitcher>(),
            alignment: align_of::<HeTabSwitcher>(),
        },
    ),
    (
        "HeTabSwitcherClass",
        Layout {
            size: size_of::<HeTabSwitcherClass>(),
            alignment: align_of::<HeTabSwitcherClass>(),
        },
    ),
    (
        "HeTabSwitcherTabBarBehavior",
        Layout {
            size: size_of::<HeTabSwitcherTabBarBehavior>(),
            alignment: align_of::<HeTabSwitcherTabBarBehavior>(),
        },
    ),
    (
        "HeTextButton",
        Layout {
            size: size_of::<HeTextButton>(),
            alignment: align_of::<HeTextButton>(),
        },
    ),
    (
        "HeTextButtonClass",
        Layout {
            size: size_of::<HeTextButtonClass>(),
            alignment: align_of::<HeTextButtonClass>(),
        },
    ),
    (
        "HeTintButton",
        Layout {
            size: size_of::<HeTintButton>(),
            alignment: align_of::<HeTintButton>(),
        },
    ),
    (
        "HeTintButtonClass",
        Layout {
            size: size_of::<HeTintButtonClass>(),
            alignment: align_of::<HeTintButtonClass>(),
        },
    ),
    (
        "HeToast",
        Layout {
            size: size_of::<HeToast>(),
            alignment: align_of::<HeToast>(),
        },
    ),
    (
        "HeToastClass",
        Layout {
            size: size_of::<HeToastClass>(),
            alignment: align_of::<HeToastClass>(),
        },
    ),
    (
        "HeView",
        Layout {
            size: size_of::<HeView>(),
            alignment: align_of::<HeView>(),
        },
    ),
    (
        "HeViewAux",
        Layout {
            size: size_of::<HeViewAux>(),
            alignment: align_of::<HeViewAux>(),
        },
    ),
    (
        "HeViewAuxClass",
        Layout {
            size: size_of::<HeViewAuxClass>(),
            alignment: align_of::<HeViewAuxClass>(),
        },
    ),
    (
        "HeViewChooser",
        Layout {
            size: size_of::<HeViewChooser>(),
            alignment: align_of::<HeViewChooser>(),
        },
    ),
    (
        "HeViewChooserClass",
        Layout {
            size: size_of::<HeViewChooserClass>(),
            alignment: align_of::<HeViewChooserClass>(),
        },
    ),
    (
        "HeViewClass",
        Layout {
            size: size_of::<HeViewClass>(),
            alignment: align_of::<HeViewClass>(),
        },
    ),
    (
        "HeViewDual",
        Layout {
            size: size_of::<HeViewDual>(),
            alignment: align_of::<HeViewDual>(),
        },
    ),
    (
        "HeViewDualClass",
        Layout {
            size: size_of::<HeViewDualClass>(),
            alignment: align_of::<HeViewDualClass>(),
        },
    ),
    (
        "HeViewMono",
        Layout {
            size: size_of::<HeViewMono>(),
            alignment: align_of::<HeViewMono>(),
        },
    ),
    (
        "HeViewMonoClass",
        Layout {
            size: size_of::<HeViewMonoClass>(),
            alignment: align_of::<HeViewMonoClass>(),
        },
    ),
    (
        "HeViewSubTitle",
        Layout {
            size: size_of::<HeViewSubTitle>(),
            alignment: align_of::<HeViewSubTitle>(),
        },
    ),
    (
        "HeViewSubTitleClass",
        Layout {
            size: size_of::<HeViewSubTitleClass>(),
            alignment: align_of::<HeViewSubTitleClass>(),
        },
    ),
    (
        "HeViewSwitcher",
        Layout {
            size: size_of::<HeViewSwitcher>(),
            alignment: align_of::<HeViewSwitcher>(),
        },
    ),
    (
        "HeViewSwitcherClass",
        Layout {
            size: size_of::<HeViewSwitcherClass>(),
            alignment: align_of::<HeViewSwitcherClass>(),
        },
    ),
    (
        "HeViewTitle",
        Layout {
            size: size_of::<HeViewTitle>(),
            alignment: align_of::<HeViewTitle>(),
        },
    ),
    (
        "HeViewTitleClass",
        Layout {
            size: size_of::<HeViewTitleClass>(),
            alignment: align_of::<HeViewTitleClass>(),
        },
    ),
    (
        "HeWelcomeScreen",
        Layout {
            size: size_of::<HeWelcomeScreen>(),
            alignment: align_of::<HeWelcomeScreen>(),
        },
    ),
    (
        "HeWelcomeScreenClass",
        Layout {
            size: size_of::<HeWelcomeScreenClass>(),
            alignment: align_of::<HeWelcomeScreenClass>(),
        },
    ),
    (
        "HeWindow",
        Layout {
            size: size_of::<HeWindow>(),
            alignment: align_of::<HeWindow>(),
        },
    ),
    (
        "HeWindowClass",
        Layout {
            size: size_of::<HeWindowClass>(),
            alignment: align_of::<HeWindowClass>(),
        },
    ),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) HE_ABOUT_WINDOW_LICENSES_APACHEv2", "4"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_GPLv3", "0"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_MIT", "1"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_MPLv2", "2"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_PROPRIETARY", "6"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_UNLICENSE", "3"),
    ("(gint) HE_ABOUT_WINDOW_LICENSES_WTFPL", "5"),
    ("(gint) HE_BANNER_STYLE_ERROR", "2"),
    ("(gint) HE_BANNER_STYLE_INFO", "0"),
    ("(gint) HE_BANNER_STYLE_WARNING", "1"),
    ("(gint) HE_BOTTOM_BAR_POSITION_LEFT", "0"),
    ("(gint) HE_BOTTOM_BAR_POSITION_RIGHT", "1"),
    ("(gint) HE_COLORS_BLUE", "5"),
    ("(gint) HE_COLORS_BROWN", "10"),
    ("(gint) HE_COLORS_DARK", "12"),
    ("(gint) HE_COLORS_GREEN", "4"),
    ("(gint) HE_COLORS_INDIGO", "6"),
    ("(gint) HE_COLORS_LIGHT", "11"),
    ("(gint) HE_COLORS_MINT", "9"),
    ("(gint) HE_COLORS_NONE", "0"),
    ("(gint) HE_COLORS_ORANGE", "2"),
    ("(gint) HE_COLORS_PINK", "8"),
    ("(gint) HE_COLORS_PURPLE", "7"),
    ("(gint) HE_COLORS_RED", "1"),
    ("(gint) HE_COLORS_YELLOW", "3"),
    ("HE_COLOR_LAB_CONSTANTS_Kn", "18"),
    ("HE_COLOR_LAB_CONSTANTS_Xn", "0.9570855264"),
    ("HE_COLOR_LAB_CONSTANTS_Yn", "1.0114135331"),
    ("HE_COLOR_LAB_CONSTANTS_Zn", "1.1190554598"),
    ("HE_COLOR_LAB_CONSTANTS_t0", "0.1379310345"),
    ("HE_COLOR_LAB_CONSTANTS_t1", "0.2068965523"),
    ("HE_COLOR_LAB_CONSTANTS_t2", "0.1284185508"),
    ("HE_COLOR_LAB_CONSTANTS_t3", "0.0088564521"),
    (
        "(gint) HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_LEFT",
        "1",
    ),
    (
        "(gint) HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_RIGHT",
        "3",
    ),
    (
        "(gint) HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_LEFT",
        "0",
    ),
    (
        "(gint) HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_RIGHT",
        "2",
    ),
    ("(gint) HE_DESKTOP_COLOR_SCHEME_DARK", "1"),
    ("(gint) HE_DESKTOP_COLOR_SCHEME_LIGHT", "2"),
    ("(gint) HE_DESKTOP_COLOR_SCHEME_NO_PREFERENCE", "0"),
    ("(gint) HE_DESKTOP_DARK_MODE_STRENGTH_HARSH", "1"),
    ("(gint) HE_DESKTOP_DARK_MODE_STRENGTH_MEDIUM", "0"),
    ("(gint) HE_DESKTOP_DARK_MODE_STRENGTH_SOFT", "2"),
    ("(gint) HE_MODIFIER_BADGE_ALIGNMENT_CENTER", "1"),
    ("(gint) HE_MODIFIER_BADGE_ALIGNMENT_LEFT", "0"),
    ("(gint) HE_MODIFIER_BADGE_ALIGNMENT_RIGHT", "2"),
    ("(gint) HE_OVERLAY_BUTTON_ALIGNMENT_CENTER", "1"),
    ("(gint) HE_OVERLAY_BUTTON_ALIGNMENT_LEFT", "0"),
    ("(gint) HE_OVERLAY_BUTTON_ALIGNMENT_RIGHT", "2"),
    ("(gint) HE_OVERLAY_BUTTON_SIZE_LARGE", "2"),
    ("(gint) HE_OVERLAY_BUTTON_SIZE_MEDIUM", "1"),
    ("(gint) HE_OVERLAY_BUTTON_SIZE_SMALL", "0"),
    ("(gint) HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_ALWAYS", "0"),
    ("(gint) HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_NEVER", "2"),
    ("(gint) HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_SINGLE", "1"),
];
