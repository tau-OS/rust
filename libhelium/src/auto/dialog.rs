// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi,FillButton,TintButton,Window};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "HeDialog")]
    pub struct Dialog(Object<ffi::HeDialog, ffi::HeDialogClass>) @extends Window, gtk::Window, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Native, gtk::Root, gtk::ShortcutManager;

    match fn {
        type_ => || ffi::he_dialog_get_type(),
    }
}

impl Dialog {
        pub const NONE: Option<&'static Dialog> = None;
    

    #[doc(alias = "he_dialog_new")]
    pub fn new(modal: bool, parent: Option<&impl IsA<gtk::Window>>, title: &str, subtitle: &str, info: &str, icon: &str, primary_button: Option<&impl IsA<FillButton>>, secondary_button: Option<&impl IsA<TintButton>>) -> Dialog {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_dialog_new(modal.into_glib(), parent.map(|p| p.as_ref()).to_glib_none().0, title.to_glib_none().0, subtitle.to_glib_none().0, info.to_glib_none().0, icon.to_glib_none().0, primary_button.map(|p| p.as_ref()).to_glib_none().0, secondary_button.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Dialog`] objects.
            ///
            /// This method returns an instance of [`DialogBuilder`](crate::builders::DialogBuilder) which can be used to create [`Dialog`] objects.
            pub fn builder() -> DialogBuilder {
                DialogBuilder::new()
            }
        
}

impl Default for Dialog {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Dialog`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DialogBuilder {
            builder: glib::object::ObjectBuilder<'static, Dialog>,
        }

        impl DialogBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn title(self, title: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("title", title.into()), }
                        }

                            pub fn info(self, info: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("info", info.into()), }
                        }

                            pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("icon", icon.into()), }
                        }

                            pub fn secondary_button(self, secondary_button: &impl IsA<TintButton>) -> Self {
                            Self { builder: self.builder.property("secondary-button", secondary_button.clone().upcast()), }
                        }

                            pub fn primary_button(self, primary_button: &impl IsA<FillButton>) -> Self {
                            Self { builder: self.builder.property("primary-button", primary_button.clone().upcast()), }
                        }

                            pub fn parent(self, parent: &impl IsA<gtk::Window>) -> Self {
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

                            pub fn has_title(self, has_title: bool) -> Self {
                            Self { builder: self.builder.property("has-title", has_title), }
                        }

                            pub fn has_back_button(self, has_back_button: bool) -> Self {
                            Self { builder: self.builder.property("has-back-button", has_back_button), }
                        }

                            pub fn application(self, application: &impl IsA<gtk::Application>) -> Self {
                            Self { builder: self.builder.property("application", application.clone().upcast()), }
                        }

                            pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
                            Self { builder: self.builder.property("child", child.clone().upcast()), }
                        }

                            pub fn decorated(self, decorated: bool) -> Self {
                            Self { builder: self.builder.property("decorated", decorated), }
                        }

                            pub fn default_height(self, default_height: i32) -> Self {
                            Self { builder: self.builder.property("default-height", default_height), }
                        }

                            pub fn default_widget(self, default_widget: &impl IsA<gtk::Widget>) -> Self {
                            Self { builder: self.builder.property("default-widget", default_widget.clone().upcast()), }
                        }

                            pub fn default_width(self, default_width: i32) -> Self {
                            Self { builder: self.builder.property("default-width", default_width), }
                        }

                            pub fn deletable(self, deletable: bool) -> Self {
                            Self { builder: self.builder.property("deletable", deletable), }
                        }

                            pub fn destroy_with_parent(self, destroy_with_parent: bool) -> Self {
                            Self { builder: self.builder.property("destroy-with-parent", destroy_with_parent), }
                        }

                            //pub fn display(self, display: /*Ignored*/&gdk::Display) -> Self {
                        //    Self { builder: self.builder.property("display", display), }
                        //}

                            pub fn focus_visible(self, focus_visible: bool) -> Self {
                            Self { builder: self.builder.property("focus-visible", focus_visible), }
                        }

                            pub fn focus_widget(self, focus_widget: &impl IsA<gtk::Widget>) -> Self {
                            Self { builder: self.builder.property("focus-widget", focus_widget.clone().upcast()), }
                        }

                            pub fn fullscreened(self, fullscreened: bool) -> Self {
                            Self { builder: self.builder.property("fullscreened", fullscreened), }
                        }

                            #[cfg(feature = "gtk_v4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_2")))]
    pub fn handle_menubar_accel(self, handle_menubar_accel: bool) -> Self {
                            Self { builder: self.builder.property("handle-menubar-accel", handle_menubar_accel), }
                        }

                            pub fn hide_on_close(self, hide_on_close: bool) -> Self {
                            Self { builder: self.builder.property("hide-on-close", hide_on_close), }
                        }

                            pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("icon-name", icon_name.into()), }
                        }

                            pub fn maximized(self, maximized: bool) -> Self {
                            Self { builder: self.builder.property("maximized", maximized), }
                        }

                            pub fn mnemonics_visible(self, mnemonics_visible: bool) -> Self {
                            Self { builder: self.builder.property("mnemonics-visible", mnemonics_visible), }
                        }

                            pub fn modal(self, modal: bool) -> Self {
                            Self { builder: self.builder.property("modal", modal), }
                        }

                            pub fn resizable(self, resizable: bool) -> Self {
                            Self { builder: self.builder.property("resizable", resizable), }
                        }

                            pub fn startup_id(self, startup_id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("startup-id", startup_id.into()), }
                        }

                            #[cfg(feature = "gtk_v4_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_6")))]
    pub fn titlebar(self, titlebar: &impl IsA<gtk::Widget>) -> Self {
                            Self { builder: self.builder.property("titlebar", titlebar.clone().upcast()), }
                        }

                            pub fn transient_for(self, transient_for: &impl IsA<gtk::Window>) -> Self {
                            Self { builder: self.builder.property("transient-for", transient_for.clone().upcast()), }
                        }

                            pub fn can_focus(self, can_focus: bool) -> Self {
                            Self { builder: self.builder.property("can-focus", can_focus), }
                        }

                            pub fn can_target(self, can_target: bool) -> Self {
                            Self { builder: self.builder.property("can-target", can_target), }
                        }

                            pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
                            Self { builder: self.builder.property("css-classes", css_classes.into()), }
                        }

                            pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("css-name", css_name.into()), }
                        }

                            //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
                        //    Self { builder: self.builder.property("cursor", cursor), }
                        //}

                            pub fn focus_on_click(self, focus_on_click: bool) -> Self {
                            Self { builder: self.builder.property("focus-on-click", focus_on_click), }
                        }

                            pub fn focusable(self, focusable: bool) -> Self {
                            Self { builder: self.builder.property("focusable", focusable), }
                        }

                            pub fn halign(self, halign: gtk::Align) -> Self {
                            Self { builder: self.builder.property("halign", halign), }
                        }

                            pub fn has_tooltip(self, has_tooltip: bool) -> Self {
                            Self { builder: self.builder.property("has-tooltip", has_tooltip), }
                        }

                            pub fn height_request(self, height_request: i32) -> Self {
                            Self { builder: self.builder.property("height-request", height_request), }
                        }

                            pub fn hexpand(self, hexpand: bool) -> Self {
                            Self { builder: self.builder.property("hexpand", hexpand), }
                        }

                            pub fn hexpand_set(self, hexpand_set: bool) -> Self {
                            Self { builder: self.builder.property("hexpand-set", hexpand_set), }
                        }

                            //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
                        //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
                        //}

                            pub fn margin_bottom(self, margin_bottom: i32) -> Self {
                            Self { builder: self.builder.property("margin-bottom", margin_bottom), }
                        }

                            pub fn margin_end(self, margin_end: i32) -> Self {
                            Self { builder: self.builder.property("margin-end", margin_end), }
                        }

                            pub fn margin_start(self, margin_start: i32) -> Self {
                            Self { builder: self.builder.property("margin-start", margin_start), }
                        }

                            pub fn margin_top(self, margin_top: i32) -> Self {
                            Self { builder: self.builder.property("margin-top", margin_top), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn opacity(self, opacity: f64) -> Self {
                            Self { builder: self.builder.property("opacity", opacity), }
                        }

                            //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
                        //    Self { builder: self.builder.property("overflow", overflow), }
                        //}

                            pub fn receives_default(self, receives_default: bool) -> Self {
                            Self { builder: self.builder.property("receives-default", receives_default), }
                        }

                            pub fn sensitive(self, sensitive: bool) -> Self {
                            Self { builder: self.builder.property("sensitive", sensitive), }
                        }

                            pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("tooltip-markup", tooltip_markup.into()), }
                        }

                            pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("tooltip-text", tooltip_text.into()), }
                        }

                            pub fn valign(self, valign: gtk::Align) -> Self {
                            Self { builder: self.builder.property("valign", valign), }
                        }

                            pub fn vexpand(self, vexpand: bool) -> Self {
                            Self { builder: self.builder.property("vexpand", vexpand), }
                        }

                            pub fn vexpand_set(self, vexpand_set: bool) -> Self {
                            Self { builder: self.builder.property("vexpand-set", vexpand_set), }
                        }

                            pub fn visible(self, visible: bool) -> Self {
                            Self { builder: self.builder.property("visible", visible), }
                        }

                            pub fn width_request(self, width_request: i32) -> Self {
                            Self { builder: self.builder.property("width-request", width_request), }
                        }

                            //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
                        //    Self { builder: self.builder.property("accessible-role", accessible_role), }
                        //}

    // rustdoc-stripper-ignore-next
    /// Build the [`Dialog`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Dialog {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Dialog>> Sealed for T {}
}

pub trait DialogExt: IsA<Dialog> + sealed::Sealed + 'static {
    #[doc(alias = "he_dialog_add")]
    fn add(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::he_dialog_add(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "he_dialog_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_dialog_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_dialog_set_title")]
    fn set_title(&self, value: &str) {
        unsafe {
            ffi::he_dialog_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_dialog_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_dialog_get_info(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_dialog_set_info")]
    fn set_info(&self, value: &str) {
        unsafe {
            ffi::he_dialog_set_info(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_dialog_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_dialog_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_dialog_set_icon")]
    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::he_dialog_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_dialog_get_secondary_button")]
    #[doc(alias = "get_secondary_button")]
    fn secondary_button(&self) -> TintButton {
        unsafe {
            from_glib_none(ffi::he_dialog_get_secondary_button(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_dialog_set_secondary_button")]
    fn set_secondary_button(&self, value: &impl IsA<TintButton>) {
        unsafe {
            ffi::he_dialog_set_secondary_button(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "he_dialog_get_primary_button")]
    #[doc(alias = "get_primary_button")]
    fn primary_button(&self) -> FillButton {
        unsafe {
            from_glib_none(ffi::he_dialog_get_primary_button(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_dialog_set_primary_button")]
    fn set_primary_button(&self, value: &impl IsA<FillButton>) {
        unsafe {
            ffi::he_dialog_set_primary_button(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "info")]
    fn connect_info_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_info_trampoline<P: IsA<Dialog>, F: Fn(&P) + 'static>(this: *mut ffi::HeDialog, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Dialog::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::info\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_info_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Dialog>, F: Fn(&P) + 'static>(this: *mut ffi::HeDialog, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Dialog::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "secondary-button")]
    fn connect_secondary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_button_trampoline<P: IsA<Dialog>, F: Fn(&P) + 'static>(this: *mut ffi::HeDialog, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Dialog::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::secondary-button\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_secondary_button_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "primary-button")]
    fn connect_primary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_button_trampoline<P: IsA<Dialog>, F: Fn(&P) + 'static>(this: *mut ffi::HeDialog, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Dialog::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::primary-button\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_primary_button_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Dialog>> DialogExt for O {}
