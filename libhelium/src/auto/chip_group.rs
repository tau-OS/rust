// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi, Bin, ChipGroupMode};
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "HeChipGroup")]
    pub struct ChipGroup(Object<ffi::HeChipGroup, ffi::HeChipGroupClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_chip_group_get_type(),
    }
}

impl ChipGroup {
    pub const NONE: Option<&'static ChipGroup> = None;

    #[doc(alias = "he_chip_group_new")]
    pub fn new() -> ChipGroup {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::he_chip_group_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`ChipGroup`] objects.
    ///
    /// This method returns an instance of [`ChipGroupBuilder`](crate::builders::ChipGroupBuilder) which can be used to create [`ChipGroup`] objects.
    pub fn builder() -> ChipGroupBuilder {
        ChipGroupBuilder::new()
    }
}

impl Default for ChipGroup {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`ChipGroup`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ChipGroupBuilder {
    builder: glib::object::ObjectBuilder<'static, ChipGroup>,
}

impl ChipGroupBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn selection_model(self, selection_model: &gtk::SingleSelection) -> Self {
        Self {
            builder: self
                .builder
                .property("selection-model", selection_model.clone()),
        }
    }

    pub fn single_line(self, single_line: bool) -> Self {
        Self {
            builder: self.builder.property("single-line", single_line),
        }
    }

    pub fn mode(self, mode: ChipGroupMode) -> Self {
        Self {
            builder: self.builder.property("mode", mode),
        }
    }

    pub fn show_close_buttons(self, show_close_buttons: bool) -> Self {
        Self {
            builder: self
                .builder
                .property("show-close-buttons", show_close_buttons),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    #[cfg(feature = "gtk_v4_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_18")))]
    pub fn limit_events(self, limit_events: bool) -> Self {
        Self {
            builder: self.builder.property("limit-events", limit_events),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    // rustdoc-stripper-ignore-next
    /// Build the [`ChipGroup`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ChipGroup {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}

pub trait ChipGroupExt: IsA<ChipGroup> + 'static {
    #[doc(alias = "he_chip_group_get_active_filters")]
    #[doc(alias = "get_active_filters")]
    fn active_filters(&self) -> Vec<u32> {
        unsafe {
            let mut result_length1 = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_full_num(
                ffi::he_chip_group_get_active_filters(
                    self.as_ref().to_glib_none().0,
                    result_length1.as_mut_ptr(),
                ),
                result_length1.assume_init() as _,
            );
            ret
        }
    }

    #[doc(alias = "he_chip_group_set_active_filters")]
    fn set_active_filters(&self, indices: &[u32]) {
        let indices_length1 = indices.len() as _;
        unsafe {
            ffi::he_chip_group_set_active_filters(
                self.as_ref().to_glib_none().0,
                indices.to_glib_none().0,
                indices_length1,
            );
        }
    }

    #[doc(alias = "he_chip_group_clear_filters")]
    fn clear_filters(&self) {
        unsafe {
            ffi::he_chip_group_clear_filters(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "he_chip_group_remove_chip_at")]
    fn remove_chip_at(&self, position: u32) {
        unsafe {
            ffi::he_chip_group_remove_chip_at(self.as_ref().to_glib_none().0, position);
        }
    }

    #[doc(alias = "he_chip_group_get_selection_model")]
    #[doc(alias = "get_selection_model")]
    fn selection_model(&self) -> gtk::SingleSelection {
        unsafe {
            from_glib_none(ffi::he_chip_group_get_selection_model(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_chip_group_set_selection_model")]
    fn set_selection_model(&self, value: &gtk::SingleSelection) {
        unsafe {
            ffi::he_chip_group_set_selection_model(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "he_chip_group_get_single_line")]
    #[doc(alias = "get_single_line")]
    fn is_single_line(&self) -> bool {
        unsafe {
            from_glib(ffi::he_chip_group_get_single_line(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_chip_group_set_single_line")]
    fn set_single_line(&self, value: bool) {
        unsafe {
            ffi::he_chip_group_set_single_line(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_chip_group_get_mode")]
    #[doc(alias = "get_mode")]
    fn mode(&self) -> ChipGroupMode {
        unsafe { from_glib(ffi::he_chip_group_get_mode(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_chip_group_set_mode")]
    fn set_mode(&self, value: ChipGroupMode) {
        unsafe {
            ffi::he_chip_group_set_mode(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_chip_group_get_show_close_buttons")]
    #[doc(alias = "get_show_close_buttons")]
    fn shows_close_buttons(&self) -> bool {
        unsafe {
            from_glib(ffi::he_chip_group_get_show_close_buttons(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_chip_group_set_show_close_buttons")]
    fn set_show_close_buttons(&self, value: bool) {
        unsafe {
            ffi::he_chip_group_set_show_close_buttons(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "filters-changed")]
    fn connect_filters_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn filters_changed_trampoline<P: IsA<ChipGroup>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeChipGroup,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ChipGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"filters-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    filters_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "chip-removed")]
    fn connect_chip_removed<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn chip_removed_trampoline<
            P: IsA<ChipGroup>,
            F: Fn(&P, u32) + 'static,
        >(
            this: *mut ffi::HeChipGroup,
            position: std::ffi::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                ChipGroup::from_glib_borrow(this).unsafe_cast_ref(),
                position,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"chip-removed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    chip_removed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "selection-model")]
    fn connect_selection_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_selection_model_trampoline<
            P: IsA<ChipGroup>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeChipGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ChipGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::selection-model".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_selection_model_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "single-line")]
    fn connect_single_line_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_single_line_trampoline<
            P: IsA<ChipGroup>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeChipGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ChipGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::single-line".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_single_line_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "mode")]
    fn connect_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<P: IsA<ChipGroup>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeChipGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ChipGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::mode".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "show-close-buttons")]
    fn connect_show_close_buttons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_close_buttons_trampoline<
            P: IsA<ChipGroup>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeChipGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ChipGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::show-close-buttons".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_show_close_buttons_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<ChipGroup>> ChipGroupExt for O {}
