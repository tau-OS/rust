// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi, Colors};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "HeButton")]
    pub struct Button(Object<ffi::HeButton, ffi::HeButtonClass>) @extends gtk::Button, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Actionable;

    match fn {
        type_ => || ffi::he_button_get_type(),
    }
}

impl Button {
    pub const NONE: Option<&'static Button> = None;

    #[doc(alias = "he_button_new")]
    pub fn new(icon: Option<&str>, text: Option<&str>) -> Button {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_button_new(
                icon.to_glib_none().0,
                text.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Button`] objects.
    ///
    /// This method returns an instance of [`ButtonBuilder`](crate::builders::ButtonBuilder) which can be used to create [`Button`] objects.
    pub fn builder() -> ButtonBuilder {
        ButtonBuilder::new()
    }
}

impl Default for Button {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Button`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ButtonBuilder {
    builder: glib::object::ObjectBuilder<'static, Button>,
}

impl ButtonBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn color(self, color: Colors) -> Self {
        Self {
            builder: self.builder.property("color", color),
        }
    }

    pub fn is_disclosure(self, is_disclosure: bool) -> Self {
        Self {
            builder: self.builder.property("is-disclosure", is_disclosure),
        }
    }

    pub fn is_iconic(self, is_iconic: bool) -> Self {
        Self {
            builder: self.builder.property("is-iconic", is_iconic),
        }
    }

    pub fn is_outline(self, is_outline: bool) -> Self {
        Self {
            builder: self.builder.property("is-outline", is_outline),
        }
    }

    pub fn is_tint(self, is_tint: bool) -> Self {
        Self {
            builder: self.builder.property("is-tint", is_tint),
        }
    }

    pub fn is_fill(self, is_fill: bool) -> Self {
        Self {
            builder: self.builder.property("is-fill", is_fill),
        }
    }

    pub fn is_pill(self, is_pill: bool) -> Self {
        Self {
            builder: self.builder.property("is-pill", is_pill),
        }
    }

    pub fn is_textual(self, is_textual: bool) -> Self {
        Self {
            builder: self.builder.property("is-textual", is_textual),
        }
    }

    pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon", icon.into()),
        }
    }

    pub fn text(self, text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("text", text.into()),
        }
    }

    #[cfg(feature = "gtk_v4_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_12")))]
    pub fn can_shrink(self, can_shrink: bool) -> Self {
        Self {
            builder: self.builder.property("can-shrink", can_shrink),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn has_frame(self, has_frame: bool) -> Self {
        Self {
            builder: self.builder.property("has-frame", has_frame),
        }
    }

    pub fn icon_name(self, icon_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon-name", icon_name.into()),
        }
    }

    pub fn label(self, label: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("label", label.into()),
        }
    }

    pub fn use_underline(self, use_underline: bool) -> Self {
        Self {
            builder: self.builder.property("use-underline", use_underline),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    pub fn action_name(self, action_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("action-name", action_name.into()),
        }
    }

    pub fn action_target(self, action_target: &glib::Variant) -> Self {
        Self {
            builder: self
                .builder
                .property("action-target", action_target.clone()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Button`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Button {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Button>> Sealed for T {}
}

pub trait HeButtonExt: IsA<Button> + sealed::Sealed + 'static {
    #[doc(alias = "he_button_get_color")]
    #[doc(alias = "get_color")]
    fn color(&self) -> Colors {
        unsafe { from_glib(ffi::he_button_get_color(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_color")]
    fn set_color(&self, value: Colors) {
        unsafe {
            ffi::he_button_set_color(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_disclosure")]
    #[doc(alias = "get_is_disclosure")]
    fn is_disclosure(&self) -> bool {
        unsafe {
            from_glib(ffi::he_button_get_is_disclosure(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_button_set_is_disclosure")]
    fn set_is_disclosure(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_disclosure(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_iconic")]
    #[doc(alias = "get_is_iconic")]
    fn is_iconic(&self) -> bool {
        unsafe { from_glib(ffi::he_button_get_is_iconic(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_is_iconic")]
    fn set_is_iconic(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_iconic(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_outline")]
    #[doc(alias = "get_is_outline")]
    fn is_outline(&self) -> bool {
        unsafe {
            from_glib(ffi::he_button_get_is_outline(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_button_set_is_outline")]
    fn set_is_outline(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_outline(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_tint")]
    #[doc(alias = "get_is_tint")]
    fn is_tint(&self) -> bool {
        unsafe { from_glib(ffi::he_button_get_is_tint(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_is_tint")]
    fn set_is_tint(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_tint(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_fill")]
    #[doc(alias = "get_is_fill")]
    fn fills(&self) -> bool {
        unsafe { from_glib(ffi::he_button_get_is_fill(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_is_fill")]
    fn set_is_fill(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_fill(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_pill")]
    #[doc(alias = "get_is_pill")]
    fn is_pill(&self) -> bool {
        unsafe { from_glib(ffi::he_button_get_is_pill(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_is_pill")]
    fn set_is_pill(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_pill(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_is_textual")]
    #[doc(alias = "get_is_textual")]
    fn is_textual(&self) -> bool {
        unsafe {
            from_glib(ffi::he_button_get_is_textual(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_button_set_is_textual")]
    fn set_is_textual(&self, value: bool) {
        unsafe {
            ffi::he_button_set_is_textual(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::he_button_get_icon(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_icon")]
    fn set_icon(&self, value: Option<&str>) {
        unsafe {
            ffi::he_button_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_button_get_text")]
    #[doc(alias = "get_text")]
    fn text(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::he_button_get_text(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_button_set_text")]
    fn set_text(&self, value: &str) {
        unsafe {
            ffi::he_button_set_text(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "color")]
    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::color\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-disclosure")]
    fn connect_is_disclosure_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_disclosure_trampoline<
            P: IsA<Button>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-disclosure\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_disclosure_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-iconic")]
    fn connect_is_iconic_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_iconic_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-iconic\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_iconic_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-outline")]
    fn connect_is_outline_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_outline_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-outline\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_outline_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-tint")]
    fn connect_is_tint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_tint_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-tint\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_tint_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-fill")]
    fn connect_is_fill_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_fill_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-fill\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_fill_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-pill")]
    fn connect_is_pill_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_pill_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-pill\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_pill_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-textual")]
    fn connect_is_textual_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_textual_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-textual\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_textual_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "text")]
    fn connect_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Button>> HeButtonExt for O {}
