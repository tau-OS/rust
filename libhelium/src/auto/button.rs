// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi,Colors};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "HeButton")]
    pub struct Button(Object<ffi::HeButton, ffi::HeButtonClass>) @extends gtk::Button, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Actionable;

    match fn {
        type_ => || ffi::he_button_get_type(),
    }
}

impl Button {
        pub const NONE: Option<&'static Button> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Button>> Sealed for T {}
}

pub trait ButtonExt: IsA<Button> + sealed::Sealed + 'static {
    #[doc(alias = "he_button_get_color")]
    #[doc(alias = "get_color")]
    fn color(&self) -> Colors {
        unsafe {
            from_glib(ffi::he_button_get_color(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_button_set_color")]
    fn set_color(&self, value: Colors) {
        unsafe {
            ffi::he_button_set_color(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_button_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::he_button_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_button_set_icon")]
    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::he_button_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "color")]
    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(this: *mut ffi::HeButton, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::color\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_color_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Button>, F: Fn(&P) + 'static>(this: *mut ffi::HeButton, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Button::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Button>> ButtonExt for O {}
