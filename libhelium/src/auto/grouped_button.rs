// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi, GroupedButtonSize};
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "HeGroupedButton")]
    pub struct GroupedButton(Object<ffi::HeGroupedButton, ffi::HeGroupedButtonClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_grouped_button_get_type(),
    }
}

impl GroupedButton {
    pub const NONE: Option<&'static GroupedButton> = None;

    #[doc(alias = "he_grouped_button_new")]
    pub fn new() -> GroupedButton {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::he_grouped_button_new()) }
    }

    #[doc(alias = "he_grouped_button_new_with_size")]
    pub fn with_size(size: GroupedButtonSize) -> GroupedButton {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::he_grouped_button_new_with_size(size.into_glib())) }
    }

    #[doc(alias = "he_grouped_button_new_with_names")]
    pub fn with_names(size_name: &str) -> GroupedButton {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_grouped_button_new_with_names(
                size_name.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`GroupedButton`] objects.
    ///
    /// This method returns an instance of [`GroupedButtonBuilder`](crate::builders::GroupedButtonBuilder) which can be used to create [`GroupedButton`] objects.
    pub fn builder() -> GroupedButtonBuilder {
        GroupedButtonBuilder::new()
    }
}

impl Default for GroupedButton {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`GroupedButton`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct GroupedButtonBuilder {
    builder: glib::object::ObjectBuilder<'static, GroupedButton>,
}

impl GroupedButtonBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn size(self, size: GroupedButtonSize) -> Self {
        Self {
            builder: self.builder.property("size", size),
        }
    }

    pub fn size_name(self, size_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("size-name", size_name.into()),
        }
    }

    pub fn homogeneous(self, homogeneous: bool) -> Self {
        Self {
            builder: self.builder.property("homogeneous", homogeneous),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    #[cfg(feature = "gtk_v4_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_18")))]
    pub fn limit_events(self, limit_events: bool) -> Self {
        Self {
            builder: self.builder.property("limit-events", limit_events),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    // rustdoc-stripper-ignore-next
    /// Build the [`GroupedButton`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> GroupedButton {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}

pub trait GroupedButtonExt: IsA<GroupedButton> + 'static {
    #[doc(alias = "he_grouped_button_add_widget")]
    fn add_widget(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::he_grouped_button_add_widget(
                self.as_ref().to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "he_grouped_button_remove_widget")]
    fn remove_widget(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::he_grouped_button_remove_widget(
                self.as_ref().to_glib_none().0,
                widget.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "he_grouped_button_clear_widgets")]
    fn clear_widgets(&self) {
        unsafe {
            ffi::he_grouped_button_clear_widgets(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "he_grouped_button_get_widget_at_index")]
    #[doc(alias = "get_widget_at_index")]
    fn widget_at_index(&self, index: i32) -> Option<gtk::Widget> {
        unsafe {
            from_glib_full(ffi::he_grouped_button_get_widget_at_index(
                self.as_ref().to_glib_none().0,
                index,
            ))
        }
    }

    #[doc(alias = "he_grouped_button_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> GroupedButtonSize {
        unsafe {
            from_glib(ffi::he_grouped_button_get_size(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_grouped_button_set_size")]
    fn set_size(&self, value: GroupedButtonSize) {
        unsafe {
            ffi::he_grouped_button_set_size(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_grouped_button_get_size_name")]
    #[doc(alias = "get_size_name")]
    fn size_name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_grouped_button_get_size_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_grouped_button_set_size_name")]
    fn set_size_name(&self, value: &str) {
        unsafe {
            ffi::he_grouped_button_set_size_name(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "he_grouped_button_get_button_count")]
    #[doc(alias = "get_button_count")]
    fn button_count(&self) -> i32 {
        unsafe { ffi::he_grouped_button_get_button_count(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "he_grouped_button_get_homogeneous")]
    #[doc(alias = "get_homogeneous")]
    fn is_homogeneous(&self) -> bool {
        unsafe {
            from_glib(ffi::he_grouped_button_get_homogeneous(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_grouped_button_set_homogeneous")]
    fn set_homogeneous(&self, value: bool) {
        unsafe {
            ffi::he_grouped_button_set_homogeneous(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "widget-added")]
    fn connect_widget_added<F: Fn(&Self, &gtk::Widget) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn widget_added_trampoline<
            P: IsA<GroupedButton>,
            F: Fn(&P, &gtk::Widget) + 'static,
        >(
            this: *mut ffi::HeGroupedButton,
            widget: *mut gtk::ffi::GtkWidget,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                GroupedButton::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(widget),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"widget-added".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    widget_added_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "widget-removed")]
    fn connect_widget_removed<F: Fn(&Self, &gtk::Widget) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn widget_removed_trampoline<
            P: IsA<GroupedButton>,
            F: Fn(&P, &gtk::Widget) + 'static,
        >(
            this: *mut ffi::HeGroupedButton,
            widget: *mut gtk::ffi::GtkWidget,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                GroupedButton::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(widget),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"widget-removed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    widget_removed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<GroupedButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeGroupedButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GroupedButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::size".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "size-name")]
    fn connect_size_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_name_trampoline<
            P: IsA<GroupedButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeGroupedButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GroupedButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::size-name".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_size_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "button-count")]
    fn connect_button_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_button_count_trampoline<
            P: IsA<GroupedButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeGroupedButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GroupedButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::button-count".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_button_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "homogeneous")]
    fn connect_homogeneous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_homogeneous_trampoline<
            P: IsA<GroupedButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeGroupedButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(GroupedButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::homogeneous".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_homogeneous_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<GroupedButton>> GroupedButtonExt for O {}
