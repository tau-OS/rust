// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi,AnimationTarget};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "HePropertyAnimationTarget")]
    pub struct PropertyAnimationTarget(Object<ffi::HePropertyAnimationTarget, ffi::HePropertyAnimationTargetClass>) @extends AnimationTarget;

    match fn {
        type_ => || ffi::he_property_animation_target_get_type(),
    }
}

impl PropertyAnimationTarget {
    #[doc(alias = "he_property_animation_target_new")]
    pub fn new() -> PropertyAnimationTarget {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::he_property_animation_target_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`PropertyAnimationTarget`] objects.
            ///
            /// This method returns an instance of [`PropertyAnimationTargetBuilder`](crate::builders::PropertyAnimationTargetBuilder) which can be used to create [`PropertyAnimationTarget`] objects.
            pub fn builder() -> PropertyAnimationTargetBuilder {
                PropertyAnimationTargetBuilder::new()
            }
        

    #[doc(alias = "he_property_animation_target_animate_property")]
    pub fn animate_property(&self, value: f64) {
        unsafe {
            ffi::he_property_animation_target_animate_property(self.to_glib_none().0, value);
        }
    }

    #[doc(alias = "he_property_animation_target_get_object")]
    #[doc(alias = "get_object")]
    pub fn object(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(ffi::he_property_animation_target_get_object(self.to_glib_none().0))
        }
    }

    #[doc(alias = "he_property_animation_target_set_object")]
    pub fn set_object(&self, value: Option<&impl IsA<glib::Object>>) {
        unsafe {
            ffi::he_property_animation_target_set_object(self.to_glib_none().0, value.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "he_property_animation_target_get_pspec")]
    #[doc(alias = "get_pspec")]
    pub fn pspec(&self) -> Option<glib::ParamSpec> {
        unsafe {
            from_glib_none(ffi::he_property_animation_target_get_pspec(self.to_glib_none().0))
        }
    }

    #[doc(alias = "he_property_animation_target_set_pspec")]
    pub fn set_pspec(&self, value: Option<impl AsRef<glib::ParamSpec>>) {
        unsafe {
            ffi::he_property_animation_target_set_pspec(self.to_glib_none().0, value.as_ref().map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "object")]
    pub fn connect_object_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_object_trampoline<F: Fn(&PropertyAnimationTarget) + 'static>(this: *mut ffi::HePropertyAnimationTarget, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::object\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_object_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pspec")]
    pub fn connect_pspec_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pspec_trampoline<F: Fn(&PropertyAnimationTarget) + 'static>(this: *mut ffi::HePropertyAnimationTarget, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pspec\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_pspec_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for PropertyAnimationTarget {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`PropertyAnimationTarget`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PropertyAnimationTargetBuilder {
            builder: glib::object::ObjectBuilder<'static, PropertyAnimationTarget>,
        }

        impl PropertyAnimationTargetBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn object(self, object: &impl IsA<glib::Object>) -> Self {
                            Self { builder: self.builder.property("object", object.clone().upcast()), }
                        }

                            pub fn pspec(self, pspec: impl AsRef<glib::ParamSpec>) -> Self {
                            Self { builder: self.builder.property("pspec", pspec.as_ref().clone()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`PropertyAnimationTarget`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> PropertyAnimationTarget {
    self.builder.build() }
}
