// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi, Bin};
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "HeSlider")]
    pub struct Slider(Object<ffi::HeSlider, ffi::HeSliderClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_slider_get_type(),
    }
}

impl Slider {
    pub const NONE: Option<&'static Slider> = None;

    #[doc(alias = "he_slider_new")]
    pub fn new() -> Slider {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::he_slider_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Slider`] objects.
    ///
    /// This method returns an instance of [`SliderBuilder`](crate::builders::SliderBuilder) which can be used to create [`Slider`] objects.
    pub fn builder() -> SliderBuilder {
        SliderBuilder::new()
    }
}

impl Default for Slider {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Slider`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct SliderBuilder {
    builder: glib::object::ObjectBuilder<'static, Slider>,
}

impl SliderBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn wave_amplitude(self, wave_amplitude: i32) -> Self {
        Self {
            builder: self.builder.property("wave-amplitude", wave_amplitude),
        }
    }

    pub fn wave_wavelength(self, wave_wavelength: i32) -> Self {
        Self {
            builder: self.builder.property("wave-wavelength", wave_wavelength),
        }
    }

    pub fn wave_thickness(self, wave_thickness: i32) -> Self {
        Self {
            builder: self.builder.property("wave-thickness", wave_thickness),
        }
    }

    pub fn animate(self, animate: bool) -> Self {
        Self {
            builder: self.builder.property("animate", animate),
        }
    }

    pub fn value(self, value: f64) -> Self {
        Self {
            builder: self.builder.property("value", value),
        }
    }

    pub fn left_icon(self, left_icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("left-icon", left_icon.into()),
        }
    }

    pub fn right_icon(self, right_icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("right-icon", right_icon.into()),
        }
    }

    pub fn stop_indicator_visibility(self, stop_indicator_visibility: bool) -> Self {
        Self {
            builder: self
                .builder
                .property("stop-indicator-visibility", stop_indicator_visibility),
        }
    }

    pub fn is_wavy(self, is_wavy: bool) -> Self {
        Self {
            builder: self.builder.property("is-wavy", is_wavy),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    #[cfg(feature = "gtk_v4_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "gtk_v4_18")))]
    pub fn limit_events(self, limit_events: bool) -> Self {
        Self {
            builder: self.builder.property("limit-events", limit_events),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    // rustdoc-stripper-ignore-next
    /// Build the [`Slider`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Slider {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}

pub trait SliderExt: IsA<Slider> + 'static {
    #[doc(alias = "he_slider_add_mark")]
    fn add_mark(&self, value: f64, text: Option<&str>) {
        unsafe {
            ffi::he_slider_add_mark(self.as_ref().to_glib_none().0, value, text.to_glib_none().0);
        }
    }

    #[doc(alias = "he_slider_set_range")]
    fn set_range(&self, min: f64, max: f64) {
        unsafe {
            ffi::he_slider_set_range(self.as_ref().to_glib_none().0, min, max);
        }
    }

    #[doc(alias = "he_slider_set_adjustment")]
    fn set_adjustment(&self, adjustment: &impl IsA<gtk::Adjustment>) {
        unsafe {
            ffi::he_slider_set_adjustment(
                self.as_ref().to_glib_none().0,
                adjustment.as_ref().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "he_slider_get_wave_amplitude")]
    #[doc(alias = "get_wave_amplitude")]
    fn wave_amplitude(&self) -> i32 {
        unsafe { ffi::he_slider_get_wave_amplitude(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "he_slider_set_wave_amplitude")]
    fn set_wave_amplitude(&self, value: i32) {
        unsafe {
            ffi::he_slider_set_wave_amplitude(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "he_slider_get_wave_wavelength")]
    #[doc(alias = "get_wave_wavelength")]
    fn wave_wavelength(&self) -> i32 {
        unsafe { ffi::he_slider_get_wave_wavelength(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "he_slider_set_wave_wavelength")]
    fn set_wave_wavelength(&self, value: i32) {
        unsafe {
            ffi::he_slider_set_wave_wavelength(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "he_slider_get_wave_thickness")]
    #[doc(alias = "get_wave_thickness")]
    fn wave_thickness(&self) -> i32 {
        unsafe { ffi::he_slider_get_wave_thickness(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "he_slider_set_wave_thickness")]
    fn set_wave_thickness(&self, value: i32) {
        unsafe {
            ffi::he_slider_set_wave_thickness(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "he_slider_get_animate")]
    #[doc(alias = "get_animate")]
    fn is_animate(&self) -> bool {
        unsafe { from_glib(ffi::he_slider_get_animate(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_slider_set_animate")]
    fn set_animate(&self, value: bool) {
        unsafe {
            ffi::he_slider_set_animate(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "he_slider_get_value")]
    #[doc(alias = "get_value")]
    fn value(&self) -> f64 {
        unsafe { ffi::he_slider_get_value(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "he_slider_set_value")]
    fn set_value(&self, value: f64) {
        unsafe {
            ffi::he_slider_set_value(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "he_slider_get_left_icon")]
    #[doc(alias = "get_left_icon")]
    fn left_icon(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::he_slider_get_left_icon(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_slider_set_left_icon")]
    fn set_left_icon(&self, value: &str) {
        unsafe {
            ffi::he_slider_set_left_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_slider_get_right_icon")]
    #[doc(alias = "get_right_icon")]
    fn right_icon(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_slider_get_right_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_slider_set_right_icon")]
    fn set_right_icon(&self, value: &str) {
        unsafe {
            ffi::he_slider_set_right_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_slider_get_stop_indicator_visibility")]
    #[doc(alias = "get_stop_indicator_visibility")]
    fn is_stop_indicator_visibility(&self) -> bool {
        unsafe {
            from_glib(ffi::he_slider_get_stop_indicator_visibility(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "he_slider_set_stop_indicator_visibility")]
    fn set_stop_indicator_visibility(&self, value: bool) {
        unsafe {
            ffi::he_slider_set_stop_indicator_visibility(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "he_slider_get_is_wavy")]
    #[doc(alias = "get_is_wavy")]
    fn is_wavy(&self) -> bool {
        unsafe { from_glib(ffi::he_slider_get_is_wavy(self.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "he_slider_set_is_wavy")]
    fn set_is_wavy(&self, value: bool) {
        unsafe {
            ffi::he_slider_set_is_wavy(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "value-changed")]
    fn connect_value_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn value_changed_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"value-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    value_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "wave-amplitude")]
    fn connect_wave_amplitude_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wave_amplitude_trampoline<
            P: IsA<Slider>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::wave-amplitude".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_wave_amplitude_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "wave-wavelength")]
    fn connect_wave_wavelength_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wave_wavelength_trampoline<
            P: IsA<Slider>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::wave-wavelength".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_wave_wavelength_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "wave-thickness")]
    fn connect_wave_thickness_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wave_thickness_trampoline<
            P: IsA<Slider>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::wave-thickness".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_wave_thickness_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "animate")]
    fn connect_animate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_animate_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::animate".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_animate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "value")]
    fn connect_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::value".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_value_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "left-icon")]
    fn connect_left_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_left_icon_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::left-icon".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_left_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "right-icon")]
    fn connect_right_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_right_icon_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::right-icon".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_right_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "stop-indicator-visibility")]
    fn connect_stop_indicator_visibility_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_stop_indicator_visibility_trampoline<
            P: IsA<Slider>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::stop-indicator-visibility".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_stop_indicator_visibility_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "is-wavy")]
    fn connect_is_wavy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_wavy_trampoline<P: IsA<Slider>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSlider,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Slider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::is-wavy".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_is_wavy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Slider>> SliderExt for O {}
