// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files
// DO NOT EDIT

use crate::{ColorRGBColor, DesktopColorScheme};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeDesktop")]
    pub struct Desktop(Object<ffi::HeDesktop, ffi::HeDesktopClass>);

    match fn {
        type_ => || ffi::he_desktop_get_type(),
    }
}

impl Desktop {
    pub const NONE: Option<&'static Desktop> = None;

    #[doc(alias = "he_desktop_new")]
    pub fn new() -> Desktop {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::he_desktop_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Desktop`] objects.
    ///
    /// This method returns an instance of [`DesktopBuilder`](crate::builders::DesktopBuilder) which can be used to create [`Desktop`] objects.
    pub fn builder() -> DesktopBuilder {
        DesktopBuilder::default()
    }
}

impl Default for Desktop {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Desktop`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DesktopBuilder {
    prefers_color_scheme: Option<DesktopColorScheme>,
    accent_color: Option<ColorRGBColor>,
}

impl DesktopBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`DesktopBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Desktop`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Desktop {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref prefers_color_scheme) = self.prefers_color_scheme {
            properties.push(("prefers-color-scheme", prefers_color_scheme));
        }
        if let Some(ref accent_color) = self.accent_color {
            properties.push(("accent-color", accent_color));
        }
        glib::Object::new::<Desktop>(&properties)
    }

    pub fn prefers_color_scheme(mut self, prefers_color_scheme: DesktopColorScheme) -> Self {
        self.prefers_color_scheme = Some(prefers_color_scheme);
        self
    }

    pub fn accent_color(mut self, accent_color: &ColorRGBColor) -> Self {
        self.accent_color = Some(accent_color.clone());
        self
    }
}

pub trait DesktopExt: 'static {
    #[doc(alias = "he_desktop_get_prefers_color_scheme")]
    #[doc(alias = "get_prefers_color_scheme")]
    fn prefers_color_scheme(&self) -> DesktopColorScheme;

    #[doc(alias = "he_desktop_get_accent_color")]
    #[doc(alias = "get_accent_color")]
    fn accent_color(&self) -> Option<ColorRGBColor>;

    #[doc(alias = "prefers-color-scheme")]
    fn set_prefers_color_scheme(&self, prefers_color_scheme: DesktopColorScheme);

    #[doc(alias = "accent-color")]
    fn set_accent_color(&self, accent_color: Option<&ColorRGBColor>);

    #[doc(alias = "prefers-color-scheme")]
    fn connect_prefers_color_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "accent-color")]
    fn connect_accent_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Desktop>> DesktopExt for O {
    fn prefers_color_scheme(&self) -> DesktopColorScheme {
        unsafe {
            from_glib(ffi::he_desktop_get_prefers_color_scheme(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn accent_color(&self) -> Option<ColorRGBColor> {
        unsafe {
            from_glib_none(ffi::he_desktop_get_accent_color(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_prefers_color_scheme(&self, prefers_color_scheme: DesktopColorScheme) {
        glib::ObjectExt::set_property(self.as_ref(), "prefers-color-scheme", &prefers_color_scheme)
    }

    fn set_accent_color(&self, accent_color: Option<&ColorRGBColor>) {
        glib::ObjectExt::set_property(self.as_ref(), "accent-color", &accent_color)
    }

    fn connect_prefers_color_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_prefers_color_scheme_trampoline<
            P: IsA<Desktop>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeDesktop,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Desktop::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::prefers-color-scheme\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_prefers_color_scheme_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_accent_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accent_color_trampoline<
            P: IsA<Desktop>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeDesktop,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Desktop::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::accent-color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_accent_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Desktop {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Desktop")
    }
}
