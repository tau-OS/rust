// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::Bin;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeSideBar")]
    pub struct SideBar(Object<ffi::HeSideBar, ffi::HeSideBarClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_side_bar_get_type(),
    }
}

impl SideBar {
    pub const NONE: Option<&'static SideBar> = None;

    #[doc(alias = "he_side_bar_new")]
    pub fn new(title: &str, subtitle: &str) -> SideBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_side_bar_new(
                title.to_glib_none().0,
                subtitle.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`SideBar`] objects.
    ///
    /// This method returns an instance of [`SideBarBuilder`](crate::builders::SideBarBuilder) which can be used to create [`SideBar`] objects.
    pub fn builder() -> SideBarBuilder {
        SideBarBuilder::default()
    }
}

impl Default for SideBar {
    fn default() -> Self {
        glib::object::Object::new::<Self>(&[])
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`SideBar`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct SideBarBuilder {
    title: Option<String>,
    titlewidget: Option<gtk::Widget>,
    subtitle: Option<String>,
    show_buttons: Option<bool>,
    show_back: Option<bool>,
    stack: Option<gtk::Stack>,
    scroller: Option<gtk::ScrolledWindow>,
    has_margins: Option<bool>,
    child: Option<gtk::Widget>,
    can_focus: Option<bool>,
    can_target: Option<bool>,
    css_classes: Option<Vec<String>>,
    css_name: Option<String>,
    //cursor: /*Unknown type*/,
    focus_on_click: Option<bool>,
    focusable: Option<bool>,
    halign: Option<gtk::Align>,
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    hexpand: Option<bool>,
    hexpand_set: Option<bool>,
    //layout-manager: /*Unknown type*/,
    margin_bottom: Option<i32>,
    margin_end: Option<i32>,
    margin_start: Option<i32>,
    margin_top: Option<i32>,
    name: Option<String>,
    opacity: Option<f64>,
    //overflow: /*Unknown type*/,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    tooltip_markup: Option<String>,
    tooltip_text: Option<String>,
    valign: Option<gtk::Align>,
    vexpand: Option<bool>,
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
    //accessible-role: /*Unknown type*/,
}

impl SideBarBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`SideBarBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`SideBar`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> SideBar {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref title) = self.title {
            properties.push(("title", title));
        }
        if let Some(ref titlewidget) = self.titlewidget {
            properties.push(("titlewidget", titlewidget));
        }
        if let Some(ref subtitle) = self.subtitle {
            properties.push(("subtitle", subtitle));
        }
        if let Some(ref show_buttons) = self.show_buttons {
            properties.push(("show-buttons", show_buttons));
        }
        if let Some(ref show_back) = self.show_back {
            properties.push(("show-back", show_back));
        }
        if let Some(ref stack) = self.stack {
            properties.push(("stack", stack));
        }
        if let Some(ref scroller) = self.scroller {
            properties.push(("scroller", scroller));
        }
        if let Some(ref has_margins) = self.has_margins {
            properties.push(("has-margins", has_margins));
        }
        if let Some(ref child) = self.child {
            properties.push(("child", child));
        }
        if let Some(ref can_focus) = self.can_focus {
            properties.push(("can-focus", can_focus));
        }
        if let Some(ref can_target) = self.can_target {
            properties.push(("can-target", can_target));
        }
        if let Some(ref css_classes) = self.css_classes {
            properties.push(("css-classes", css_classes));
        }
        if let Some(ref css_name) = self.css_name {
            properties.push(("css-name", css_name));
        }
        if let Some(ref focus_on_click) = self.focus_on_click {
            properties.push(("focus-on-click", focus_on_click));
        }
        if let Some(ref focusable) = self.focusable {
            properties.push(("focusable", focusable));
        }
        if let Some(ref halign) = self.halign {
            properties.push(("halign", halign));
        }
        if let Some(ref has_tooltip) = self.has_tooltip {
            properties.push(("has-tooltip", has_tooltip));
        }
        if let Some(ref height_request) = self.height_request {
            properties.push(("height-request", height_request));
        }
        if let Some(ref hexpand) = self.hexpand {
            properties.push(("hexpand", hexpand));
        }
        if let Some(ref hexpand_set) = self.hexpand_set {
            properties.push(("hexpand-set", hexpand_set));
        }
        if let Some(ref margin_bottom) = self.margin_bottom {
            properties.push(("margin-bottom", margin_bottom));
        }
        if let Some(ref margin_end) = self.margin_end {
            properties.push(("margin-end", margin_end));
        }
        if let Some(ref margin_start) = self.margin_start {
            properties.push(("margin-start", margin_start));
        }
        if let Some(ref margin_top) = self.margin_top {
            properties.push(("margin-top", margin_top));
        }
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        if let Some(ref opacity) = self.opacity {
            properties.push(("opacity", opacity));
        }
        if let Some(ref receives_default) = self.receives_default {
            properties.push(("receives-default", receives_default));
        }
        if let Some(ref sensitive) = self.sensitive {
            properties.push(("sensitive", sensitive));
        }
        if let Some(ref tooltip_markup) = self.tooltip_markup {
            properties.push(("tooltip-markup", tooltip_markup));
        }
        if let Some(ref tooltip_text) = self.tooltip_text {
            properties.push(("tooltip-text", tooltip_text));
        }
        if let Some(ref valign) = self.valign {
            properties.push(("valign", valign));
        }
        if let Some(ref vexpand) = self.vexpand {
            properties.push(("vexpand", vexpand));
        }
        if let Some(ref vexpand_set) = self.vexpand_set {
            properties.push(("vexpand-set", vexpand_set));
        }
        if let Some(ref visible) = self.visible {
            properties.push(("visible", visible));
        }
        if let Some(ref width_request) = self.width_request {
            properties.push(("width-request", width_request));
        }
        glib::Object::new::<SideBar>(&properties)
    }

    pub fn title(mut self, title: &str) -> Self {
        self.title = Some(title.to_string());
        self
    }

    pub fn titlewidget(mut self, titlewidget: &impl IsA<gtk::Widget>) -> Self {
        self.titlewidget = Some(titlewidget.clone().upcast());
        self
    }

    pub fn subtitle(mut self, subtitle: &str) -> Self {
        self.subtitle = Some(subtitle.to_string());
        self
    }

    pub fn show_buttons(mut self, show_buttons: bool) -> Self {
        self.show_buttons = Some(show_buttons);
        self
    }

    pub fn show_back(mut self, show_back: bool) -> Self {
        self.show_back = Some(show_back);
        self
    }

    pub fn stack(mut self, stack: &gtk::Stack) -> Self {
        self.stack = Some(stack.clone());
        self
    }

    pub fn scroller(mut self, scroller: &gtk::ScrolledWindow) -> Self {
        self.scroller = Some(scroller.clone());
        self
    }

    pub fn has_margins(mut self, has_margins: bool) -> Self {
        self.has_margins = Some(has_margins);
        self
    }

    pub fn child(mut self, child: &impl IsA<gtk::Widget>) -> Self {
        self.child = Some(child.clone().upcast());
        self
    }

    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    pub fn can_target(mut self, can_target: bool) -> Self {
        self.can_target = Some(can_target);
        self
    }

    pub fn css_classes(mut self, css_classes: Vec<String>) -> Self {
        self.css_classes = Some(css_classes);
        self
    }

    pub fn css_name(mut self, css_name: &str) -> Self {
        self.css_name = Some(css_name.to_string());
        self
    }

    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    pub fn focusable(mut self, focusable: bool) -> Self {
        self.focusable = Some(focusable);
        self
    }

    pub fn halign(mut self, halign: gtk::Align) -> Self {
        self.halign = Some(halign);
        self
    }

    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    pub fn valign(mut self, valign: gtk::Align) -> Self {
        self.valign = Some(valign);
        self
    }

    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }
}

pub trait SideBarExt: 'static {
    #[doc(alias = "he_side_bar_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> glib::GString;

    #[doc(alias = "he_side_bar_set_title")]
    fn set_title(&self, value: &str);

    #[doc(alias = "he_side_bar_get_titlewidget")]
    #[doc(alias = "get_titlewidget")]
    fn titlewidget(&self) -> Option<gtk::Widget>;

    #[doc(alias = "he_side_bar_set_titlewidget")]
    fn set_titlewidget(&self, value: Option<&impl IsA<gtk::Widget>>);

    #[doc(alias = "he_side_bar_get_subtitle")]
    #[doc(alias = "get_subtitle")]
    fn subtitle(&self) -> glib::GString;

    #[doc(alias = "he_side_bar_set_subtitle")]
    fn set_subtitle(&self, value: &str);

    #[doc(alias = "he_side_bar_get_show_buttons")]
    #[doc(alias = "get_show_buttons")]
    fn shows_buttons(&self) -> bool;

    #[doc(alias = "he_side_bar_set_show_buttons")]
    fn set_show_buttons(&self, value: bool);

    #[doc(alias = "he_side_bar_get_show_back")]
    #[doc(alias = "get_show_back")]
    fn shows_back(&self) -> bool;

    #[doc(alias = "he_side_bar_set_show_back")]
    fn set_show_back(&self, value: bool);

    #[doc(alias = "he_side_bar_get_stack")]
    #[doc(alias = "get_stack")]
    fn stack(&self) -> gtk::Stack;

    #[doc(alias = "he_side_bar_set_stack")]
    fn set_stack(&self, value: &gtk::Stack);

    #[doc(alias = "he_side_bar_get_scroller")]
    #[doc(alias = "get_scroller")]
    fn scroller(&self) -> gtk::ScrolledWindow;

    #[doc(alias = "he_side_bar_set_scroller")]
    fn set_scroller(&self, value: &gtk::ScrolledWindow);

    #[doc(alias = "he_side_bar_get_has_margins")]
    #[doc(alias = "get_has_margins")]
    fn has_margins(&self) -> bool;

    #[doc(alias = "he_side_bar_set_has_margins")]
    fn set_has_margins(&self, value: bool);

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "titlewidget")]
    fn connect_titlewidget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "subtitle")]
    fn connect_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-buttons")]
    fn connect_show_buttons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "show-back")]
    fn connect_show_back_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "stack")]
    fn connect_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scroller")]
    fn connect_scroller_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "has-margins")]
    fn connect_has_margins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SideBar>> SideBarExt for O {
    fn title(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::he_side_bar_get_title(self.as_ref().to_glib_none().0)) }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::he_side_bar_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn titlewidget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::he_side_bar_get_titlewidget(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_titlewidget(&self, value: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::he_side_bar_set_titlewidget(
                self.as_ref().to_glib_none().0,
                value.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn subtitle(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_side_bar_get_subtitle(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_subtitle(&self, value: &str) {
        unsafe {
            ffi::he_side_bar_set_subtitle(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn shows_buttons(&self) -> bool {
        unsafe {
            from_glib(ffi::he_side_bar_get_show_buttons(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_show_buttons(&self, value: bool) {
        unsafe {
            ffi::he_side_bar_set_show_buttons(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn shows_back(&self) -> bool {
        unsafe {
            from_glib(ffi::he_side_bar_get_show_back(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_show_back(&self, value: bool) {
        unsafe {
            ffi::he_side_bar_set_show_back(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn stack(&self) -> gtk::Stack {
        unsafe { from_glib_none(ffi::he_side_bar_get_stack(self.as_ref().to_glib_none().0)) }
    }

    fn set_stack(&self, value: &gtk::Stack) {
        unsafe {
            ffi::he_side_bar_set_stack(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn scroller(&self) -> gtk::ScrolledWindow {
        unsafe {
            from_glib_none(ffi::he_side_bar_get_scroller(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_scroller(&self, value: &gtk::ScrolledWindow) {
        unsafe {
            ffi::he_side_bar_set_scroller(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn has_margins(&self) -> bool {
        unsafe {
            from_glib(ffi::he_side_bar_get_has_margins(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_has_margins(&self, value: bool) {
        unsafe {
            ffi::he_side_bar_set_has_margins(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_titlewidget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_titlewidget_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::titlewidget\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_titlewidget_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_subtitle_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::subtitle\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_subtitle_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_show_buttons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_buttons_trampoline<
            P: IsA<SideBar>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-buttons\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_buttons_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_show_back_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_back_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::show-back\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_show_back_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stack_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stack\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stack_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_scroller_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scroller_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scroller\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scroller_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_has_margins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_margins_trampoline<P: IsA<SideBar>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeSideBar,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SideBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-margins\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_margins_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SideBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SideBar")
    }
}
