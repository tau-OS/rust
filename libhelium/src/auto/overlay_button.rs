// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{Bin, Colors, OverlayButtonAlignment, OverlayButtonSize, OverlayButtonTypeButton};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeOverlayButton")]
    pub struct OverlayButton(Object<ffi::HeOverlayButton, ffi::HeOverlayButtonClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_overlay_button_get_type(),
    }
}

impl OverlayButton {
    pub const NONE: Option<&'static OverlayButton> = None;

    #[doc(alias = "he_overlay_button_new")]
    pub fn new(icon: &str, label: Option<&str>, secondary_icon: Option<&str>) -> OverlayButton {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_overlay_button_new(
                icon.to_glib_none().0,
                label.to_glib_none().0,
                secondary_icon.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`OverlayButton`] objects.
    ///
    /// This method returns an instance of [`OverlayButtonBuilder`](crate::builders::OverlayButtonBuilder) which can be used to create [`OverlayButton`] objects.
    pub fn builder() -> OverlayButtonBuilder {
        OverlayButtonBuilder::new()
    }
}

impl Default for OverlayButton {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`OverlayButton`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct OverlayButtonBuilder {
    builder: glib::object::ObjectBuilder<'static, OverlayButton>,
}

impl OverlayButtonBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn size(self, size: OverlayButtonSize) -> Self {
        Self {
            builder: self.builder.property("size", size),
        }
    }

    pub fn typeb(self, typeb: OverlayButtonTypeButton) -> Self {
        Self {
            builder: self.builder.property("typeb", typeb),
        }
    }

    pub fn typeb2(self, typeb2: OverlayButtonTypeButton) -> Self {
        Self {
            builder: self.builder.property("typeb2", typeb2),
        }
    }

    pub fn color(self, color: Colors) -> Self {
        Self {
            builder: self.builder.property("color", color),
        }
    }

    pub fn secondary_color(self, secondary_color: Colors) -> Self {
        Self {
            builder: self.builder.property("secondary-color", secondary_color),
        }
    }

    pub fn secondary_icon(self, secondary_icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("secondary-icon", secondary_icon.into()),
        }
    }

    pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon", icon.into()),
        }
    }

    pub fn label(self, label: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("label", label.into()),
        }
    }

    pub fn primary_tooltip(self, primary_tooltip: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("primary-tooltip", primary_tooltip.into()),
        }
    }

    pub fn secondary_tooltip(self, secondary_tooltip: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("secondary-tooltip", secondary_tooltip.into()),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn alignment(self, alignment: OverlayButtonAlignment) -> Self {
        Self {
            builder: self.builder.property("alignment", alignment),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    // rustdoc-stripper-ignore-next
    /// Build the [`OverlayButton`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> OverlayButton {
        self.builder.build()
    }
}

pub trait OverlayButtonExt: 'static {
    #[doc(alias = "he_overlay_button_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> OverlayButtonSize;

    #[doc(alias = "he_overlay_button_set_size")]
    fn set_size(&self, value: OverlayButtonSize);

    #[doc(alias = "he_overlay_button_get_typeb")]
    #[doc(alias = "get_typeb")]
    fn typeb(&self) -> OverlayButtonTypeButton;

    #[doc(alias = "he_overlay_button_set_typeb")]
    fn set_typeb(&self, value: OverlayButtonTypeButton);

    #[doc(alias = "he_overlay_button_get_typeb2")]
    #[doc(alias = "get_typeb2")]
    fn typeb2(&self) -> OverlayButtonTypeButton;

    #[doc(alias = "he_overlay_button_set_typeb2")]
    fn set_typeb2(&self, value: OverlayButtonTypeButton);

    #[doc(alias = "he_overlay_button_get_color")]
    #[doc(alias = "get_color")]
    fn color(&self) -> Colors;

    #[doc(alias = "he_overlay_button_set_color")]
    fn set_color(&self, value: Colors);

    #[doc(alias = "he_overlay_button_get_secondary_color")]
    #[doc(alias = "get_secondary_color")]
    fn secondary_color(&self) -> Colors;

    #[doc(alias = "he_overlay_button_set_secondary_color")]
    fn set_secondary_color(&self, value: Colors);

    #[doc(alias = "he_overlay_button_get_secondary_icon")]
    #[doc(alias = "get_secondary_icon")]
    fn secondary_icon(&self) -> Option<glib::GString>;

    #[doc(alias = "he_overlay_button_set_secondary_icon")]
    fn set_secondary_icon(&self, value: Option<&str>);

    #[doc(alias = "he_overlay_button_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> glib::GString;

    #[doc(alias = "he_overlay_button_set_icon")]
    fn set_icon(&self, value: &str);

    #[doc(alias = "he_overlay_button_get_label")]
    #[doc(alias = "get_label")]
    fn label(&self) -> Option<glib::GString>;

    #[doc(alias = "he_overlay_button_set_label")]
    fn set_label(&self, value: Option<&str>);

    #[doc(alias = "he_overlay_button_get_primary_tooltip")]
    #[doc(alias = "get_primary_tooltip")]
    fn primary_tooltip(&self) -> glib::GString;

    #[doc(alias = "he_overlay_button_set_primary_tooltip")]
    fn set_primary_tooltip(&self, value: &str);

    #[doc(alias = "he_overlay_button_get_secondary_tooltip")]
    #[doc(alias = "get_secondary_tooltip")]
    fn secondary_tooltip(&self) -> glib::GString;

    #[doc(alias = "he_overlay_button_set_secondary_tooltip")]
    fn set_secondary_tooltip(&self, value: &str);

    #[doc(alias = "he_overlay_button_get_child")]
    #[doc(alias = "get_child")]
    fn child(&self) -> Option<gtk::Widget>;

    #[doc(alias = "he_overlay_button_set_child")]
    fn set_child(&self, value: Option<&impl IsA<gtk::Widget>>);

    #[doc(alias = "he_overlay_button_get_alignment")]
    #[doc(alias = "get_alignment")]
    fn alignment(&self) -> OverlayButtonAlignment;

    #[doc(alias = "he_overlay_button_set_alignment")]
    fn set_alignment(&self, value: OverlayButtonAlignment);

    #[doc(alias = "clicked")]
    fn connect_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secondary-clicked")]
    fn connect_secondary_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "typeb")]
    fn connect_typeb_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "typeb2")]
    fn connect_typeb2_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "color")]
    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secondary-color")]
    fn connect_secondary_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secondary-icon")]
    fn connect_secondary_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "label")]
    fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "primary-tooltip")]
    fn connect_primary_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secondary-tooltip")]
    fn connect_secondary_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "alignment")]
    fn connect_alignment_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<OverlayButton>> OverlayButtonExt for O {
    fn size(&self) -> OverlayButtonSize {
        unsafe {
            from_glib(ffi::he_overlay_button_get_size(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_size(&self, value: OverlayButtonSize) {
        unsafe {
            ffi::he_overlay_button_set_size(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn typeb(&self) -> OverlayButtonTypeButton {
        unsafe {
            from_glib(ffi::he_overlay_button_get_typeb(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_typeb(&self, value: OverlayButtonTypeButton) {
        unsafe {
            ffi::he_overlay_button_set_typeb(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn typeb2(&self) -> OverlayButtonTypeButton {
        unsafe {
            from_glib(ffi::he_overlay_button_get_typeb2(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_typeb2(&self, value: OverlayButtonTypeButton) {
        unsafe {
            ffi::he_overlay_button_set_typeb2(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn color(&self) -> Colors {
        unsafe {
            from_glib(ffi::he_overlay_button_get_color(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_color(&self, value: Colors) {
        unsafe {
            ffi::he_overlay_button_set_color(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn secondary_color(&self) -> Colors {
        unsafe {
            from_glib(ffi::he_overlay_button_get_secondary_color(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_secondary_color(&self, value: Colors) {
        unsafe {
            ffi::he_overlay_button_set_secondary_color(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    fn secondary_icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::he_overlay_button_get_secondary_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_secondary_icon(&self, value: Option<&str>) {
        unsafe {
            ffi::he_overlay_button_set_secondary_icon(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn icon(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::he_overlay_button_get_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::he_overlay_button_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::he_overlay_button_get_label(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_label(&self, value: Option<&str>) {
        unsafe {
            ffi::he_overlay_button_set_label(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn primary_tooltip(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::he_overlay_button_get_primary_tooltip(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_primary_tooltip(&self, value: &str) {
        unsafe {
            ffi::he_overlay_button_set_primary_tooltip(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn secondary_tooltip(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::he_overlay_button_get_secondary_tooltip(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_secondary_tooltip(&self, value: &str) {
        unsafe {
            ffi::he_overlay_button_set_secondary_tooltip(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn child(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::he_overlay_button_get_child(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_child(&self, value: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::he_overlay_button_set_child(
                self.as_ref().to_glib_none().0,
                value.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn alignment(&self) -> OverlayButtonAlignment {
        unsafe {
            from_glib(ffi::he_overlay_button_get_alignment(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_alignment(&self, value: OverlayButtonAlignment) {
        unsafe {
            ffi::he_overlay_button_set_alignment(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn connect_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn clicked_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"clicked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    clicked_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secondary_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn secondary_clicked_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"secondary-clicked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    secondary_clicked_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_size_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_typeb_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_typeb_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::typeb\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_typeb_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_typeb2_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_typeb2_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::typeb2\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_typeb2_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secondary_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_color_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secondary_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_icon_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<P: IsA<OverlayButton>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_label_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_primary_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_tooltip_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secondary_tooltip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_tooltip_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-tooltip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_tooltip_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_alignment_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_alignment_trampoline<
            P: IsA<OverlayButton>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeOverlayButton,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(OverlayButton::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::alignment\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_alignment_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for OverlayButton {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("OverlayButton")
    }
}
