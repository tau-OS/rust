// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{AboutWindowLicenses, Colors, Window};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem, mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeAboutWindow")]
    pub struct AboutWindow(Object<ffi::HeAboutWindow, ffi::HeAboutWindowClass>) @extends Window, gtk::Window, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Native, gtk::Root, gtk::ShortcutManager;

    match fn {
        type_ => || ffi::he_about_window_get_type(),
    }
}

impl AboutWindow {
    pub const NONE: Option<&'static AboutWindow> = None;

    #[doc(alias = "he_about_window_new")]
    pub fn new(
        parent: &impl IsA<gtk::Window>,
        app_name: &str,
        app_id: &str,
        version: &str,
        icon: &str,
        translate_url: Option<&str>,
        issue_url: Option<&str>,
        more_info_url: Option<&str>,
        translators: &[&str],
        developers: &[&str],
        copyright_year: i32,
        license: AboutWindowLicenses,
        color: Colors,
    ) -> AboutWindow {
        assert_initialized_main_thread!();
        let translators_length1 = translators.len() as _;
        let developers_length1 = developers.len() as _;
        unsafe {
            from_glib_none(ffi::he_about_window_new(
                parent.as_ref().to_glib_none().0,
                app_name.to_glib_none().0,
                app_id.to_glib_none().0,
                version.to_glib_none().0,
                icon.to_glib_none().0,
                translate_url.to_glib_none().0,
                issue_url.to_glib_none().0,
                more_info_url.to_glib_none().0,
                translators.to_glib_none().0,
                translators_length1,
                developers.to_glib_none().0,
                developers_length1,
                copyright_year,
                license.into_glib(),
                color.into_glib(),
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`AboutWindow`] objects.
    ///
    /// This method returns an instance of [`AboutWindowBuilder`](crate::builders::AboutWindowBuilder) which can be used to create [`AboutWindow`] objects.
    pub fn builder() -> AboutWindowBuilder {
        AboutWindowBuilder::default()
    }
}

impl Default for AboutWindow {
    fn default() -> Self {
        glib::object::Object::new::<Self>(&[])
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`AboutWindow`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct AboutWindowBuilder {
    color: Option<Colors>,
    license: Option<AboutWindowLicenses>,
    version: Option<String>,
    app_name: Option<String>,
    icon: Option<String>,
    translator_names: Option<Vec<String>>,
    developer_names: Option<Vec<String>>,
    copyright_year: Option<i32>,
    app_id: Option<String>,
    translate_url: Option<String>,
    issue_url: Option<String>,
    more_info_url: Option<String>,
    parent: Option<gtk::Window>,
    modal: Option<bool>,
    has_title: Option<bool>,
    has_back_button: Option<bool>,
    application: Option<gtk::Application>,
    child: Option<gtk::Widget>,
    decorated: Option<bool>,
    default_height: Option<i32>,
    default_widget: Option<gtk::Widget>,
    default_width: Option<i32>,
    deletable: Option<bool>,
    destroy_with_parent: Option<bool>,
    //display: /*Unknown type*/,
    focus_visible: Option<bool>,
    focus_widget: Option<gtk::Widget>,
    fullscreened: Option<bool>,
    #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_2")))]
    handle_menubar_accel: Option<bool>,
    hide_on_close: Option<bool>,
    icon_name: Option<String>,
    maximized: Option<bool>,
    mnemonics_visible: Option<bool>,
    resizable: Option<bool>,
    startup_id: Option<String>,
    title: Option<String>,
    #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_6")))]
    titlebar: Option<gtk::Widget>,
    transient_for: Option<gtk::Window>,
    can_focus: Option<bool>,
    can_target: Option<bool>,
    css_classes: Option<Vec<String>>,
    css_name: Option<String>,
    //cursor: /*Unknown type*/,
    focus_on_click: Option<bool>,
    focusable: Option<bool>,
    halign: Option<gtk::Align>,
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    hexpand: Option<bool>,
    hexpand_set: Option<bool>,
    //layout-manager: /*Unknown type*/,
    margin_bottom: Option<i32>,
    margin_end: Option<i32>,
    margin_start: Option<i32>,
    margin_top: Option<i32>,
    name: Option<String>,
    opacity: Option<f64>,
    //overflow: /*Unknown type*/,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    tooltip_markup: Option<String>,
    tooltip_text: Option<String>,
    valign: Option<gtk::Align>,
    vexpand: Option<bool>,
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
    //accessible-role: /*Unknown type*/,
}

impl AboutWindowBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`AboutWindowBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`AboutWindow`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> AboutWindow {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref color) = self.color {
            properties.push(("color", color));
        }
        if let Some(ref license) = self.license {
            properties.push(("license", license));
        }
        if let Some(ref version) = self.version {
            properties.push(("version", version));
        }
        if let Some(ref app_name) = self.app_name {
            properties.push(("app-name", app_name));
        }
        if let Some(ref icon) = self.icon {
            properties.push(("icon", icon));
        }
        if let Some(ref translator_names) = self.translator_names {
            properties.push(("translator-names", translator_names));
        }
        if let Some(ref developer_names) = self.developer_names {
            properties.push(("developer-names", developer_names));
        }
        if let Some(ref copyright_year) = self.copyright_year {
            properties.push(("copyright-year", copyright_year));
        }
        if let Some(ref app_id) = self.app_id {
            properties.push(("app-id", app_id));
        }
        if let Some(ref translate_url) = self.translate_url {
            properties.push(("translate-url", translate_url));
        }
        if let Some(ref issue_url) = self.issue_url {
            properties.push(("issue-url", issue_url));
        }
        if let Some(ref more_info_url) = self.more_info_url {
            properties.push(("more-info-url", more_info_url));
        }
        if let Some(ref parent) = self.parent {
            properties.push(("parent", parent));
        }
        if let Some(ref modal) = self.modal {
            properties.push(("modal", modal));
        }
        if let Some(ref has_title) = self.has_title {
            properties.push(("has-title", has_title));
        }
        if let Some(ref has_back_button) = self.has_back_button {
            properties.push(("has-back-button", has_back_button));
        }
        if let Some(ref application) = self.application {
            properties.push(("application", application));
        }
        if let Some(ref child) = self.child {
            properties.push(("child", child));
        }
        if let Some(ref decorated) = self.decorated {
            properties.push(("decorated", decorated));
        }
        if let Some(ref default_height) = self.default_height {
            properties.push(("default-height", default_height));
        }
        if let Some(ref default_widget) = self.default_widget {
            properties.push(("default-widget", default_widget));
        }
        if let Some(ref default_width) = self.default_width {
            properties.push(("default-width", default_width));
        }
        if let Some(ref deletable) = self.deletable {
            properties.push(("deletable", deletable));
        }
        if let Some(ref destroy_with_parent) = self.destroy_with_parent {
            properties.push(("destroy-with-parent", destroy_with_parent));
        }
        if let Some(ref focus_visible) = self.focus_visible {
            properties.push(("focus-visible", focus_visible));
        }
        if let Some(ref focus_widget) = self.focus_widget {
            properties.push(("focus-widget", focus_widget));
        }
        if let Some(ref fullscreened) = self.fullscreened {
            properties.push(("fullscreened", fullscreened));
        }
        #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
        if let Some(ref handle_menubar_accel) = self.handle_menubar_accel {
            properties.push(("handle-menubar-accel", handle_menubar_accel));
        }
        if let Some(ref hide_on_close) = self.hide_on_close {
            properties.push(("hide-on-close", hide_on_close));
        }
        if let Some(ref icon_name) = self.icon_name {
            properties.push(("icon-name", icon_name));
        }
        if let Some(ref maximized) = self.maximized {
            properties.push(("maximized", maximized));
        }
        if let Some(ref mnemonics_visible) = self.mnemonics_visible {
            properties.push(("mnemonics-visible", mnemonics_visible));
        }
        if let Some(ref resizable) = self.resizable {
            properties.push(("resizable", resizable));
        }
        if let Some(ref startup_id) = self.startup_id {
            properties.push(("startup-id", startup_id));
        }
        if let Some(ref title) = self.title {
            properties.push(("title", title));
        }
        #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
        if let Some(ref titlebar) = self.titlebar {
            properties.push(("titlebar", titlebar));
        }
        if let Some(ref transient_for) = self.transient_for {
            properties.push(("transient-for", transient_for));
        }
        if let Some(ref can_focus) = self.can_focus {
            properties.push(("can-focus", can_focus));
        }
        if let Some(ref can_target) = self.can_target {
            properties.push(("can-target", can_target));
        }
        if let Some(ref css_classes) = self.css_classes {
            properties.push(("css-classes", css_classes));
        }
        if let Some(ref css_name) = self.css_name {
            properties.push(("css-name", css_name));
        }
        if let Some(ref focus_on_click) = self.focus_on_click {
            properties.push(("focus-on-click", focus_on_click));
        }
        if let Some(ref focusable) = self.focusable {
            properties.push(("focusable", focusable));
        }
        if let Some(ref halign) = self.halign {
            properties.push(("halign", halign));
        }
        if let Some(ref has_tooltip) = self.has_tooltip {
            properties.push(("has-tooltip", has_tooltip));
        }
        if let Some(ref height_request) = self.height_request {
            properties.push(("height-request", height_request));
        }
        if let Some(ref hexpand) = self.hexpand {
            properties.push(("hexpand", hexpand));
        }
        if let Some(ref hexpand_set) = self.hexpand_set {
            properties.push(("hexpand-set", hexpand_set));
        }
        if let Some(ref margin_bottom) = self.margin_bottom {
            properties.push(("margin-bottom", margin_bottom));
        }
        if let Some(ref margin_end) = self.margin_end {
            properties.push(("margin-end", margin_end));
        }
        if let Some(ref margin_start) = self.margin_start {
            properties.push(("margin-start", margin_start));
        }
        if let Some(ref margin_top) = self.margin_top {
            properties.push(("margin-top", margin_top));
        }
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        if let Some(ref opacity) = self.opacity {
            properties.push(("opacity", opacity));
        }
        if let Some(ref receives_default) = self.receives_default {
            properties.push(("receives-default", receives_default));
        }
        if let Some(ref sensitive) = self.sensitive {
            properties.push(("sensitive", sensitive));
        }
        if let Some(ref tooltip_markup) = self.tooltip_markup {
            properties.push(("tooltip-markup", tooltip_markup));
        }
        if let Some(ref tooltip_text) = self.tooltip_text {
            properties.push(("tooltip-text", tooltip_text));
        }
        if let Some(ref valign) = self.valign {
            properties.push(("valign", valign));
        }
        if let Some(ref vexpand) = self.vexpand {
            properties.push(("vexpand", vexpand));
        }
        if let Some(ref vexpand_set) = self.vexpand_set {
            properties.push(("vexpand-set", vexpand_set));
        }
        if let Some(ref visible) = self.visible {
            properties.push(("visible", visible));
        }
        if let Some(ref width_request) = self.width_request {
            properties.push(("width-request", width_request));
        }
        glib::Object::new::<AboutWindow>(&properties)
    }

    pub fn color(mut self, color: Colors) -> Self {
        self.color = Some(color);
        self
    }

    pub fn license(mut self, license: AboutWindowLicenses) -> Self {
        self.license = Some(license);
        self
    }

    pub fn version(mut self, version: &str) -> Self {
        self.version = Some(version.to_string());
        self
    }

    pub fn app_name(mut self, app_name: &str) -> Self {
        self.app_name = Some(app_name.to_string());
        self
    }

    pub fn icon(mut self, icon: &str) -> Self {
        self.icon = Some(icon.to_string());
        self
    }

    pub fn translator_names(mut self, translator_names: Vec<String>) -> Self {
        self.translator_names = Some(translator_names);
        self
    }

    pub fn developer_names(mut self, developer_names: Vec<String>) -> Self {
        self.developer_names = Some(developer_names);
        self
    }

    pub fn copyright_year(mut self, copyright_year: i32) -> Self {
        self.copyright_year = Some(copyright_year);
        self
    }

    pub fn app_id(mut self, app_id: &str) -> Self {
        self.app_id = Some(app_id.to_string());
        self
    }

    pub fn translate_url(mut self, translate_url: &str) -> Self {
        self.translate_url = Some(translate_url.to_string());
        self
    }

    pub fn issue_url(mut self, issue_url: &str) -> Self {
        self.issue_url = Some(issue_url.to_string());
        self
    }

    pub fn more_info_url(mut self, more_info_url: &str) -> Self {
        self.more_info_url = Some(more_info_url.to_string());
        self
    }

    pub fn parent(mut self, parent: &impl IsA<gtk::Window>) -> Self {
        self.parent = Some(parent.clone().upcast());
        self
    }

    pub fn modal(mut self, modal: bool) -> Self {
        self.modal = Some(modal);
        self
    }

    pub fn has_title(mut self, has_title: bool) -> Self {
        self.has_title = Some(has_title);
        self
    }

    pub fn has_back_button(mut self, has_back_button: bool) -> Self {
        self.has_back_button = Some(has_back_button);
        self
    }

    pub fn application(mut self, application: &impl IsA<gtk::Application>) -> Self {
        self.application = Some(application.clone().upcast());
        self
    }

    pub fn child(mut self, child: &impl IsA<gtk::Widget>) -> Self {
        self.child = Some(child.clone().upcast());
        self
    }

    pub fn decorated(mut self, decorated: bool) -> Self {
        self.decorated = Some(decorated);
        self
    }

    pub fn default_height(mut self, default_height: i32) -> Self {
        self.default_height = Some(default_height);
        self
    }

    pub fn default_widget(mut self, default_widget: &impl IsA<gtk::Widget>) -> Self {
        self.default_widget = Some(default_widget.clone().upcast());
        self
    }

    pub fn default_width(mut self, default_width: i32) -> Self {
        self.default_width = Some(default_width);
        self
    }

    pub fn deletable(mut self, deletable: bool) -> Self {
        self.deletable = Some(deletable);
        self
    }

    pub fn destroy_with_parent(mut self, destroy_with_parent: bool) -> Self {
        self.destroy_with_parent = Some(destroy_with_parent);
        self
    }

    pub fn focus_visible(mut self, focus_visible: bool) -> Self {
        self.focus_visible = Some(focus_visible);
        self
    }

    pub fn focus_widget(mut self, focus_widget: &impl IsA<gtk::Widget>) -> Self {
        self.focus_widget = Some(focus_widget.clone().upcast());
        self
    }

    pub fn fullscreened(mut self, fullscreened: bool) -> Self {
        self.fullscreened = Some(fullscreened);
        self
    }

    #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_2")))]
    pub fn handle_menubar_accel(mut self, handle_menubar_accel: bool) -> Self {
        self.handle_menubar_accel = Some(handle_menubar_accel);
        self
    }

    pub fn hide_on_close(mut self, hide_on_close: bool) -> Self {
        self.hide_on_close = Some(hide_on_close);
        self
    }

    pub fn icon_name(mut self, icon_name: &str) -> Self {
        self.icon_name = Some(icon_name.to_string());
        self
    }

    pub fn maximized(mut self, maximized: bool) -> Self {
        self.maximized = Some(maximized);
        self
    }

    pub fn mnemonics_visible(mut self, mnemonics_visible: bool) -> Self {
        self.mnemonics_visible = Some(mnemonics_visible);
        self
    }

    pub fn resizable(mut self, resizable: bool) -> Self {
        self.resizable = Some(resizable);
        self
    }

    pub fn startup_id(mut self, startup_id: &str) -> Self {
        self.startup_id = Some(startup_id.to_string());
        self
    }

    pub fn title(mut self, title: &str) -> Self {
        self.title = Some(title.to_string());
        self
    }

    #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_6")))]
    pub fn titlebar(mut self, titlebar: &impl IsA<gtk::Widget>) -> Self {
        self.titlebar = Some(titlebar.clone().upcast());
        self
    }

    pub fn transient_for(mut self, transient_for: &impl IsA<gtk::Window>) -> Self {
        self.transient_for = Some(transient_for.clone().upcast());
        self
    }

    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    pub fn can_target(mut self, can_target: bool) -> Self {
        self.can_target = Some(can_target);
        self
    }

    pub fn css_classes(mut self, css_classes: Vec<String>) -> Self {
        self.css_classes = Some(css_classes);
        self
    }

    pub fn css_name(mut self, css_name: &str) -> Self {
        self.css_name = Some(css_name.to_string());
        self
    }

    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    pub fn focusable(mut self, focusable: bool) -> Self {
        self.focusable = Some(focusable);
        self
    }

    pub fn halign(mut self, halign: gtk::Align) -> Self {
        self.halign = Some(halign);
        self
    }

    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    pub fn valign(mut self, valign: gtk::Align) -> Self {
        self.valign = Some(valign);
        self
    }

    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }
}

pub trait AboutWindowExt: 'static {
    #[doc(alias = "he_about_window_get_color")]
    #[doc(alias = "get_color")]
    fn color(&self) -> Colors;

    #[doc(alias = "he_about_window_set_color")]
    fn set_color(&self, value: Colors);

    #[doc(alias = "he_about_window_get_license")]
    #[doc(alias = "get_license")]
    fn license(&self) -> AboutWindowLicenses;

    #[doc(alias = "he_about_window_set_license")]
    fn set_license(&self, value: AboutWindowLicenses);

    #[doc(alias = "he_about_window_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> glib::GString;

    #[doc(alias = "he_about_window_set_version")]
    fn set_version(&self, value: &str);

    #[doc(alias = "he_about_window_get_app_name")]
    #[doc(alias = "get_app_name")]
    fn app_name(&self) -> glib::GString;

    #[doc(alias = "he_about_window_set_app_name")]
    fn set_app_name(&self, value: &str);

    #[doc(alias = "he_about_window_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> glib::GString;

    #[doc(alias = "he_about_window_set_icon")]
    fn set_icon(&self, value: &str);

    #[doc(alias = "he_about_window_get_translator_names")]
    #[doc(alias = "get_translator_names")]
    fn translator_names(&self) -> Vec<glib::GString>;

    #[doc(alias = "he_about_window_set_translator_names")]
    fn set_translator_names(&self, value: &[&str]);

    #[doc(alias = "he_about_window_get_developer_names")]
    #[doc(alias = "get_developer_names")]
    fn developer_names(&self) -> Vec<glib::GString>;

    #[doc(alias = "he_about_window_set_developer_names")]
    fn set_developer_names(&self, value: &[&str]);

    #[doc(alias = "he_about_window_get_copyright_year")]
    #[doc(alias = "get_copyright_year")]
    fn copyright_year(&self) -> i32;

    #[doc(alias = "he_about_window_set_copyright_year")]
    fn set_copyright_year(&self, value: i32);

    #[doc(alias = "he_about_window_get_app_id")]
    #[doc(alias = "get_app_id")]
    fn app_id(&self) -> glib::GString;

    #[doc(alias = "he_about_window_set_app_id")]
    fn set_app_id(&self, value: &str);

    #[doc(alias = "he_about_window_get_translate_url")]
    #[doc(alias = "get_translate_url")]
    fn translate_url(&self) -> Option<glib::GString>;

    #[doc(alias = "he_about_window_set_translate_url")]
    fn set_translate_url(&self, value: Option<&str>);

    #[doc(alias = "he_about_window_get_issue_url")]
    #[doc(alias = "get_issue_url")]
    fn issue_url(&self) -> Option<glib::GString>;

    #[doc(alias = "he_about_window_set_issue_url")]
    fn set_issue_url(&self, value: Option<&str>);

    #[doc(alias = "he_about_window_get_more_info_url")]
    #[doc(alias = "get_more_info_url")]
    fn more_info_url(&self) -> Option<glib::GString>;

    #[doc(alias = "he_about_window_set_more_info_url")]
    fn set_more_info_url(&self, value: Option<&str>);

    #[doc(alias = "color")]
    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "license")]
    fn connect_license_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "version")]
    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "app-name")]
    fn connect_app_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "translator-names")]
    fn connect_translator_names_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "developer-names")]
    fn connect_developer_names_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "copyright-year")]
    fn connect_copyright_year_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "app-id")]
    fn connect_app_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "translate-url")]
    fn connect_translate_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "issue-url")]
    fn connect_issue_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "more-info-url")]
    fn connect_more_info_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<AboutWindow>> AboutWindowExt for O {
    fn color(&self) -> Colors {
        unsafe {
            from_glib(ffi::he_about_window_get_color(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_color(&self, value: Colors) {
        unsafe {
            ffi::he_about_window_set_color(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn license(&self) -> AboutWindowLicenses {
        unsafe {
            from_glib(ffi::he_about_window_get_license(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_license(&self, value: AboutWindowLicenses) {
        unsafe {
            ffi::he_about_window_set_license(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn version(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_about_window_get_version(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_version(&self, value: &str) {
        unsafe {
            ffi::he_about_window_set_version(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn app_name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_about_window_get_app_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_app_name(&self, value: &str) {
        unsafe {
            ffi::he_about_window_set_app_name(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn icon(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_about_window_get_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::he_about_window_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn translator_names(&self) -> Vec<glib::GString> {
        unsafe {
            let mut result_length1 = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                ffi::he_about_window_get_translator_names(
                    self.as_ref().to_glib_none().0,
                    result_length1.as_mut_ptr(),
                ),
                result_length1.assume_init() as _,
            );
            ret
        }
    }

    fn set_translator_names(&self, value: &[&str]) {
        let value_length1 = value.len() as _;
        unsafe {
            ffi::he_about_window_set_translator_names(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
                value_length1,
            );
        }
    }

    fn developer_names(&self) -> Vec<glib::GString> {
        unsafe {
            let mut result_length1 = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                ffi::he_about_window_get_developer_names(
                    self.as_ref().to_glib_none().0,
                    result_length1.as_mut_ptr(),
                ),
                result_length1.assume_init() as _,
            );
            ret
        }
    }

    fn set_developer_names(&self, value: &[&str]) {
        let value_length1 = value.len() as _;
        unsafe {
            ffi::he_about_window_set_developer_names(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
                value_length1,
            );
        }
    }

    fn copyright_year(&self) -> i32 {
        unsafe { ffi::he_about_window_get_copyright_year(self.as_ref().to_glib_none().0) }
    }

    fn set_copyright_year(&self, value: i32) {
        unsafe {
            ffi::he_about_window_set_copyright_year(self.as_ref().to_glib_none().0, value);
        }
    }

    fn app_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_about_window_get_app_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_app_id(&self, value: &str) {
        unsafe {
            ffi::he_about_window_set_app_id(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn translate_url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::he_about_window_get_translate_url(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_translate_url(&self, value: Option<&str>) {
        unsafe {
            ffi::he_about_window_set_translate_url(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn issue_url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::he_about_window_get_issue_url(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_issue_url(&self, value: Option<&str>) {
        unsafe {
            ffi::he_about_window_set_issue_url(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn more_info_url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::he_about_window_get_more_info_url(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_more_info_url(&self, value: Option<&str>) {
        unsafe {
            ffi::he_about_window_set_more_info_url(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn connect_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_trampoline<P: IsA<AboutWindow>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_color_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_license_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_trampoline<P: IsA<AboutWindow>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::license\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_license_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<P: IsA<AboutWindow>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_version_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_app_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_name_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<AboutWindow>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_translator_names_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_translator_names_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::translator-names\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_translator_names_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_developer_names_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_developer_names_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::developer-names\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_developer_names_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_copyright_year_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_copyright_year_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::copyright-year\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_copyright_year_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_app_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_id_trampoline<P: IsA<AboutWindow>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_translate_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_translate_url_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::translate-url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_translate_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_issue_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_issue_url_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::issue-url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_issue_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_more_info_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_more_info_url_trampoline<
            P: IsA<AboutWindow>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeAboutWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(AboutWindow::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::more-info-url\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_more_info_url_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AboutWindow {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AboutWindow")
    }
}
