// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{Bin, Button};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeContentBlock")]
    pub struct ContentBlock(Object<ffi::HeContentBlock, ffi::HeContentBlockClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_content_block_get_type(),
    }
}

impl ContentBlock {
    pub const NONE: Option<&'static ContentBlock> = None;

    #[doc(alias = "he_content_block_new")]
    pub fn new(
        title: &str,
        subtitle: &str,
        icon: &str,
        primary_button: &impl IsA<Button>,
        secondary_button: &impl IsA<Button>,
    ) -> ContentBlock {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::he_content_block_new(
                title.to_glib_none().0,
                subtitle.to_glib_none().0,
                icon.to_glib_none().0,
                primary_button.as_ref().to_glib_none().0,
                secondary_button.as_ref().to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`ContentBlock`] objects.
    ///
    /// This method returns an instance of [`ContentBlockBuilder`](crate::builders::ContentBlockBuilder) which can be used to create [`ContentBlock`] objects.
    pub fn builder() -> ContentBlockBuilder {
        ContentBlockBuilder::new()
    }
}

impl Default for ContentBlock {
    fn default() -> Self {
        glib::object::Object::new_default::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`ContentBlock`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ContentBlockBuilder {
    builder: glib::object::ObjectBuilder<'static, ContentBlock>,
}

impl ContentBlockBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn title(self, title: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("title", title.into()),
        }
    }

    pub fn subtitle(self, subtitle: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("subtitle", subtitle.into()),
        }
    }

    pub fn icon(self, icon: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("icon", icon.into()),
        }
    }

    pub fn gicon(self, gicon: &impl IsA<gio::Icon>) -> Self {
        Self {
            builder: self.builder.property("gicon", gicon.clone().upcast()),
        }
    }

    pub fn secondary_button(self, secondary_button: &impl IsA<Button>) -> Self {
        Self {
            builder: self
                .builder
                .property("secondary-button", secondary_button.clone().upcast()),
        }
    }

    pub fn primary_button(self, primary_button: &impl IsA<Button>) -> Self {
        Self {
            builder: self
                .builder
                .property("primary-button", primary_button.clone().upcast()),
        }
    }

    pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("child", child.clone().upcast()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    pub fn cursor(self, cursor: /*Ignored*/ &gdk::Cursor) -> Self {
        Self {
            builder: self.builder.property("cursor", cursor),
        }
    }

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/ gtk::LayoutManager>) -> Self {
        Self {
            builder: self
                .builder
                .property("layout-manager", layout_manager.clone().upcast()),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    pub fn overflow(self, overflow: /*Ignored*/ gtk::Overflow) -> Self {
        Self {
            builder: self.builder.property("overflow", overflow),
        }
    }

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    pub fn accessible_role(self, accessible_role: /*Ignored*/ gtk::AccessibleRole) -> Self {
        Self {
            builder: self.builder.property("accessible-role", accessible_role),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`ContentBlock`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ContentBlock {
        self.builder.build()
    }
}

pub trait ContentBlockExt: 'static {
    #[doc(alias = "he_content_block_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> glib::GString;

    #[doc(alias = "he_content_block_set_title")]
    fn set_title(&self, value: &str);

    #[doc(alias = "he_content_block_get_subtitle")]
    #[doc(alias = "get_subtitle")]
    fn subtitle(&self) -> glib::GString;

    #[doc(alias = "he_content_block_set_subtitle")]
    fn set_subtitle(&self, value: &str);

    #[doc(alias = "he_content_block_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> glib::GString;

    #[doc(alias = "he_content_block_set_icon")]
    fn set_icon(&self, value: &str);

    #[doc(alias = "he_content_block_set_gicon")]
    fn set_gicon(&self, value: &impl IsA<gio::Icon>);

    #[doc(alias = "he_content_block_get_secondary_button")]
    #[doc(alias = "get_secondary_button")]
    fn secondary_button(&self) -> Button;

    #[doc(alias = "he_content_block_set_secondary_button")]
    fn set_secondary_button(&self, value: &impl IsA<Button>);

    #[doc(alias = "he_content_block_get_primary_button")]
    #[doc(alias = "get_primary_button")]
    fn primary_button(&self) -> Button;

    #[doc(alias = "he_content_block_set_primary_button")]
    fn set_primary_button(&self, value: &impl IsA<Button>);

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "subtitle")]
    fn connect_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "gicon")]
    fn connect_gicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secondary-button")]
    fn connect_secondary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "primary-button")]
    fn connect_primary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ContentBlock>> ContentBlockExt for O {
    fn title(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_content_block_get_title(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::he_content_block_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn subtitle(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_content_block_get_subtitle(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_subtitle(&self, value: &str) {
        unsafe {
            ffi::he_content_block_set_subtitle(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    fn icon(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_content_block_get_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_icon(&self, value: &str) {
        unsafe {
            ffi::he_content_block_set_icon(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_gicon(&self, value: &impl IsA<gio::Icon>) {
        unsafe {
            ffi::he_content_block_set_gicon(
                self.as_ref().to_glib_none().0,
                value.as_ref().to_glib_none().0,
            );
        }
    }

    fn secondary_button(&self) -> Button {
        unsafe {
            from_glib_none(ffi::he_content_block_get_secondary_button(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_secondary_button(&self, value: &impl IsA<Button>) {
        unsafe {
            ffi::he_content_block_set_secondary_button(
                self.as_ref().to_glib_none().0,
                value.as_ref().to_glib_none().0,
            );
        }
    }

    fn primary_button(&self) -> Button {
        unsafe {
            from_glib_none(ffi::he_content_block_get_primary_button(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_primary_button(&self, value: &impl IsA<Button>) {
        unsafe {
            ffi::he_content_block_set_primary_button(
                self.as_ref().to_glib_none().0,
                value.as_ref().to_glib_none().0,
            );
        }
    }

    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<ContentBlock>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_subtitle_trampoline<
            P: IsA<ContentBlock>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::subtitle\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_subtitle_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<ContentBlock>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_gicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gicon_trampoline<P: IsA<ContentBlock>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::gicon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_gicon_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secondary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_button_trampoline<
            P: IsA<ContentBlock>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-button\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secondary_button_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_primary_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_button_trampoline<
            P: IsA<ContentBlock>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeContentBlock,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ContentBlock::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-button\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_button_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ContentBlock {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ContentBlock")
    }
}
