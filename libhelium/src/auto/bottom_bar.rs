// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{ffi,Bin,BottomBarPosition,Button};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "HeBottomBar")]
    pub struct BottomBar(Object<ffi::HeBottomBar, ffi::HeBottomBarClass>) @extends Bin, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_bottom_bar_get_type(),
    }
}

impl BottomBar {
        pub const NONE: Option<&'static BottomBar> = None;
    

    #[doc(alias = "he_bottom_bar_new_with_details")]
    pub fn with_details(title: &str, description: &str) -> BottomBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_bottom_bar_new_with_details(title.to_glib_none().0, description.to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_new")]
    pub fn new() -> BottomBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_bottom_bar_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`BottomBar`] objects.
            ///
            /// This method returns an instance of [`BottomBarBuilder`](crate::builders::BottomBarBuilder) which can be used to create [`BottomBar`] objects.
            pub fn builder() -> BottomBarBuilder {
                BottomBarBuilder::new()
            }
        
}

impl Default for BottomBar {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`BottomBar`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct BottomBarBuilder {
            builder: glib::object::ObjectBuilder<'static, BottomBar>,
        }

        impl BottomBarBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn title(self, title: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("title", title.into()), }
                        }

                            pub fn description(self, description: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("description", description.into()), }
                        }

                            pub fn menu_model(self, menu_model: &impl IsA<gio::MenuModel>) -> Self {
                            Self { builder: self.builder.property("menu-model", menu_model.clone().upcast()), }
                        }

                            pub fn collapse_actions(self, collapse_actions: bool) -> Self {
                            Self { builder: self.builder.property("collapse-actions", collapse_actions), }
                        }

                            pub fn child(self, child: &impl IsA<gtk::Widget>) -> Self {
                            Self { builder: self.builder.property("child", child.clone().upcast()), }
                        }

                            pub fn can_focus(self, can_focus: bool) -> Self {
                            Self { builder: self.builder.property("can-focus", can_focus), }
                        }

                            pub fn can_target(self, can_target: bool) -> Self {
                            Self { builder: self.builder.property("can-target", can_target), }
                        }

                            pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
                            Self { builder: self.builder.property("css-classes", css_classes.into()), }
                        }

                            pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("css-name", css_name.into()), }
                        }

                            //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
                        //    Self { builder: self.builder.property("cursor", cursor), }
                        //}

                            pub fn focus_on_click(self, focus_on_click: bool) -> Self {
                            Self { builder: self.builder.property("focus-on-click", focus_on_click), }
                        }

                            pub fn focusable(self, focusable: bool) -> Self {
                            Self { builder: self.builder.property("focusable", focusable), }
                        }

                            pub fn halign(self, halign: gtk::Align) -> Self {
                            Self { builder: self.builder.property("halign", halign), }
                        }

                            pub fn has_tooltip(self, has_tooltip: bool) -> Self {
                            Self { builder: self.builder.property("has-tooltip", has_tooltip), }
                        }

                            pub fn height_request(self, height_request: i32) -> Self {
                            Self { builder: self.builder.property("height-request", height_request), }
                        }

                            pub fn hexpand(self, hexpand: bool) -> Self {
                            Self { builder: self.builder.property("hexpand", hexpand), }
                        }

                            pub fn hexpand_set(self, hexpand_set: bool) -> Self {
                            Self { builder: self.builder.property("hexpand-set", hexpand_set), }
                        }

                            //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
                        //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
                        //}

                            pub fn margin_bottom(self, margin_bottom: i32) -> Self {
                            Self { builder: self.builder.property("margin-bottom", margin_bottom), }
                        }

                            pub fn margin_end(self, margin_end: i32) -> Self {
                            Self { builder: self.builder.property("margin-end", margin_end), }
                        }

                            pub fn margin_start(self, margin_start: i32) -> Self {
                            Self { builder: self.builder.property("margin-start", margin_start), }
                        }

                            pub fn margin_top(self, margin_top: i32) -> Self {
                            Self { builder: self.builder.property("margin-top", margin_top), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn opacity(self, opacity: f64) -> Self {
                            Self { builder: self.builder.property("opacity", opacity), }
                        }

                            //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
                        //    Self { builder: self.builder.property("overflow", overflow), }
                        //}

                            pub fn receives_default(self, receives_default: bool) -> Self {
                            Self { builder: self.builder.property("receives-default", receives_default), }
                        }

                            pub fn sensitive(self, sensitive: bool) -> Self {
                            Self { builder: self.builder.property("sensitive", sensitive), }
                        }

                            pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("tooltip-markup", tooltip_markup.into()), }
                        }

                            pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("tooltip-text", tooltip_text.into()), }
                        }

                            pub fn valign(self, valign: gtk::Align) -> Self {
                            Self { builder: self.builder.property("valign", valign), }
                        }

                            pub fn vexpand(self, vexpand: bool) -> Self {
                            Self { builder: self.builder.property("vexpand", vexpand), }
                        }

                            pub fn vexpand_set(self, vexpand_set: bool) -> Self {
                            Self { builder: self.builder.property("vexpand-set", vexpand_set), }
                        }

                            pub fn visible(self, visible: bool) -> Self {
                            Self { builder: self.builder.property("visible", visible), }
                        }

                            pub fn width_request(self, width_request: i32) -> Self {
                            Self { builder: self.builder.property("width-request", width_request), }
                        }

                            //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
                        //    Self { builder: self.builder.property("accessible-role", accessible_role), }
                        //}

    // rustdoc-stripper-ignore-next
    /// Build the [`BottomBar`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> BottomBar {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::BottomBar>> Sealed for T {}
}

pub trait BottomBarExt: IsA<BottomBar> + sealed::Sealed + 'static {
    #[doc(alias = "he_bottom_bar_append_button")]
    fn append_button(&self, icon: &impl IsA<Button>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_append_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    #[doc(alias = "he_bottom_bar_prepend_button")]
    fn prepend_button(&self, icon: &impl IsA<Button>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_prepend_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    #[doc(alias = "he_bottom_bar_remove_button")]
    fn remove_button(&self, icon: &impl IsA<Button>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_remove_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    #[doc(alias = "he_bottom_bar_insert_button_after")]
    fn insert_button_after(&self, icon: &impl IsA<Button>, after: &impl IsA<Button>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_insert_button_after(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, after.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    #[doc(alias = "he_bottom_bar_reorder_button_after")]
    fn reorder_button_after(&self, icon: &impl IsA<Button>, sibling: &impl IsA<Button>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_reorder_button_after(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, sibling.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    #[doc(alias = "he_bottom_bar_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_set_title")]
    fn set_title(&self, value: &str) {
        unsafe {
            ffi::he_bottom_bar_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_bottom_bar_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_description(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_set_description")]
    fn set_description(&self, value: &str) {
        unsafe {
            ffi::he_bottom_bar_set_description(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "he_bottom_bar_get_menu_model")]
    #[doc(alias = "get_menu_model")]
    fn menu_model(&self) -> gio::MenuModel {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_menu_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_set_menu_model")]
    fn set_menu_model(&self, value: &impl IsA<gio::MenuModel>) {
        unsafe {
            ffi::he_bottom_bar_set_menu_model(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "he_bottom_bar_get_collapse_actions")]
    #[doc(alias = "get_collapse_actions")]
    fn is_collapse_actions(&self) -> bool {
        unsafe {
            from_glib(ffi::he_bottom_bar_get_collapse_actions(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_set_collapse_actions")]
    fn set_collapse_actions(&self, value: bool) {
        unsafe {
            ffi::he_bottom_bar_set_collapse_actions(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::menu-model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_menu_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "collapse-actions")]
    fn connect_collapse_actions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_collapse_actions_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::collapse-actions\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_collapse_actions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<BottomBar>> BottomBarExt for O {}
