// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files
// DO NOT EDIT

use crate::{Bin,BottomBarPosition,IconicButton};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "HeBottomBar")]
    pub struct BottomBar(Object<ffi::HeBottomBar, ffi::HeBottomBarClass>) @extends Bin, gtk::Widget, gobject::InitiallyUnowned, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_bottom_bar_get_type(),
    }
}

impl BottomBar {
        pub const NONE: Option<&'static BottomBar> = None;
    

    #[doc(alias = "he_bottom_bar_new_with_details")]
    pub fn with_details(title: &str, description: &str) -> BottomBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_bottom_bar_new_with_details(title.to_glib_none().0, description.to_glib_none().0))
        }
    }

    #[doc(alias = "he_bottom_bar_new")]
    pub fn new() -> BottomBar {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::he_bottom_bar_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`BottomBar`] objects.
            ///
            /// This method returns an instance of [`BottomBarBuilder`](crate::builders::BottomBarBuilder) which can be used to create [`BottomBar`] objects.
            pub fn builder() -> BottomBarBuilder {
                BottomBarBuilder::default()
            }
        
}

impl Default for BottomBar {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`BottomBar`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct BottomBarBuilder {
    title: Option<String>,
    description: Option<String>,
    menu_model: Option<gio::MenuModel>,
    collapse_actions: Option<bool>,
    child: Option<gtk::Widget>,
    can_focus: Option<bool>,
    can_target: Option<bool>,
    css_classes: Option<Vec<String>>,
    css_name: Option<String>,
    //cursor: /*Unknown type*/,
    focus_on_click: Option<bool>,
    focusable: Option<bool>,
    halign: Option<gtk::Align>,
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    hexpand: Option<bool>,
    hexpand_set: Option<bool>,
    //layout-manager: /*Unknown type*/,
    margin_bottom: Option<i32>,
    margin_end: Option<i32>,
    margin_start: Option<i32>,
    margin_top: Option<i32>,
    name: Option<String>,
    opacity: Option<f64>,
    //overflow: /*Unknown type*/,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    tooltip_markup: Option<String>,
    tooltip_text: Option<String>,
    valign: Option<gtk::Align>,
    vexpand: Option<bool>,
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
    //accessible-role: /*Unknown type*/,
}

impl BottomBarBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`BottomBarBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`BottomBar`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> BottomBar {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref title) = self.title {
                properties.push(("title", title));
            }
if let Some(ref description) = self.description {
                properties.push(("description", description));
            }
if let Some(ref menu_model) = self.menu_model {
                properties.push(("menu-model", menu_model));
            }
if let Some(ref collapse_actions) = self.collapse_actions {
                properties.push(("collapse-actions", collapse_actions));
            }
if let Some(ref child) = self.child {
                properties.push(("child", child));
            }
if let Some(ref can_focus) = self.can_focus {
                properties.push(("can-focus", can_focus));
            }
if let Some(ref can_target) = self.can_target {
                properties.push(("can-target", can_target));
            }
if let Some(ref css_classes) = self.css_classes {
                properties.push(("css-classes", css_classes));
            }
if let Some(ref css_name) = self.css_name {
                properties.push(("css-name", css_name));
            }
if let Some(ref focus_on_click) = self.focus_on_click {
                properties.push(("focus-on-click", focus_on_click));
            }
if let Some(ref focusable) = self.focusable {
                properties.push(("focusable", focusable));
            }
if let Some(ref halign) = self.halign {
                properties.push(("halign", halign));
            }
if let Some(ref has_tooltip) = self.has_tooltip {
                properties.push(("has-tooltip", has_tooltip));
            }
if let Some(ref height_request) = self.height_request {
                properties.push(("height-request", height_request));
            }
if let Some(ref hexpand) = self.hexpand {
                properties.push(("hexpand", hexpand));
            }
if let Some(ref hexpand_set) = self.hexpand_set {
                properties.push(("hexpand-set", hexpand_set));
            }
if let Some(ref margin_bottom) = self.margin_bottom {
                properties.push(("margin-bottom", margin_bottom));
            }
if let Some(ref margin_end) = self.margin_end {
                properties.push(("margin-end", margin_end));
            }
if let Some(ref margin_start) = self.margin_start {
                properties.push(("margin-start", margin_start));
            }
if let Some(ref margin_top) = self.margin_top {
                properties.push(("margin-top", margin_top));
            }
if let Some(ref name) = self.name {
                properties.push(("name", name));
            }
if let Some(ref opacity) = self.opacity {
                properties.push(("opacity", opacity));
            }
if let Some(ref receives_default) = self.receives_default {
                properties.push(("receives-default", receives_default));
            }
if let Some(ref sensitive) = self.sensitive {
                properties.push(("sensitive", sensitive));
            }
if let Some(ref tooltip_markup) = self.tooltip_markup {
                properties.push(("tooltip-markup", tooltip_markup));
            }
if let Some(ref tooltip_text) = self.tooltip_text {
                properties.push(("tooltip-text", tooltip_text));
            }
if let Some(ref valign) = self.valign {
                properties.push(("valign", valign));
            }
if let Some(ref vexpand) = self.vexpand {
                properties.push(("vexpand", vexpand));
            }
if let Some(ref vexpand_set) = self.vexpand_set {
                properties.push(("vexpand-set", vexpand_set));
            }
if let Some(ref visible) = self.visible {
                properties.push(("visible", visible));
            }
if let Some(ref width_request) = self.width_request {
                properties.push(("width-request", width_request));
            }
        glib::Object::new::<BottomBar>(&properties)

    }

    pub fn title(mut self, title: &str) -> Self {
        self.title = Some(title.to_string());
        self
    }

    pub fn description(mut self, description: &str) -> Self {
        self.description = Some(description.to_string());
        self
    }

    pub fn menu_model(mut self, menu_model: &impl IsA<gio::MenuModel>) -> Self {
        self.menu_model = Some(menu_model.clone().upcast());
        self
    }

    pub fn collapse_actions(mut self, collapse_actions: bool) -> Self {
        self.collapse_actions = Some(collapse_actions);
        self
    }

    pub fn child(mut self, child: &impl IsA<gtk::Widget>) -> Self {
        self.child = Some(child.clone().upcast());
        self
    }

    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    pub fn can_target(mut self, can_target: bool) -> Self {
        self.can_target = Some(can_target);
        self
    }

    pub fn css_classes(mut self, css_classes: Vec<String>) -> Self {
        self.css_classes = Some(css_classes);
        self
    }

    pub fn css_name(mut self, css_name: &str) -> Self {
        self.css_name = Some(css_name.to_string());
        self
    }

    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    pub fn focusable(mut self, focusable: bool) -> Self {
        self.focusable = Some(focusable);
        self
    }

    pub fn halign(mut self, halign: gtk::Align) -> Self {
        self.halign = Some(halign);
        self
    }

    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    pub fn valign(mut self, valign: gtk::Align) -> Self {
        self.valign = Some(valign);
        self
    }

    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }
}

pub trait BottomBarExt: 'static {
    #[doc(alias = "he_bottom_bar_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> glib::GString;

    #[doc(alias = "he_bottom_bar_set_title")]
    fn set_title(&self, value: &str);

    #[doc(alias = "he_bottom_bar_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> glib::GString;

    #[doc(alias = "he_bottom_bar_set_description")]
    fn set_description(&self, value: &str);

    #[doc(alias = "he_bottom_bar_get_menu_model")]
    #[doc(alias = "get_menu_model")]
    fn menu_model(&self) -> gio::MenuModel;

    #[doc(alias = "he_bottom_bar_set_menu_model")]
    fn set_menu_model(&self, value: &impl IsA<gio::MenuModel>);

    #[doc(alias = "he_bottom_bar_get_collapse_actions")]
    #[doc(alias = "get_collapse_actions")]
    fn is_collapse_actions(&self) -> bool;

    #[doc(alias = "he_bottom_bar_set_collapse_actions")]
    fn set_collapse_actions(&self, value: bool);

    #[doc(alias = "he_bottom_bar_append_button")]
    fn append_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition);

    #[doc(alias = "he_bottom_bar_prepend_button")]
    fn prepend_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition);

    #[doc(alias = "he_bottom_bar_remove_button")]
    fn remove_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition);

    #[doc(alias = "he_bottom_bar_insert_button_after")]
    fn insert_button_after(&self, icon: &impl IsA<IconicButton>, after: &impl IsA<IconicButton>, position: BottomBarPosition);

    #[doc(alias = "he_bottom_bar_reorder_button_after")]
    fn reorder_button_after(&self, icon: &impl IsA<IconicButton>, sibling: &impl IsA<IconicButton>, position: BottomBarPosition);

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "menu-model")]
    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "collapse-actions")]
    fn connect_collapse_actions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<BottomBar>> BottomBarExt for O {
    fn title(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_title(self.as_ref().to_glib_none().0))
        }
    }

    fn set_title(&self, value: &str) {
        unsafe {
            ffi::he_bottom_bar_set_title(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn description(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_description(self.as_ref().to_glib_none().0))
        }
    }

    fn set_description(&self, value: &str) {
        unsafe {
            ffi::he_bottom_bar_set_description(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn menu_model(&self) -> gio::MenuModel {
        unsafe {
            from_glib_none(ffi::he_bottom_bar_get_menu_model(self.as_ref().to_glib_none().0))
        }
    }

    fn set_menu_model(&self, value: &impl IsA<gio::MenuModel>) {
        unsafe {
            ffi::he_bottom_bar_set_menu_model(self.as_ref().to_glib_none().0, value.as_ref().to_glib_none().0);
        }
    }

    fn is_collapse_actions(&self) -> bool {
        unsafe {
            from_glib(ffi::he_bottom_bar_get_collapse_actions(self.as_ref().to_glib_none().0))
        }
    }

    fn set_collapse_actions(&self, value: bool) {
        unsafe {
            ffi::he_bottom_bar_set_collapse_actions(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn append_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_append_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    fn prepend_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_prepend_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    fn remove_button(&self, icon: &impl IsA<IconicButton>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_remove_button(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    fn insert_button_after(&self, icon: &impl IsA<IconicButton>, after: &impl IsA<IconicButton>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_insert_button_after(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, after.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    fn reorder_button_after(&self, icon: &impl IsA<IconicButton>, sibling: &impl IsA<IconicButton>, position: BottomBarPosition) {
        unsafe {
            ffi::he_bottom_bar_reorder_button_after(self.as_ref().to_glib_none().0, icon.as_ref().to_glib_none().0, sibling.as_ref().to_glib_none().0, position.into_glib());
        }
    }

    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_menu_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_model_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::menu-model\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_menu_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_collapse_actions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_collapse_actions_trampoline<P: IsA<BottomBar>, F: Fn(&P) + 'static>(this: *mut ffi::HeBottomBar, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BottomBar::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::collapse-actions\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_collapse_actions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for BottomBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("BottomBar")
    }
}
