<?xml version="1.0"?>
<!-- He-1.gir generated by valadoc, do not modify. -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="Gio" version="2.0"/>
<include name="GLib" version="2.0"/>
<include name="Gtk" version="4.0"/>
<include name="GObject" version="2.0"/>
<include name="Pango" version="1.0"/>
<include name="Gdk" version="4.0"/>
<package name="libhelium-1"/>
<c:include name="libhelium-1.h"/>
<namespace name="He" version="1" c:prefix="He" c:identifier-prefixes="He" c:symbol-prefixes="he" shared-library="libhelium-1.so.1">
	<function name="ensor_accent_from_pixels_async" c:identifier="he_ensor_accent_from_pixels_async">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="pixels" transfer-ownership="none">
				<array length="1" c:type="guint8*">
					<type name="guint8" c:type="guint8"/>
				</array>
			</parameter>
			<parameter name="pixels_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="alpha" transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</parameter>
			<parameter name="_callback_" transfer-ownership="none" nullable="1" closure="4" scope="async">
				<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
			</parameter>
			<parameter name="_callback__target" transfer-ownership="none" nullable="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
		</parameters>
	</function>
	<function name="ensor_accent_from_pixels_finish" c:identifier="he_ensor_accent_from_pixels_finish">
		<return-value transfer-ownership="full">
			<array name="GLib.Array" c:type="GArray*">
				<type name="gint" c:type="gint"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="_res_" transfer-ownership="none">
				<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_clamp_double" c:identifier="he_math_utils_clamp_double">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="min" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="max" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="input" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_signum" c:identifier="he_math_utils_signum">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="x" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_to_degrees" c:identifier="he_math_utils_to_degrees">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="radians" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_to_radians" c:identifier="he_math_utils_to_radians">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="degrees" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_chromatic_adaptation" c:identifier="he_math_utils_chromatic_adaptation">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="component" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_inverse_chromatic_adaptation" c:identifier="he_math_utils_inverse_chromatic_adaptation">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="adapted" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lerp_point" c:identifier="he_math_utils_lerp_point">
		<return-value transfer-ownership="full">
			<array length="5" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="source" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="source_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="t" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="target" transfer-ownership="none">
				<array length="4" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="target_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lerp" c:identifier="he_math_utils_lerp">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="a" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="t" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_sanitize_radians" c:identifier="he_math_utils_sanitize_radians">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="angle" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_is_bounded_rgb" c:identifier="he_math_utils_is_bounded_rgb">
		<return-value transfer-ownership="full">
			<type name="gboolean" c:type="gboolean"/>
		</return-value>
		<parameters>
			<parameter name="x" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_adapt" c:identifier="he_math_utils_adapt">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="color_channel" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_elem_mul" c:identifier="he_math_utils_elem_mul">
		<return-value transfer-ownership="full">
			<array length="5" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="row" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="row_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="matrix" transfer-ownership="none">
				<array length="3" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="matrix_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="matrix_length2" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lab_inverse_fovea" c:identifier="he_math_utils_lab_inverse_fovea">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="ft" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lab_fovea" c:identifier="he_math_utils_lab_fovea">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="t" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_sanitize_degrees" c:identifier="he_math_utils_sanitize_degrees">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="degrees" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_sanitize_degrees_int" c:identifier="he_math_utils_sanitize_degrees_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="degrees" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_rotate_direction" c:identifier="he_math_utils_rotate_direction">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="from" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="to" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_difference_degrees" c:identifier="he_math_utils_difference_degrees">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="a" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_abs" c:identifier="he_math_utils_abs">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="n" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_max" c:identifier="he_math_utils_max">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="n" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="m" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_min" c:identifier="he_math_utils_min">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="n" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="m" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_linearized" c:identifier="he_math_utils_linearized">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="rgb_component" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_delinearized" c:identifier="he_math_utils_delinearized">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="rgb_component" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_double_delinearized" c:identifier="he_math_utils_double_delinearized">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="rgb_component" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_midpoint" c:identifier="he_math_utils_midpoint">
		<return-value transfer-ownership="full">
			<array length="4" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="a" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="a_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<array length="3" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="b_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_intercept" c:identifier="he_math_utils_intercept">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="source" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="mid" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="target" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_hue_of" c:identifier="he_math_utils_hue_of">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="linrgb" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="linrgb_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_nth_vertex" c:identifier="he_math_utils_nth_vertex">
		<return-value transfer-ownership="full">
			<array length="2" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="y" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="n" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_are_in_cyclic_order" c:identifier="he_math_utils_are_in_cyclic_order">
		<return-value transfer-ownership="full">
			<type name="gboolean" c:type="gboolean"/>
		</return-value>
		<parameters>
			<parameter name="a" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="c" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_set_coordinate" c:identifier="he_math_utils_set_coordinate">
		<return-value transfer-ownership="full">
			<array length="6" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="source" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="source_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="coordinate" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="target" transfer-ownership="none">
				<array length="4" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="target_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="axis" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_convert" c:identifier="he_math_utils_convert">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="value" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_bisect_to_segment" c:identifier="he_math_utils_bisect_to_segment">
		<return-value transfer-ownership="full">
			<array length="2" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="y" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="target_hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_bisect_to_limit" c:identifier="he_math_utils_bisect_to_limit">
		<return-value transfer-ownership="full">
			<array length="2" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="y" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="target_hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_y_from_lstar" c:identifier="he_math_utils_y_from_lstar">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="lstar" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_argb_from_lstar" c:identifier="he_math_utils_argb_from_lstar">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="lstar" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lstar_from_argb" c:identifier="he_math_utils_lstar_from_argb">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_lstar_from_y" c:identifier="he_math_utils_lstar_from_y">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="y" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="math_utils_clamp" c:identifier="he_math_utils_clamp">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="start" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="end" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="value" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_find_ancestor_of_type" c:identifier="he_misc_find_ancestor_of_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An useful method for finding an ancestor of a given widget.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full" nullable="1">
			<type name="gpointer" c:type="gpointer"/>
		</return-value>
		<parameters>
			<parameter name="t_type" transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</parameter>
			<parameter name="t_dup_func" transfer-ownership="none">
				<type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
			</parameter>
			<parameter name="t_destroy_func" transfer-ownership="none">
				<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
			</parameter>
			<parameter name="widget" transfer-ownership="none" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;The widget to find the ancestor of. &lt;/para&gt;</doc>
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_contrast_ratio" c:identifier="he_misc_contrast_ratio">
		<doc xml:whitespace="preserve">&lt;para&gt;Gives the contrast ratio between two colors.&lt;/para&gt;

Since: 1.0</doc>
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="red2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_fix_fg_contrast" c:identifier="he_misc_fix_fg_contrast">
		<doc xml:whitespace="preserve">&lt;para&gt;Gives a contrasting foreground color for a given background color.&lt;/para&gt;

Since: 1.0</doc>
		<return-value transfer-ownership="full">
			<array length="6" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="red2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_accel_label" c:identifier="he_misc_accel_label">
		<doc xml:whitespace="preserve">&lt;para&gt;Converts a &lt;function&gt;gtk_accelerator_parse&lt;/function&gt; style accel string to a human-readable string.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<doc xml:whitespace="preserve">&lt;para&gt;a human-readable string like &amp;quot;Ctrl + A&amp;quot; or &amp;quot;⯁ + →&amp;quot; &lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="accel" transfer-ownership="none" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;an accelerator label like “&amp;lt;Control&amp;gt;a” or “&amp;lt;Super&amp;gt;Right” &lt;/para&gt;</doc>
				<type name="utf8" c:type="const gchar*"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_accel_string" c:identifier="he_misc_accel_string">
		<doc xml:whitespace="preserve">&lt;para&gt;Takes a description and an array of accels and returns Pango markup for use in a &lt;type&gt;GtkTooltip&lt;/type&gt;. This method uses &lt;function&gt;he_misc_accel_label&lt;/function&gt;
.&lt;/para&gt;
&lt;para&gt;Example:&lt;/para&gt;
&lt;para&gt;Description Shortcut 1, Shortcut 2&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<doc xml:whitespace="preserve">&lt;para&gt;Pango markup with the description label on one line and a list of human-readable accels on a new line &lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="accels" transfer-ownership="none" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;string array of accelerator labels like {&amp;quot;&amp;lt;Control&amp;gt;a&amp;quot;, &amp;quot;&amp;lt;Super&amp;gt;Right&amp;quot;} &lt;/para&gt;</doc>
				<array length="1" c:type="gchar**">
					<type name="utf8" c:type="gchar*"/>
				</array>
			</parameter>
			<parameter name="accels_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="description" transfer-ownership="none" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;a standard tooltip text string &lt;/para&gt;</doc>
				<type name="utf8" c:type="const gchar*"/>
			</parameter>
		</parameters>
	</function>
	<enumeration name="AnimationState" c:type="HeAnimationState" glib:type-name="HeAnimationState" glib:get-type="he_animation_state_get_type">
		<member name="idle" c:identifier="HE_ANIMATION_STATE_IDLE" value="0"/>
		<member name="paused" c:identifier="HE_ANIMATION_STATE_PAUSED" value="1"/>
		<member name="playing" c:identifier="HE_ANIMATION_STATE_PLAYING" value="2"/>
		<member name="finished" c:identifier="HE_ANIMATION_STATE_FINISHED" value="3"/>
	</enumeration>
	<enumeration name="Easing" c:type="HeEasing" glib:type-name="HeEasing" glib:get-type="he_easing_get_type">
		<member name="linear" c:identifier="HE_EASING_LINEAR" value="0"/>
		<member name="ease_out_cubic" c:identifier="HE_EASING_EASE_OUT_CUBIC" value="1"/>
		<member name="ease_in_out_bounce" c:identifier="HE_EASING_EASE_IN_OUT_BOUNCE" value="2"/>
	</enumeration>
	<enumeration name="Colors" c:type="HeColors" glib:type-name="HeColors" glib:get-type="he_colors_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum that maps colors to internal CSS classes as per HIG.&lt;/para&gt;</doc>
		<member name="none" c:identifier="HE_COLORS_NONE" value="0"/>
		<member name="red" c:identifier="HE_COLORS_RED" value="1"/>
		<member name="orange" c:identifier="HE_COLORS_ORANGE" value="2"/>
		<member name="yellow" c:identifier="HE_COLORS_YELLOW" value="3"/>
		<member name="green" c:identifier="HE_COLORS_GREEN" value="4"/>
		<member name="blue" c:identifier="HE_COLORS_BLUE" value="5"/>
		<member name="indigo" c:identifier="HE_COLORS_INDIGO" value="6"/>
		<member name="purple" c:identifier="HE_COLORS_PURPLE" value="7"/>
		<member name="pink" c:identifier="HE_COLORS_PINK" value="8"/>
		<member name="mint" c:identifier="HE_COLORS_MINT" value="9"/>
		<member name="brown" c:identifier="HE_COLORS_BROWN" value="10"/>
		<member name="light" c:identifier="HE_COLORS_LIGHT" value="11"/>
		<member name="dark" c:identifier="HE_COLORS_DARK" value="12"/>
	</enumeration>
	<function name="colors_to_css_class" c:identifier="he_colors_to_css_class">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the CSS class name for the color.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="colors_to_string" c:identifier="he_colors_to_string">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the color name.&lt;/para&gt;

Since: 1.0</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</instance-parameter>
		</parameters>
	</function>
	<enumeration name="TipViewStyle" c:type="HeTipViewStyle" glib:type-name="HeTipViewStyle" glib:get-type="he_tip_view_style_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;A TipViewStyle changes the visual look of a tip.&lt;/para&gt;</doc>
		<member name="none" c:identifier="HE_TIP_VIEW_STYLE_NONE" value="0"/>
		<member name="popup" c:identifier="HE_TIP_VIEW_STYLE_POPUP" value="1"/>
		<member name="view" c:identifier="HE_TIP_VIEW_STYLE_VIEW" value="2"/>
	</enumeration>
	<function name="tip_view_style_to_css_class" c:identifier="he_tip_view_style_to_css_class">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.TipViewStyle" c:type="HeTipViewStyle"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="tip_view_style_to_string" c:identifier="he_tip_view_style_to_string">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.TipViewStyle" c:type="HeTipViewStyle"/>
			</instance-parameter>
		</parameters>
	</function>
	<enumeration name="SchemeVariant" c:type="HeSchemeVariant" glib:type-name="HeSchemeVariant" glib:get-type="he_scheme_variant_get_type">
		<member name="default" c:identifier="HE_SCHEME_VARIANT_DEFAULT" value="0"/>
		<member name="vibrant" c:identifier="HE_SCHEME_VARIANT_VIBRANT" value="1"/>
		<member name="muted" c:identifier="HE_SCHEME_VARIANT_MUTED" value="2"/>
		<member name="monochrome" c:identifier="HE_SCHEME_VARIANT_MONOCHROME" value="3"/>
		<member name="salad" c:identifier="HE_SCHEME_VARIANT_SALAD" value="4"/>
		<member name="content" c:identifier="HE_SCHEME_VARIANT_CONTENT" value="5"/>
	</enumeration>
	<enumeration name="TonePolarity" c:type="HeTonePolarity" glib:type-name="HeTonePolarity" glib:get-type="he_tone_polarity_get_type">
		<member name="darker" c:identifier="HE_TONE_POLARITY_DARKER" value="0"/>
		<member name="lighter" c:identifier="HE_TONE_POLARITY_LIGHTER" value="1"/>
		<member name="nearer" c:identifier="HE_TONE_POLARITY_NEARER" value="2"/>
		<member name="farther" c:identifier="HE_TONE_POLARITY_FARTHER" value="3"/>
	</enumeration>
	<class name="AnimationTarget" c:type="HeAnimationTarget" c:symbol-prefix="animation_target" glib:type-name="HeAnimationTarget" glib:get-type="he_animation_target_get_type" glib:type-struct="AnimationTargetClass" parent="GObject.Object" abstract="1">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AnimationTargetPrivate" c:type="HeAnimationTargetPrivate*"/>
		</field>
		<method name="set_value" c:identifier="he_animation_target_set_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_value" invoker="set_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
	</class>
	<record name="AnimationTargetClass" c:type="HeAnimationTargetClass" glib:is-gtype-struct-for="AnimationTarget">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="set_value">
			<callback name="set_value" c:type="set_value">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="AnimationTargetPrivate" c:type="HeAnimationTargetPrivate" disguised="1"/>
	<class name="CallbackAnimationTarget" c:type="HeCallbackAnimationTarget" c:symbol-prefix="callback_animation_target" glib:type-name="HeCallbackAnimationTarget" glib:get-type="he_callback_animation_target_get_type" glib:type-struct="CallbackAnimationTargetClass" parent="He.AnimationTarget" final="1">
		<field name="parent_instance" readable="0" private="1">
			<type name="He.AnimationTarget" c:type="HeAnimationTarget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CallbackAnimationTargetPrivate" c:type="HeCallbackAnimationTargetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_callback_animation_target_new">
			<return-value transfer-ownership="full">
				<type name="He.CallbackAnimationTarget" c:type="HeCallbackAnimationTarget*"/>
			</return-value>
			<parameters>
				<parameter name="callback" transfer-ownership="none" closure="1" scope="notified" destroy="2">
					<type name="He.AnimationTargetFunc" c:type="HeAnimationTargetFunc"/>
				</parameter>
				<parameter name="callback_target" transfer-ownership="none" nullable="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="callback_target_destroy_notify" transfer-ownership="none" scope="call">
					<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CallbackAnimationTargetClass" c:type="HeCallbackAnimationTargetClass" glib:is-gtype-struct-for="CallbackAnimationTarget">
		<field name="parent_class" readable="0" private="1">
			<type name="He.AnimationTargetClass" c:type="HeAnimationTargetClass"/>
		</field>
	</record>
	<record name="CallbackAnimationTargetPrivate" c:type="HeCallbackAnimationTargetPrivate" disguised="1"/>
	<class name="PropertyAnimationTarget" c:type="HePropertyAnimationTarget" c:symbol-prefix="property_animation_target" glib:type-name="HePropertyAnimationTarget" glib:get-type="he_property_animation_target_get_type" glib:type-struct="PropertyAnimationTargetClass" parent="He.AnimationTarget" final="1">
		<field name="parent_instance" readable="0" private="1">
			<type name="He.AnimationTarget" c:type="HeAnimationTarget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="PropertyAnimationTargetPrivate" c:type="HePropertyAnimationTargetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_property_animation_target_new">
			<return-value transfer-ownership="full">
				<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
			</return-value>
		</constructor>
		<method name="animate_property" c:identifier="he_property_animation_target_animate_property">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="object" writable="1">
			<type name="GObject.Object" c:type="GObject*"/>
		</property>
		<method name="get_object" c:identifier="he_property_animation_target_get_object">
			<return-value transfer-ownership="none" nullable="1">
				<type name="GObject.Object" c:type="GObject*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_object" c:identifier="he_property_animation_target_set_object">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</method>
		<property name="pspec" writable="1">
			<type name="GObject.ParamSpec" c:type="GParamSpec*"/>
		</property>
		<method name="get_pspec" c:identifier="he_property_animation_target_get_pspec">
			<return-value transfer-ownership="none" nullable="1">
				<type name="GObject.ParamSpec" c:type="GParamSpec*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_pspec" c:identifier="he_property_animation_target_set_pspec">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.PropertyAnimationTarget" c:type="HePropertyAnimationTarget*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="GObject.ParamSpec" c:type="GParamSpec*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="PropertyAnimationTargetClass" c:type="HePropertyAnimationTargetClass" glib:is-gtype-struct-for="PropertyAnimationTarget">
		<field name="parent_class" readable="0" private="1">
			<type name="He.AnimationTargetClass" c:type="HeAnimationTargetClass"/>
		</field>
	</record>
	<record name="PropertyAnimationTargetPrivate" c:type="HePropertyAnimationTargetPrivate" disguised="1"/>
	<class name="Animation" c:type="HeAnimation" c:symbol-prefix="animation" glib:type-name="HeAnimation" glib:get-type="he_animation_get_type" glib:type-struct="AnimationClass" parent="GObject.Object" abstract="1">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AnimationPrivate" c:type="HeAnimationPrivate*"/>
		</field>
		<method name="pause" c:identifier="he_animation_pause">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="play" c:identifier="he_animation_play">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="reset" c:identifier="he_animation_reset">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="resume" c:identifier="he_animation_resume">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="skip" c:identifier="he_animation_skip">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="estimate_duration" c:identifier="he_animation_estimate_duration">
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="estimate_duration" invoker="estimate_duration">
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="calculate_value" c:identifier="he_animation_calculate_value">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="t" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="calculate_value" invoker="calculate_value">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="t" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="state" writable="1">
			<type name="He.AnimationState" c:type="HeAnimationState"/>
		</property>
		<method name="get_state" c:identifier="he_animation_get_state">
			<return-value transfer-ownership="none">
				<type name="He.AnimationState" c:type="HeAnimationState"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_state" c:identifier="he_animation_set_state">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.AnimationState" c:type="HeAnimationState"/>
				</parameter>
			</parameters>
		</method>
		<property name="target" writable="1">
			<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
		</property>
		<method name="get_target" c:identifier="he_animation_get_target">
			<return-value transfer-ownership="none">
				<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_target" c:identifier="he_animation_set_target">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="widget" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_widget" c:identifier="he_animation_get_widget">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_widget" c:identifier="he_animation_set_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="avalue" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_avalue" c:identifier="he_animation_get_avalue">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_avalue" c:identifier="he_animation_set_avalue">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Animation" c:type="HeAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="done">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="AnimationClass" c:type="HeAnimationClass" glib:is-gtype-struct-for="Animation">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="estimate_duration">
			<callback name="estimate_duration" c:type="estimate_duration">
				<return-value transfer-ownership="full">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.Animation" c:type="HeAnimation*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="calculate_value">
			<callback name="calculate_value" c:type="calculate_value">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.Animation" c:type="HeAnimation*"/>
					</parameter>
					<parameter name="t" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="AnimationPrivate" c:type="HeAnimationPrivate" disguised="1"/>
	<class name="SpringParams" c:type="HeSpringParams" c:symbol-prefix="spring_params" glib:type-name="HeSpringParams" glib:get-type="he_spring_params_get_type" glib:type-struct="SpringParamsClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SpringParamsPrivate" c:type="HeSpringParamsPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_spring_params_new">
			<return-value transfer-ownership="full">
				<type name="He.SpringParams" c:type="HeSpringParams*"/>
			</return-value>
			<parameters>
				<parameter name="damping_ratio" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="mass" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="stiffness" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="full" c:identifier="he_spring_params_new_full">
			<return-value transfer-ownership="full">
				<type name="He.SpringParams" c:type="HeSpringParams*"/>
			</return-value>
			<parameters>
				<parameter name="damping" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="mass" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="stiffness" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="damping" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_damping" c:identifier="he_spring_params_get_damping">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_damping" c:identifier="he_spring_params_set_damping">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="damping-ratio" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_damping_ratio" c:identifier="he_spring_params_get_damping_ratio">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_damping_ratio" c:identifier="he_spring_params_set_damping_ratio">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="mass" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_mass" c:identifier="he_spring_params_get_mass">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_mass" c:identifier="he_spring_params_set_mass">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="stiffness" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_stiffness" c:identifier="he_spring_params_get_stiffness">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stiffness" c:identifier="he_spring_params_set_stiffness">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SpringParamsClass" c:type="HeSpringParamsClass" glib:is-gtype-struct-for="SpringParams">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="SpringParamsPrivate" c:type="HeSpringParamsPrivate" disguised="1"/>
	<class name="SpringAnimation" c:type="HeSpringAnimation" c:symbol-prefix="spring_animation" glib:type-name="HeSpringAnimation" glib:get-type="he_spring_animation_get_type" glib:type-struct="SpringAnimationClass" parent="He.Animation">
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Animation" c:type="HeAnimation"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SpringAnimationPrivate" c:type="HeSpringAnimationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_spring_animation_new">
			<return-value transfer-ownership="full">
				<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
			</return-value>
			<parameters>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
				<parameter name="from" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="to" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="sparams" transfer-ownership="full">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</parameter>
				<parameter name="target" transfer-ownership="full">
					<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="epsilon" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_epsilon" c:identifier="he_spring_animation_get_epsilon">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_epsilon" c:identifier="he_spring_animation_set_epsilon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="estimated-duration" writable="1">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_estimated_duration" c:identifier="he_spring_animation_get_estimated_duration">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_estimated_duration" c:identifier="he_spring_animation_set_estimated_duration">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<property name="initial-velocity" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_initial_velocity" c:identifier="he_spring_animation_get_initial_velocity">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_initial_velocity" c:identifier="he_spring_animation_set_initial_velocity">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="latch" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_latch" c:identifier="he_spring_animation_get_latch">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_latch" c:identifier="he_spring_animation_set_latch">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="spring-params" writable="1" construct="1">
			<type name="He.SpringParams" c:type="HeSpringParams*"/>
		</property>
		<method name="get_spring_params" c:identifier="he_spring_animation_get_spring_params">
			<return-value transfer-ownership="none">
				<type name="He.SpringParams" c:type="HeSpringParams*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_spring_params" c:identifier="he_spring_animation_set_spring_params">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.SpringParams" c:type="HeSpringParams*"/>
				</parameter>
			</parameters>
		</method>
		<property name="value-from" writable="1" construct="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_value_from" c:identifier="he_spring_animation_get_value_from">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value_from" c:identifier="he_spring_animation_set_value_from">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="value-to" writable="1" construct="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_value_to" c:identifier="he_spring_animation_get_value_to">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value_to" c:identifier="he_spring_animation_set_value_to">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="velocity" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_velocity" c:identifier="he_spring_animation_get_velocity">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_velocity" c:identifier="he_spring_animation_set_velocity">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SpringAnimation" c:type="HeSpringAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SpringAnimationClass" c:type="HeSpringAnimationClass" glib:is-gtype-struct-for="SpringAnimation">
		<field name="parent_class" readable="0" private="1">
			<type name="He.AnimationClass" c:type="HeAnimationClass"/>
		</field>
	</record>
	<record name="SpringAnimationPrivate" c:type="HeSpringAnimationPrivate" disguised="1"/>
	<class name="TimedAnimation" c:type="HeTimedAnimation" c:symbol-prefix="timed_animation" glib:type-name="HeTimedAnimation" glib:get-type="he_timed_animation_get_type" glib:type-struct="TimedAnimationClass" parent="He.Animation">
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Animation" c:type="HeAnimation"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TimedAnimationPrivate" c:type="HeTimedAnimationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_timed_animation_new">
			<return-value transfer-ownership="full">
				<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
			</return-value>
			<parameters>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
				<parameter name="from" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="to" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="duration" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
				<parameter name="target" transfer-ownership="none">
					<type name="He.AnimationTarget" c:type="HeAnimationTarget*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="value-from" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_value_from" c:identifier="he_timed_animation_get_value_from">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value_from" c:identifier="he_timed_animation_set_value_from">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="value-to" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_value_to" c:identifier="he_timed_animation_get_value_to">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value_to" c:identifier="he_timed_animation_set_value_to">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="duration" writable="1">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_duration" c:identifier="he_timed_animation_get_duration">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_duration" c:identifier="he_timed_animation_set_duration">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<property name="easing" writable="1">
			<type name="He.Easing" c:type="HeEasing"/>
		</property>
		<method name="get_easing" c:identifier="he_timed_animation_get_easing">
			<return-value transfer-ownership="none">
				<type name="He.Easing" c:type="HeEasing"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_easing" c:identifier="he_timed_animation_set_easing">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Easing" c:type="HeEasing"/>
				</parameter>
			</parameters>
		</method>
		<property name="repeat-count" writable="1">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_repeat_count" c:identifier="he_timed_animation_get_repeat_count">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_repeat_count" c:identifier="he_timed_animation_set_repeat_count">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<property name="reverse" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_reverse" c:identifier="he_timed_animation_get_reverse">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_reverse" c:identifier="he_timed_animation_set_reverse">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="alternate" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_alternate" c:identifier="he_timed_animation_get_alternate">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_alternate" c:identifier="he_timed_animation_set_alternate">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimedAnimation" c:type="HeTimedAnimation*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TimedAnimationClass" c:type="HeTimedAnimationClass" glib:is-gtype-struct-for="TimedAnimation">
		<field name="parent_class" readable="0" private="1">
			<type name="He.AnimationClass" c:type="HeAnimationClass"/>
		</field>
	</record>
	<record name="TimedAnimationPrivate" c:type="HeTimedAnimationPrivate" disguised="1"/>
	<class name="Application" c:type="HeApplication" c:symbol-prefix="application" glib:type-name="HeApplication" glib:get-type="he_application_get_type" glib:type-struct="ApplicationClass" parent="Gtk.Application">
		<doc xml:whitespace="preserve">&lt;para&gt;An application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Application" c:type="GtkApplication"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ApplicationPrivate" c:type="HeApplicationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_application_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new application.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="He.Application" c:type="HeApplication*"/>
			</return-value>
			<parameters>
				<parameter name="application_id" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The application ID in reverse domain name notation &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="flags" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The application flags, as defined in GIO.ApplicationFlags &lt;/para&gt;</doc>
					<type name="Gio.ApplicationFlags" c:type="GApplicationFlags"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="default-accent-color" writable="1">
			<type name="He.RGBColor" c:type="HeRGBColor*"/>
		</property>
		<method name="get_default_accent_color" c:identifier="he_application_get_default_accent_color">
			<return-value transfer-ownership="none" nullable="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_default_accent_color" c:identifier="he_application_set_default_accent_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="He.RGBColor" c:type="HeRGBColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="override-accent-color" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_override_accent_color" c:identifier="he_application_get_override_accent_color">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_override_accent_color" c:identifier="he_application_set_override_accent_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="override-dark-style" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_override_dark_style" c:identifier="he_application_get_override_dark_style">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_override_dark_style" c:identifier="he_application_set_override_dark_style">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="override-contrast" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_override_contrast" c:identifier="he_application_get_override_contrast">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_override_contrast" c:identifier="he_application_set_override_contrast">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="default-contrast" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_default_contrast" c:identifier="he_application_get_default_contrast">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_default_contrast" c:identifier="he_application_set_default_contrast">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_scheme_factory" c:identifier="he_application_get_scheme_factory">
			<return-value transfer-ownership="none" nullable="1">
				<type name="He.SchemeVariant" c:type="HeSchemeVariant*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_scheme_factory" c:identifier="he_application_set_scheme_factory">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="He.SchemeVariant" c:type="HeSchemeVariant*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ApplicationClass" c:type="HeApplicationClass" glib:is-gtype-struct-for="Application">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
		</field>
	</record>
	<record name="ApplicationPrivate" c:type="HeApplicationPrivate" disguised="1"/>
	<class name="Bin" c:type="HeBin" c:symbol-prefix="bin" glib:type-name="HeBin" glib:get-type="he_bin_get_type" glib:type-struct="BinClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper class for subclassing custom widgets.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BinPrivate" c:type="HeBinPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_bin_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the Bin, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_child" invoker="add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the Bin, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="he_bin_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Bin.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.Bin" c:type="HeBin*"/>
			</return-value>
		</constructor>
		<property name="child" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_bin_get_child">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_bin_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BinClass" c:type="HeBinClass" glib:is-gtype-struct-for="Bin">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
		<field name="add_child">
			<callback name="add_child" c:type="add_child">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.Bin" c:type="HeBin*"/>
					</parameter>
					<parameter name="builder" transfer-ownership="none">
						<type name="Gtk.Builder" c:type="GtkBuilder*"/>
					</parameter>
					<parameter name="child" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
					<parameter name="type" transfer-ownership="none" nullable="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="BinPrivate" c:type="HeBinPrivate" disguised="1"/>
	<class name="ButtonContent" c:type="HeButtonContent" c:symbol-prefix="button_content" glib:type-name="HeButtonContent" glib:get-type="he_button_content_get_type" glib:type-struct="ButtonContentClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper class to derive Buttons from.&lt;/para&gt;

Since: 1.0</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ButtonContentPrivate" c:type="HeButtonContentPrivate*"/>
		</field>
		<field name="image" writable="1">
			<type name="Gtk.Image" c:type="GtkImage*"/>
		</field>
		<constructor name="new" c:identifier="he_button_content_new">
			<return-value transfer-ownership="none">
				<type name="He.ButtonContent" c:type="HeButtonContent*"/>
			</return-value>
		</constructor>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon of the Button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_button_content_get_icon">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_button_content_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The label of the Button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_button_content_get_label">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_button_content_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ButtonContentClass" c:type="HeButtonContentClass" glib:is-gtype-struct-for="ButtonContent">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
	</record>
	<record name="ButtonContentPrivate" c:type="HeButtonContentPrivate" disguised="1"/>
	<class name="StyleManager" c:type="HeStyleManager" c:symbol-prefix="style_manager" glib:type-name="HeStyleManager" glib:get-type="he_style_manager_get_type" glib:type-struct="StyleManagerClass" parent="GObject.Object">
		<doc xml:whitespace="preserve">&lt;para&gt;A class that manages the style of the application in conjunction with the provided preferences. This is a low-level class that should not be
used directly. Instead, let the `He.Application` class manage this for you.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="StyleManagerPrivate" c:type="HeStyleManagerPrivate*"/>
		</field>
		<field name="accent_color" writable="1" nullable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The preferred accent color. If null, a default accent color will be chosen based on the color scheme.&lt;/para&gt;</doc>
			<type name="He.RGBColor" c:type="HeRGBColor*"/>
		</field>
		<field name="font_weight" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The preferred font weight.&lt;/para&gt;</doc>
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="roundness" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The preferred UI roundness.&lt;/para&gt;</doc>
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="is_dark" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether to apply styles for dark mode.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</field>
		<field name="contrast" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether to apply styles for contrast modes. -1.0 = low, 0.0 = default, 0.5 = medium, 1.0 = high&lt;/para&gt;</doc>
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="scheme_variant" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A function that returns a color scheme from a given accent color and whether dark mode is enabled.&lt;/para&gt;</doc>
			<type name="He.SchemeVariant" c:type="HeSchemeVariant"/>
		</field>
		<method name="update" c:identifier="he_style_manager_update">
			<doc xml:whitespace="preserve">&lt;para&gt;Runs all the necessary updates to apply the current style. If is_registered is false, this will do nothing.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="register" c:identifier="he_style_manager_register">
			<doc xml:whitespace="preserve">&lt;para&gt;Register the style manager with GTK. This will also call update.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="unregister" c:identifier="he_style_manager_unregister">
			<doc xml:whitespace="preserve">&lt;para&gt;Unregister the style manager with GTK.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_style_manager_new">
			<return-value transfer-ownership="full">
				<type name="He.StyleManager" c:type="HeStyleManager*"/>
			</return-value>
		</constructor>
		<property name="is-registered" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the style manager has been registered. Unregistered style managers will not apply their styles.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_registered" c:identifier="he_style_manager_get_is_registered">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="user-base">
			<doc xml:whitespace="preserve">&lt;para&gt;The base style provider for application provided styles. In this case user refers to the application, not the user of the application.&lt;/para&gt;</doc>
			<type name="Gtk.CssProvider" c:type="GtkCssProvider*"/>
		</property>
		<method name="get_user_base" c:identifier="he_style_manager_get_user_base">
			<return-value transfer-ownership="none">
				<type name="Gtk.CssProvider" c:type="GtkCssProvider*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="user-dark">
			<doc xml:whitespace="preserve">&lt;para&gt;The dark style provider for application provided styles. This will be applied in addition to the base style provider when dark mode is enabled.
&lt;/para&gt;</doc>
			<type name="Gtk.CssProvider" c:type="GtkCssProvider*"/>
		</property>
		<method name="get_user_dark" c:identifier="he_style_manager_get_user_dark">
			<return-value transfer-ownership="none">
				<type name="Gtk.CssProvider" c:type="GtkCssProvider*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.StyleManager" c:type="HeStyleManager*"/>
				</instance-parameter>
			</parameters>
		</method>
	</class>
	<record name="StyleManagerClass" c:type="HeStyleManagerClass" glib:is-gtype-struct-for="StyleManager">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="StyleManagerPrivate" c:type="HeStyleManagerPrivate" disguised="1"/>
	<class name="Tip" c:type="HeTip" c:symbol-prefix="tip" glib:type-name="HeTip" glib:get-type="he_tip_get_type" glib:type-struct="TipClass" parent="GObject.Object">
		<doc xml:whitespace="preserve">&lt;para&gt;A Tip is a helper object for onboarding flow tips in an app&amp;apos;s first launch.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TipPrivate" c:type="HeTipPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_tip_new">
			<return-value transfer-ownership="full">
				<type name="He.Tip" c:type="HeTip*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="image" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="message" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="action_label" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_tip_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_tip_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="image" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_image" c:identifier="he_tip_get_image">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_image" c:identifier="he_tip_set_image">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="message" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_message" c:identifier="he_tip_get_message">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_message" c:identifier="he_tip_set_message">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="action-label" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_action_label" c:identifier="he_tip_get_action_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_action_label" c:identifier="he_tip_set_action_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TipClass" c:type="HeTipClass" glib:is-gtype-struct-for="Tip">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="TipPrivate" c:type="HeTipPrivate" disguised="1"/>
	<class name="View" c:type="HeView" c:symbol-prefix="view" glib:type-name="HeView" glib:get-type="he_view_get_type" glib:type-struct="ViewClass" parent="Gtk.Widget" abstract="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper widget that implements a View that displays items.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewPrivate" c:type="HeViewPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_view_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_child" invoker="add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add" c:identifier="he_view_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child directly to the view. Used only in code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the view.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_view_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_view_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack of the view.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the view.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_view_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_view_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-margins" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the view child has margins or is full-bleed.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_margins" c:identifier="he_view_get_has_margins">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_margins" c:identifier="he_view_set_has_margins">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewClass" c:type="HeViewClass" glib:is-gtype-struct-for="View">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
		<field name="add_child">
			<callback name="add_child" c:type="add_child">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.View" c:type="HeView*"/>
					</parameter>
					<parameter name="builder" transfer-ownership="none">
						<type name="Gtk.Builder" c:type="GtkBuilder*"/>
					</parameter>
					<parameter name="child" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
					<parameter name="type" transfer-ownership="none" nullable="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ViewPrivate" c:type="HeViewPrivate" disguised="1"/>
	<class name="Window" c:type="HeWindow" c:symbol-prefix="window" glib:type-name="HeWindow" glib:get-type="he_window_get_type" glib:type-struct="WindowClass" parent="Gtk.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A Window is a container that has an &lt;type&gt;HeAppBar&lt;/type&gt; and can be moved, resized, and closed. It may be a top-level window or a dialog. The
title bar can be made always visible. Has an optional back button. The back button is only visible if has_back_button is true.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Window" c:type="GtkWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="WindowPrivate" c:type="HeWindowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_window_new">
			<return-value transfer-ownership="none">
				<type name="He.Window" c:type="HeWindow*"/>
			</return-value>
		</constructor>
		<property name="parent" writable="1">
			<type name="Gtk.Window" c:type="GtkWindow*"/>
		</property>
		<method name="get_parent" c:identifier="he_window_get_parent">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Window" c:type="GtkWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_parent" c:identifier="he_window_set_parent">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-title" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_title" c:identifier="he_window_get_has_title">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_title" c:identifier="he_window_set_has_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-back-button" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_back_button" c:identifier="he_window_get_has_back_button">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_back_button" c:identifier="he_window_set_has_back_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="WindowClass" c:type="HeWindowClass" glib:is-gtype-struct-for="Window">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
		</field>
	</record>
	<record name="WindowPrivate" c:type="HeWindowPrivate" disguised="1"/>
	<class name="Desktop" c:type="HeDesktop" c:symbol-prefix="desktop" glib:type-name="HeDesktop" glib:get-type="he_desktop_get_type" glib:type-struct="DesktopClass" parent="GObject.Object">
		<doc xml:whitespace="preserve">&lt;para&gt;Helper class to deal with desktop-specific settings.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DesktopPrivate" c:type="HeDesktopPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_desktop_new">
			<return-value transfer-ownership="full">
				<type name="He.Desktop" c:type="HeDesktop*"/>
			</return-value>
		</constructor>
		<property name="prefers-color-scheme" writable="1">
			<type name="He.DesktopColorScheme" c:type="HeDesktopColorScheme"/>
		</property>
		<method name="get_prefers_color_scheme" c:identifier="he_desktop_get_prefers_color_scheme">
			<return-value transfer-ownership="none">
				<type name="He.DesktopColorScheme" c:type="HeDesktopColorScheme"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_prefers_color_scheme" c:identifier="he_desktop_set_prefers_color_scheme">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.DesktopColorScheme" c:type="HeDesktopColorScheme"/>
				</parameter>
			</parameters>
		</method>
		<property name="scheme-variant" writable="1">
			<type name="He.SchemeVariant" c:type="HeSchemeVariant"/>
		</property>
		<method name="get_scheme_variant" c:identifier="he_desktop_get_scheme_variant">
			<return-value transfer-ownership="none">
				<type name="He.SchemeVariant" c:type="HeSchemeVariant"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="accent-color" writable="1">
			<type name="He.RGBColor" c:type="HeRGBColor*"/>
		</property>
		<method name="get_accent_color" c:identifier="he_desktop_get_accent_color">
			<return-value transfer-ownership="none" nullable="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_accent_color" c:identifier="he_desktop_set_accent_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="He.RGBColor" c:type="HeRGBColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="font-weight" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_font_weight" c:identifier="he_desktop_get_font_weight">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_font_weight" c:identifier="he_desktop_set_font_weight">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="roundness" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_roundness" c:identifier="he_desktop_get_roundness">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_roundness" c:identifier="he_desktop_set_roundness">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="contrast" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_contrast" c:identifier="he_desktop_get_contrast">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_contrast" c:identifier="he_desktop_set_contrast">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DesktopClass" c:type="HeDesktopClass" glib:is-gtype-struct-for="Desktop">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="DesktopPrivate" c:type="HeDesktopPrivate" disguised="1"/>
	<enumeration name="DesktopColorScheme" c:type="HeDesktopColorScheme" glib:type-name="HeDesktopColorScheme" glib:get-type="he_desktop_color_scheme_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The color scheme preference enum, which is used to determine the color scheme of the desktop.&lt;/para&gt;</doc>
		<member name="no_preference" c:identifier="HE_DESKTOP_COLOR_SCHEME_NO_PREFERENCE" value="0"/>
		<member name="dark" c:identifier="HE_DESKTOP_COLOR_SCHEME_DARK" value="1"/>
		<member name="light" c:identifier="HE_DESKTOP_COLOR_SCHEME_LIGHT" value="2"/>
	</enumeration>
	<class name="Quantizer" c:type="HeQuantizer" c:symbol-prefix="quantizer" glib:type-name="HeQuantizer" glib:get-type="he_quantizer_get_type" glib:type-struct="QuantizerClass" parent="GObject.Object" abstract="1">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerPrivate" c:type="HeQuantizerPrivate*"/>
		</field>
		<method name="quantize" c:identifier="he_quantizer_quantize">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerResult" c:type="HeQuantizerResult*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Quantizer" c:type="HeQuantizer*"/>
				</instance-parameter>
				<parameter name="pixels" transfer-ownership="none">
					<array length="1" c:type="gint*">
						<type name="gint" c:type="gint"/>
					</array>
				</parameter>
				<parameter name="pixels_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="max_colors" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="quantize" invoker="quantize">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerResult" c:type="HeQuantizerResult*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Quantizer" c:type="HeQuantizer*"/>
				</instance-parameter>
				<parameter name="pixels" transfer-ownership="none">
					<array length="1" c:type="gint*">
						<type name="gint" c:type="gint"/>
					</array>
				</parameter>
				<parameter name="pixels_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="max_colors" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</virtual-method>
	</class>
	<record name="QuantizerClass" c:type="HeQuantizerClass" glib:is-gtype-struct-for="Quantizer">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="quantize">
			<callback name="quantize" c:type="quantize">
				<return-value transfer-ownership="full">
					<type name="He.QuantizerResult" c:type="HeQuantizerResult*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.Quantizer" c:type="HeQuantizer*"/>
					</parameter>
					<parameter name="pixels" transfer-ownership="none">
						<array length="2" c:type="gint*">
							<type name="gint" c:type="gint"/>
						</array>
					</parameter>
					<parameter name="pixels_length1" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="max_colors" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="QuantizerPrivate" c:type="HeQuantizerPrivate" disguised="1"/>
	<class name="QuantizerCelebi" c:type="HeQuantizerCelebi" c:symbol-prefix="quantizer_celebi" glib:type-name="HeQuantizerCelebi" glib:get-type="he_quantizer_celebi_get_type" glib:type-struct="QuantizerCelebiClass" glib:fundamental="1" glib:ref-func="he_quantizer_celebi_ref" glib:unref-func="he_quantizer_celebi_unref" glib:set-value-func="he_value_set_quantizer_celebi" glib:get-value-func="he_value_get_quantizer_celebi">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.TypeInstance" c:type="GTypeInstance"/>
		</field>
		<field name="ref_count">
			<type name="gint" c:type="volatile int"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerCelebiPrivate" c:type="HeQuantizerCelebiPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_quantizer_celebi_new">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerCelebi" c:type="HeQuantizerCelebi*"/>
			</return-value>
		</constructor>
		<method name="quantize" c:identifier="he_quantizer_celebi_quantize">
			<return-value transfer-ownership="full">
				<type name="GLib.HashTable" c:type="GHashTable*">
					<type name="gint" c:type="gint*"/>
					<type name="gint" c:type="gint*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.QuantizerCelebi" c:type="HeQuantizerCelebi*"/>
				</instance-parameter>
				<parameter name="pixels" transfer-ownership="none">
					<array length="1" c:type="gint*">
						<type name="gint" c:type="gint"/>
					</array>
				</parameter>
				<parameter name="pixels_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="max_colors" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="QuantizerCelebiClass" c:type="HeQuantizerCelebiClass" glib:is-gtype-struct-for="QuantizerCelebi">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.TypeClass" c:type="GTypeClass"/>
		</field>
	</record>
	<record name="QuantizerCelebiPrivate" c:type="HeQuantizerCelebiPrivate" disguised="1"/>
	<class name="QuantizerMap" c:type="HeQuantizerMap" c:symbol-prefix="quantizer_map" glib:type-name="HeQuantizerMap" glib:get-type="he_quantizer_map_get_type" glib:type-struct="QuantizerMapClass" parent="He.Quantizer">
		<doc xml:whitespace="preserve">&lt;para&gt;Creates a dictionary with keys of colors, and values of count of the color&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Quantizer" c:type="HeQuantizer"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerMapPrivate" c:type="HeQuantizerMapPrivate*"/>
		</field>
		<method name="get_color_to_count" c:identifier="he_quantizer_map_get_color_to_count">
			<return-value transfer-ownership="full">
				<type name="GLib.HashTable" c:type="GHashTable*">
					<type name="gint" c:type="gint*"/>
					<type name="gint" c:type="gint*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.QuantizerMap" c:type="HeQuantizerMap*"/>
				</instance-parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_quantizer_map_new">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerMap" c:type="HeQuantizerMap*"/>
			</return-value>
		</constructor>
	</class>
	<record name="QuantizerMapClass" c:type="HeQuantizerMapClass" glib:is-gtype-struct-for="QuantizerMap">
		<field name="parent_class" readable="0" private="1">
			<type name="He.QuantizerClass" c:type="HeQuantizerClass"/>
		</field>
	</record>
	<record name="QuantizerMapPrivate" c:type="HeQuantizerMapPrivate" disguised="1"/>
	<class name="QuantizerResult" c:type="HeQuantizerResult" c:symbol-prefix="quantizer_result" glib:type-name="HeQuantizerResult" glib:get-type="he_quantizer_result_get_type" glib:type-struct="QuantizerResultClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerResultPrivate" c:type="HeQuantizerResultPrivate*"/>
		</field>
		<field name="color_to_count" writable="1">
			<type name="GLib.HashTable" c:type="GHashTable*">
				<type name="gint" c:type="gint*"/>
				<type name="gint" c:type="gint*"/>
			</type>
		</field>
		<constructor name="new" c:identifier="he_quantizer_result_new">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerResult" c:type="HeQuantizerResult*"/>
			</return-value>
			<parameters>
				<parameter name="color_to_count" transfer-ownership="none">
					<type name="GLib.HashTable" c:type="GHashTable*">
						<type name="gint" c:type="gint*"/>
						<type name="gint" c:type="gint*"/>
					</type>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="QuantizerResultClass" c:type="HeQuantizerResultClass" glib:is-gtype-struct-for="QuantizerResult">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="QuantizerResultPrivate" c:type="HeQuantizerResultPrivate" disguised="1"/>
	<class name="QuantizerWsmeans" c:type="HeQuantizerWsmeans" c:symbol-prefix="quantizer_wsmeans" glib:type-name="HeQuantizerWsmeans" glib:get-type="he_quantizer_wsmeans_get_type" glib:type-struct="QuantizerWsmeansClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerWsmeansPrivate" c:type="HeQuantizerWsmeansPrivate*"/>
		</field>
		<function name="quantize" c:identifier="he_quantizer_wsmeans_quantize">
			<return-value transfer-ownership="full">
				<type name="GLib.HashTable" c:type="GHashTable*">
					<type name="gint" c:type="gint*"/>
					<type name="gint" c:type="gint*"/>
				</type>
			</return-value>
			<parameters>
				<parameter name="input_pixels" transfer-ownership="none">
					<array length="1" c:type="gint*">
						<type name="gint" c:type="gint"/>
					</array>
				</parameter>
				<parameter name="input_pixels_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="starting_clusters" transfer-ownership="none">
					<array length="3" c:type="gint*">
						<type name="gint" c:type="gint"/>
					</array>
				</parameter>
				<parameter name="starting_clusters_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="max_colors" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</function>
	</class>
	<record name="QuantizerWsmeansClass" c:type="HeQuantizerWsmeansClass" glib:is-gtype-struct-for="QuantizerWsmeans">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="QuantizerWsmeansPrivate" c:type="HeQuantizerWsmeansPrivate" disguised="1"/>
	<class name="QuantizerWu" c:type="HeQuantizerWu" c:symbol-prefix="quantizer_wu" glib:type-name="HeQuantizerWu" glib:get-type="he_quantizer_wu_get_type" glib:type-struct="QuantizerWuClass" parent="He.Quantizer">
		<doc xml:whitespace="preserve">&lt;para&gt;An image quantizer that divides the image&amp;apos;s pixels into clusters by recursively cutting an RGB cube, based on the weight of pixels in each
area of the cube.&lt;/para&gt;
&lt;para&gt;&amp;lt;p&amp;gt;The algorithm was described by Xiaolin Wu in Graphic Gems II, published in 1991.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Quantizer" c:type="HeQuantizer"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="QuantizerWuPrivate" c:type="HeQuantizerWuPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_quantizer_wu_new">
			<return-value transfer-ownership="full">
				<type name="He.QuantizerWu" c:type="HeQuantizerWu*"/>
			</return-value>
		</constructor>
	</class>
	<record name="QuantizerWuClass" c:type="HeQuantizerWuClass" glib:is-gtype-struct-for="QuantizerWu">
		<field name="parent_class" readable="0" private="1">
			<type name="He.QuantizerClass" c:type="HeQuantizerClass"/>
		</field>
	</record>
	<record name="QuantizerWuPrivate" c:type="HeQuantizerWuPrivate" disguised="1"/>
	<class name="Score" c:type="HeScore" c:symbol-prefix="score" glib:type-name="HeScore" glib:get-type="he_score_get_type" glib:type-struct="ScoreClass" glib:fundamental="1" glib:ref-func="he_score_ref" glib:unref-func="he_score_unref" glib:set-value-func="he_value_set_score" glib:get-value-func="he_value_get_score">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.TypeInstance" c:type="GTypeInstance"/>
		</field>
		<field name="ref_count">
			<type name="gint" c:type="volatile int"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ScorePrivate" c:type="HeScorePrivate*"/>
		</field>
		<method name="score" c:identifier="he_score_score">
			<return-value transfer-ownership="full">
				<array name="GLib.Array" c:type="GArray*">
					<type name="gint" c:type="gint"/>
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Score" c:type="HeScore*"/>
				</instance-parameter>
				<parameter name="colors_to_population" transfer-ownership="none">
					<type name="GLib.HashTable" c:type="GHashTable*">
						<type name="gint" c:type="gint*"/>
						<type name="gint" c:type="gint*"/>
					</type>
				</parameter>
				<parameter name="desired" transfer-ownership="none" nullable="1">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_score_new">
			<return-value transfer-ownership="full">
				<type name="He.Score" c:type="HeScore*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ScoreClass" c:type="HeScoreClass" glib:is-gtype-struct-for="Score">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.TypeClass" c:type="GTypeClass"/>
		</field>
	</record>
	<record name="ScorePrivate" c:type="HeScorePrivate" disguised="1"/>
	<class name="ScoreAnnotatedColor" c:type="HeScoreAnnotatedColor" c:symbol-prefix="annotated_color" glib:type-name="HeScoreAnnotatedColor" glib:get-type="he_score_annotated_color_get_type" glib:type-struct="ScoreAnnotatedColorClass" glib:fundamental="1" glib:ref-func="he_score_annotated_color_ref" glib:unref-func="he_score_annotated_color_unref" glib:set-value-func="he_score_value_set_annotated_color" glib:get-value-func="he_score_value_get_annotated_color">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.TypeInstance" c:type="GTypeInstance"/>
		</field>
		<field name="ref_count">
			<type name="gint" c:type="volatile int"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ScoreAnnotatedColorPrivate" c:type="HeScoreAnnotatedColorPrivate*"/>
		</field>
		<field name="argb" writable="1">
			<type name="gint" c:type="gint"/>
		</field>
		<field name="cam_hue" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="cam_chroma" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="excited_proportion" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="score" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="he_score_annotated_color_cmp" writable="1">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</field>
		<constructor name="new" c:identifier="he_score_annotated_color_new">
			<return-value transfer-ownership="full">
				<type name="He.ScoreAnnotatedColor" c:type="HeScoreAnnotatedColor*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ScoreAnnotatedColorClass" c:type="HeScoreAnnotatedColorClass" glib:is-gtype-struct-for="ScoreAnnotatedColor">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.TypeClass" c:type="GTypeClass"/>
		</field>
	</record>
	<record name="ScoreAnnotatedColorPrivate" c:type="HeScoreAnnotatedColorPrivate" disguised="1"/>
	<class name="TemperatureCache" c:type="HeTemperatureCache" c:symbol-prefix="temperature_cache" glib:type-name="HeTemperatureCache" glib:get-type="he_temperature_cache_get_type" glib:type-struct="TemperatureCacheClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TemperatureCachePrivate" c:type="HeTemperatureCachePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_temperature_cache_new">
			<return-value transfer-ownership="full">
				<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
			</return-value>
			<parameters>
				<parameter name="input" transfer-ownership="none">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="get_hcts_by_temp" c:identifier="he_temperature_cache_get_hcts_by_temp">
			<return-value transfer-ownership="full">
				<type name="GLib.List" c:type="GList*">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="diff_temps" c:identifier="he_temperature_cache_diff_temps">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="a" transfer-ownership="none">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
				<parameter name="b" transfer-ownership="none">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_warmest" c:identifier="he_temperature_cache_get_warmest">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_coldest" c:identifier="he_temperature_cache_get_coldest">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_complement" c:identifier="he_temperature_cache_get_complement">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<method name="analogous" c:identifier="he_temperature_cache_analogous">
			<return-value transfer-ownership="full">
				<type name="GLib.List" c:type="GList*">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="count" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="divisions" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_input_relative_temperature" c:identifier="he_temperature_cache_get_input_relative_temperature">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="get_temp" c:identifier="he_temperature_cache_get_temp">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="hct" transfer-ownership="none">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="input" writable="1">
			<type name="He.HCTColor" c:type="HeHCTColor"/>
		</property>
		<method name="get_input" c:identifier="he_temperature_cache_get_input">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_input" c:identifier="he_temperature_cache_set_input">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TemperatureCache" c:type="HeTemperatureCache*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.HCTColor" c:type="HeHCTColor*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TemperatureCacheClass" c:type="HeTemperatureCacheClass" glib:is-gtype-struct-for="TemperatureCache">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="TemperatureCachePrivate" c:type="HeTemperatureCachePrivate" disguised="1"/>
	<class name="ViewingConditions" c:type="HeViewingConditions" c:symbol-prefix="viewing_conditions" glib:type-name="HeViewingConditions" glib:get-type="he_viewing_conditions_get_type" glib:type-struct="ViewingConditionsClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewingConditionsPrivate" c:type="HeViewingConditionsPrivate*"/>
		</field>
		<field name="he_viewing_conditions_default_conditions" writable="1">
			<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
		</field>
		<field name="rgb_d" writable="1">
			<array c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</field>
		<field name="rgb_d_length1">
			<type name="gint" c:type="gint"/>
		</field>
		<function name="lerp" c:identifier="he_viewing_conditions_lerp">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<parameter name="start" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="stop" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</function>
		<function name="make" c:identifier="he_viewing_conditions_make">
			<return-value transfer-ownership="full">
				<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
			</return-value>
			<parameters>
				<parameter name="white_point" transfer-ownership="none">
					<array length="1" c:type="gdouble*">
						<type name="gdouble" c:type="gdouble"/>
					</array>
				</parameter>
				<parameter name="white_point_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="adapting_luminance" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="bg_lstar" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="surround" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="discount_illuminant" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</function>
		<function name="with_lstar" c:identifier="he_viewing_conditions_with_lstar">
			<return-value transfer-ownership="full">
				<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
			</return-value>
			<parameters>
				<parameter name="lstar" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</function>
		<property name="aw" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_aw" c:identifier="he_viewing_conditions_get_aw">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_aw" c:identifier="he_viewing_conditions_set_aw">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="nbb" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_nbb" c:identifier="he_viewing_conditions_get_nbb">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_nbb" c:identifier="he_viewing_conditions_set_nbb">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="ncb" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_ncb" c:identifier="he_viewing_conditions_get_ncb">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_ncb" c:identifier="he_viewing_conditions_set_ncb">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="c" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_c" c:identifier="he_viewing_conditions_get_c">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_c" c:identifier="he_viewing_conditions_set_c">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="nc" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_nc" c:identifier="he_viewing_conditions_get_nc">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_nc" c:identifier="he_viewing_conditions_set_nc">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="n" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_n" c:identifier="he_viewing_conditions_get_n">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_n" c:identifier="he_viewing_conditions_set_n">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="fl" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_fl" c:identifier="he_viewing_conditions_get_fl">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_fl" c:identifier="he_viewing_conditions_set_fl">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="fl-root" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_fl_root" c:identifier="he_viewing_conditions_get_fl_root">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_fl_root" c:identifier="he_viewing_conditions_set_fl_root">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<property name="z" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_z" c:identifier="he_viewing_conditions_get_z">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_z" c:identifier="he_viewing_conditions_set_z">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewingConditions" c:type="HeViewingConditions*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewingConditionsClass" c:type="HeViewingConditionsClass" glib:is-gtype-struct-for="ViewingConditions">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="ViewingConditionsPrivate" c:type="HeViewingConditionsPrivate" disguised="1"/>
	<class name="AboutWindow" c:type="HeAboutWindow" c:symbol-prefix="about_window" glib:type-name="HeAboutWindow" glib:get-type="he_about_window_get_type" glib:type-struct="AboutWindowClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;An AboutWindow is a window that displays information about the application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AboutWindowPrivate" c:type="HeAboutWindowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_about_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new AboutWindow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
			</return-value>
			<parameters>
				<parameter name="parent" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The parent window. &lt;/para&gt;</doc>
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
				<parameter name="app_name" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s name. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="app_id" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s reverse-domain name. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="version" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s version. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s icon. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="translate_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where contributors can help translate the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="issue_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can report a problem with the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="more_info_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can get more information about the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="translators" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s translators. &lt;/para&gt;</doc>
					<array length="9" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="translators_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="developers" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s developers. &lt;/para&gt;</doc>
					<array length="11" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="developers_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="copyright_year" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s copyright year. &lt;/para&gt;</doc>
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="license" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s license. &lt;/para&gt;</doc>
					<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
				</parameter>
				<parameter name="color" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The color of the AboutWindow. &lt;/para&gt;</doc>
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The theme color of the AboutWindow.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_about_window_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_about_window_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="license" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The license shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
		</property>
		<method name="get_license" c:identifier="he_about_window_get_license">
			<return-value transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_license" c:identifier="he_about_window_set_license">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
				</parameter>
			</parameters>
		</method>
		<property name="version" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The version shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_version" c:identifier="he_about_window_get_version">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_version" c:identifier="he_about_window_set_version">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="app-name" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The name of the application shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_app_name" c:identifier="he_about_window_get_app_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_app_name" c:identifier="he_about_window_set_app_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_about_window_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_about_window_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="translator-names" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The translators shown in the AboutWindow.&lt;/para&gt;</doc>
			<array c:type="gchar**">
				<type name="utf8" c:type="gchar*"/>
			</array>
		</property>
		<method name="get_translator_names" c:identifier="he_about_window_get_translator_names">
			<return-value transfer-ownership="none">
				<array length="0" c:type="gchar**">
					<type name="utf8" c:type="gchar*"/>
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_translator_names" c:identifier="he_about_window_set_translator_names">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="value_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="developer-names" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The developers shown in the AboutWindow.&lt;/para&gt;</doc>
			<array c:type="gchar**">
				<type name="utf8" c:type="gchar*"/>
			</array>
		</property>
		<method name="get_developer_names" c:identifier="he_about_window_get_developer_names">
			<return-value transfer-ownership="none">
				<array length="0" c:type="gchar**">
					<type name="utf8" c:type="gchar*"/>
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_developer_names" c:identifier="he_about_window_set_developer_names">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="value_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="copyright-year" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The copyright year shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_copyright_year" c:identifier="he_about_window_get_copyright_year">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_copyright_year" c:identifier="he_about_window_set_copyright_year">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="app-id" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s reverse-domain name.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_app_id" c:identifier="he_about_window_get_app_id">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_app_id" c:identifier="he_about_window_set_app_id">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="translate-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where contributors can help translate the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_translate_url" c:identifier="he_about_window_get_translate_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_translate_url" c:identifier="he_about_window_set_translate_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="issue-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can report a problem with the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_issue_url" c:identifier="he_about_window_get_issue_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_issue_url" c:identifier="he_about_window_set_issue_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="more-info-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can get more information about the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_more_info_url" c:identifier="he_about_window_get_more_info_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_more_info_url" c:identifier="he_about_window_set_more_info_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AboutWindowClass" c:type="HeAboutWindowClass" glib:is-gtype-struct-for="AboutWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="AboutWindowPrivate" c:type="HeAboutWindowPrivate" disguised="1"/>
	<enumeration name="AboutWindowLicenses" c:type="HeAboutWindowLicenses" glib:type-name="HeAboutWindowLicenses" glib:get-type="he_about_window_licenses_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum of commonly used licenses to be used in AboutWindow.&lt;/para&gt;</doc>
		<member name="gplv3" c:identifier="HE_ABOUT_WINDOW_LICENSES_GPLV3" value="0"/>
		<member name="mit" c:identifier="HE_ABOUT_WINDOW_LICENSES_MIT" value="1"/>
		<member name="mplv2" c:identifier="HE_ABOUT_WINDOW_LICENSES_MPLV2" value="2"/>
		<member name="unlicense" c:identifier="HE_ABOUT_WINDOW_LICENSES_UNLICENSE" value="3"/>
		<member name="apachev2" c:identifier="HE_ABOUT_WINDOW_LICENSES_APACHEV2" value="4"/>
		<member name="wtfpl" c:identifier="HE_ABOUT_WINDOW_LICENSES_WTFPL" value="5"/>
		<member name="proprietary" c:identifier="HE_ABOUT_WINDOW_LICENSES_PROPRIETARY" value="6"/>
	</enumeration>
	<function name="about_window_licenses_get_url" c:identifier="he_about_window_licenses_get_url">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the license url for the license.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="about_window_licenses_get_name" c:identifier="he_about_window_licenses_get_name">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the license name for the license.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</instance-parameter>
		</parameters>
	</function>
	<class name="AppBar" c:type="HeAppBar" c:symbol-prefix="app_bar" glib:type-name="HeAppBar" glib:get-type="he_app_bar_get_type" glib:type-struct="AppBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An AppBar is the header bar of an Window. It usually provides controls to manage the window, as well as optional children for more granular
control.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AppBarPrivate" c:type="HeAppBarPrivate*"/>
		</field>
		<field name="back_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The button to go back one view displayed in the AppBar.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</field>
		<field name="btn_box" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The button box in the AppBar, shows below and to the right side of the title, or alongside the window controls, based on scrollers.&lt;/para&gt;</doc>
			<type name="Gtk.Box" c:type="GtkBox*"/>
		</field>
		<method name="append" c:identifier="he_app_bar_append">
			<doc xml:whitespace="preserve">&lt;para&gt;Append a child to the AppBar. Please note that an AppBar should only have at most three children.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to append. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="append_toggle" c:identifier="he_app_bar_append_toggle">
			<doc xml:whitespace="preserve">&lt;para&gt;Append a togglebutton child to the AppBar. Please note that an AppBar should only have at most three children.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to append. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="append_menu" c:identifier="he_app_bar_append_menu">
			<doc xml:whitespace="preserve">&lt;para&gt;Append a menubutton child to the AppBar. Please note that an AppBar should only have at most three children.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to append. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_app_bar_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove a child from the AppBar.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_app_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new AppBar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.AppBar" c:type="HeAppBar*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the AppBar is associated with. This is used to determine the back button&amp;apos;s functionality.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_app_bar_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_app_bar_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="scroller" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The ScrolledWindow that the AppBar is associated with. This is used to move the view&amp;apos;s title to the AppBar and unsetting flatness.&lt;/para&gt;</doc>
			<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
		</property>
		<method name="get_scroller" c:identifier="he_app_bar_get_scroller">
			<return-value transfer-ownership="none">
				<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_scroller" c:identifier="he_app_bar_set_scroller">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-compact" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_compact" c:identifier="he_app_bar_get_is_compact">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_compact" c:identifier="he_app_bar_set_is_compact">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="viewtitle-label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title to the left on the AppBar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_viewtitle_label" c:identifier="he_app_bar_get_viewtitle_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_viewtitle_label" c:identifier="he_app_bar_set_viewtitle_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="viewtitle-widget" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title widget to the left on the AppBar. If this is set, the other title &amp;lpar;not subtitle&amp;rpar; props won&amp;apos;t work, and the mini title
on collapsed state won&amp;apos;t show.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_viewtitle_widget" c:identifier="he_app_bar_get_viewtitle_widget">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_viewtitle_widget" c:identifier="he_app_bar_set_viewtitle_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="viewsubtitle-label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The subtitle to the left on the AppBar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_viewsubtitle_label" c:identifier="he_app_bar_get_viewsubtitle_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_viewsubtitle_label" c:identifier="he_app_bar_set_viewsubtitle_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-left-title-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the close, minimize and maximize buttons are shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_left_title_buttons" c:identifier="he_app_bar_get_show_left_title_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_left_title_buttons" c:identifier="he_app_bar_set_show_left_title_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-right-title-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the close, minimize and maximize buttons are shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_right_title_buttons" c:identifier="he_app_bar_get_show_right_title_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_right_title_buttons" c:identifier="he_app_bar_set_show_right_title_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="decoration-layout" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The layout of the window buttons a.k.a. where to put close, maximize, minimize. It is a string in the format &amp;quot;&amp;lt;left&amp;gt;:&amp;lt;right&amp;gt;
&amp;quot;.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_decoration_layout" c:identifier="he_app_bar_get_decoration_layout">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_decoration_layout" c:identifier="he_app_bar_set_decoration_layout">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-back" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the back button is shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_back" c:identifier="he_app_bar_get_show_back">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_back" c:identifier="he_app_bar_set_show_back">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AppBarClass" c:type="HeAppBarClass" glib:is-gtype-struct-for="AppBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="AppBarPrivate" c:type="HeAppBarPrivate" disguised="1"/>
	<class name="ApplicationWindow" c:type="HeApplicationWindow" c:symbol-prefix="application_window" glib:type-name="HeApplicationWindow" glib:get-type="he_application_window_get_type" glib:type-struct="ApplicationWindowClass" parent="Gtk.ApplicationWindow">
		<doc xml:whitespace="preserve">&lt;para&gt;An ApplicationWindow is a Window for holding the main content of an application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ApplicationWindowPrivate" c:type="HeApplicationWindowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_application_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ApplicationWindow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
			</return-value>
			<parameters>
				<parameter name="app" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The application associated with this window. &lt;/para&gt;</doc>
					<type name="He.Application" c:type="HeApplication*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="has-title" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_title" c:identifier="he_application_window_get_has_title">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_title" c:identifier="he_application_window_set_has_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-back-button" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_back_button" c:identifier="he_application_window_get_has_back_button">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_back_button" c:identifier="he_application_window_set_has_back_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ApplicationWindowClass" c:type="HeApplicationWindowClass" glib:is-gtype-struct-for="ApplicationWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ApplicationWindowClass" c:type="GtkApplicationWindowClass"/>
		</field>
	</record>
	<record name="ApplicationWindowPrivate" c:type="HeApplicationWindowPrivate" disguised="1"/>
	<class name="Avatar" c:type="HeAvatar" c:symbol-prefix="avatar" glib:type-name="HeAvatar" glib:get-type="he_avatar_get_type" glib:type-struct="AvatarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An Avatar is an element that displays an image that represents a person.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AvatarPrivate" c:type="HeAvatarPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_avatar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Avatar.&lt;/para&gt;

Since: 1.1</doc>
			<return-value transfer-ownership="none">
				<type name="He.Avatar" c:type="HeAvatar*"/>
			</return-value>
			<parameters>
				<parameter name="size" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="image" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to display &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="text" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="status" transfer-ownership="none" nullable="1">
					<type name="gboolean" c:type="gboolean*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="size" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The size of the avatar.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_size" c:identifier="he_avatar_get_size">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_size" c:identifier="he_avatar_set_size">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="text" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The text of the avatar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_text" c:identifier="he_avatar_get_text">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_text" c:identifier="he_avatar_set_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="status" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The status shown on top of the avatar with a badge. e.g. when the user is offline, set it to false.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_status" c:identifier="he_avatar_get_status">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_status" c:identifier="he_avatar_set_status">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="image" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The image of the avatar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_image" c:identifier="he_avatar_get_image">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_image" c:identifier="he_avatar_set_image">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AvatarClass" c:type="HeAvatarClass" glib:is-gtype-struct-for="Avatar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="AvatarPrivate" c:type="HeAvatarPrivate" disguised="1"/>
	<class name="Badge" c:type="HeBadge" c:symbol-prefix="badge" glib:type-name="HeBadge" glib:get-type="he_badge_get_type" glib:type-struct="BadgeClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Badge is a small status indicator that can be used to provide additional information about an object.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BadgePrivate" c:type="HeBadgePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_badge_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new badge.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.Badge" c:type="HeBadge*"/>
			</return-value>
		</constructor>
		<property name="child" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The child of the badge.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_badge_get_child">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_badge_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Text to display in the badge.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_badge_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_badge_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BadgeClass" c:type="HeBadgeClass" glib:is-gtype-struct-for="Badge">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BadgePrivate" c:type="HeBadgePrivate" disguised="1"/>
	<class name="Banner" c:type="HeBanner" c:symbol-prefix="banner" glib:type-name="HeBanner" glib:get-type="he_banner_get_type" glib:type-struct="BannerClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Banner is a widget that displays a message to the user and provides a way for the user to act on the message.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BannerPrivate" c:type="HeBannerPrivate*"/>
		</field>
		<method name="add_action_button" c:identifier="he_banner_add_action_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a button to the banner.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The button to add to the banner. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_action" c:identifier="he_banner_remove_action">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove a button from the banner.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The button to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_banner_style" c:identifier="he_banner_set_banner_style">
			<doc xml:whitespace="preserve">&lt;para&gt;Set the banner style.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="style" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The style to set the banner to. &lt;/para&gt;</doc>
					<type name="He.BannerStyle" c:type="HeBannerStyle"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_banner_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Construct a new banner.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Banner" c:type="HeBanner*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the banner. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The description of the banner. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the banner&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_banner_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_banner_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the banner&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_banner_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_banner_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="style" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The style of the banner&lt;/para&gt;</doc>
			<type name="He.BannerStyle" c:type="HeBannerStyle"/>
		</property>
		<method name="get_style" c:identifier="he_banner_get_style">
			<return-value transfer-ownership="none">
				<type name="He.BannerStyle" c:type="HeBannerStyle"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_style" c:identifier="he_banner_set_style">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.BannerStyle" c:type="HeBannerStyle"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BannerClass" c:type="HeBannerClass" glib:is-gtype-struct-for="Banner">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BannerPrivate" c:type="HeBannerPrivate" disguised="1"/>
	<enumeration name="BannerStyle" c:type="HeBannerStyle" glib:type-name="HeBannerStyle" glib:get-type="he_banner_style_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum representing the style of the banner.&lt;/para&gt;</doc>
		<member name="info" c:identifier="HE_BANNER_STYLE_INFO" value="0"/>
		<member name="warning" c:identifier="HE_BANNER_STYLE_WARNING" value="1"/>
		<member name="error" c:identifier="HE_BANNER_STYLE_ERROR" value="2"/>
	</enumeration>
	<class name="BottomBar" c:type="HeBottomBar" c:symbol-prefix="bottom_bar" glib:type-name="HeBottomBar" glib:get-type="he_bottom_bar_get_type" glib:type-struct="BottomBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A BottomBar is a toolbar made to make actions on content more visible. It may have up to 5 actions on each side. It has title and description
labels, which can be part of a menu&amp;apos;s label.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BottomBarPrivate" c:type="HeBottomBarPrivate*"/>
		</field>
		<constructor name="with_details" c:identifier="he_bottom_bar_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.BottomBar" c:type="HeBottomBar*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the bottom bar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The description of the bottom bar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_bottom_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.BottomBar" c:type="HeBottomBar*"/>
			</return-value>
		</constructor>
		<method name="append_button" c:identifier="he_bottom_bar_append_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add an action to the bottom bar on the end of the bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="prepend_button" c:identifier="he_bottom_bar_prepend_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add an action to the bottom bar on the start of the bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_button" c:identifier="he_bottom_bar_remove_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove an action of the bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="insert_button_after" c:identifier="he_bottom_bar_insert_button_after">
			<doc xml:whitespace="preserve">&lt;para&gt;Insert an action after another action.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="after" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action after which the action is. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="reorder_button_after" c:identifier="he_bottom_bar_reorder_button_after">
			<doc xml:whitespace="preserve">&lt;para&gt;Reorder an action based on another action.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="sibling" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action after which the action is. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the bottom bar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_bottom_bar_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_bottom_bar_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the bottom bar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_bottom_bar_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_bottom_bar_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu-model" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu_model of the bottom bar. If a menu_model is set, show it on the center widget of the bottom bar.&lt;/para&gt;</doc>
			<type name="Gio.MenuModel" c:type="GMenuModel*"/>
		</property>
		<method name="get_menu_model" c:identifier="he_bottom_bar_get_menu_model">
			<return-value transfer-ownership="none">
				<type name="Gio.MenuModel" c:type="GMenuModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_menu_model" c:identifier="he_bottom_bar_set_menu_model">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.MenuModel" c:type="GMenuModel*"/>
				</parameter>
			</parameters>
		</method>
		<property name="collapse-actions" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether to collapse actions into a menu.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_collapse_actions" c:identifier="he_bottom_bar_get_collapse_actions">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_collapse_actions" c:identifier="he_bottom_bar_set_collapse_actions">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BottomBarClass" c:type="HeBottomBarClass" glib:is-gtype-struct-for="BottomBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BottomBarPrivate" c:type="HeBottomBarPrivate" disguised="1"/>
	<enumeration name="BottomBarPosition" c:type="HeBottomBarPosition" glib:type-name="HeBottomBarPosition" glib:get-type="he_bottom_bar_position_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum to define the position of the bottom bar actions.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_BOTTOM_BAR_POSITION_LEFT" value="0"/>
		<member name="right" c:identifier="HE_BOTTOM_BAR_POSITION_RIGHT" value="1"/>
	</enumeration>
	<class name="BottomSheet" c:type="HeBottomSheet" c:symbol-prefix="bottom_sheet" glib:type-name="HeBottomSheet" glib:get-type="he_bottom_sheet_get_type" glib:type-struct="BottomSheetClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A BottomSheet is a UI component made to showcase accessory actions. It may have an action button. It has a title label and contents.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BottomSheetPrivate" c:type="HeBottomSheetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_bottom_sheet_new">
			<return-value transfer-ownership="none">
				<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
			</return-value>
		</constructor>
		<property name="sheet" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_sheet" c:identifier="he_bottom_sheet_get_sheet">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_sheet" c:identifier="he_bottom_sheet_set_sheet">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="button" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_button" c:identifier="he_bottom_sheet_get_button">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_button" c:identifier="he_bottom_sheet_set_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="title" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_bottom_sheet_get_title">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_bottom_sheet_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-sheet" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_sheet" c:identifier="he_bottom_sheet_get_show_sheet">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_sheet" c:identifier="he_bottom_sheet_set_show_sheet">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="modal" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_modal" c:identifier="he_bottom_sheet_get_modal">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_modal" c:identifier="he_bottom_sheet_set_modal">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-handle" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_handle" c:identifier="he_bottom_sheet_get_show_handle">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_handle" c:identifier="he_bottom_sheet_set_show_handle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="preferred-sheet-height" writable="1">
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_preferred_sheet_height" c:identifier="he_bottom_sheet_get_preferred_sheet_height">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_preferred_sheet_height" c:identifier="he_bottom_sheet_set_preferred_sheet_height">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomSheet" c:type="HeBottomSheet*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="hidden">
			<doc xml:whitespace="preserve">&lt;para&gt;The hidden signal fires when the sheet is hidden.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="BottomSheetClass" c:type="HeBottomSheetClass" glib:is-gtype-struct-for="BottomSheet">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
	</record>
	<record name="BottomSheetPrivate" c:type="HeBottomSheetPrivate" disguised="1"/>
	<class name="Button" c:type="HeButton" c:symbol-prefix="button" glib:type-name="HeButton" glib:get-type="he_button_get_type" glib:type-struct="ButtonClass" parent="Gtk.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A class to derive UI Buttons from.&lt;/para&gt;

Since: 1.0</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Button" c:type="GtkButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ButtonPrivate" c:type="HeButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_button_new">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="text" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="color" writable="1">
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_button_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_button_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-disclosure" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_disclosure" c:identifier="he_button_get_is_disclosure">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_disclosure" c:identifier="he_button_set_is_disclosure">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-iconic" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_iconic" c:identifier="he_button_get_is_iconic">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_iconic" c:identifier="he_button_set_is_iconic">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-outline" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_outline" c:identifier="he_button_get_is_outline">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_outline" c:identifier="he_button_set_is_outline">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-tint" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_tint" c:identifier="he_button_get_is_tint">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_tint" c:identifier="he_button_set_is_tint">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-fill" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_fill" c:identifier="he_button_get_is_fill">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_fill" c:identifier="he_button_set_is_fill">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-pill" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_pill" c:identifier="he_button_get_is_pill">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_pill" c:identifier="he_button_set_is_pill">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-textual" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_textual" c:identifier="he_button_get_is_textual">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_textual" c:identifier="he_button_set_is_textual">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_button_get_icon">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="text" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_text" c:identifier="he_button_get_text">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_text" c:identifier="he_button_set_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ButtonClass" c:type="HeButtonClass" glib:is-gtype-struct-for="Button">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
		</field>
	</record>
	<record name="ButtonPrivate" c:type="HeButtonPrivate" disguised="1"/>
	<class name="Chip" c:type="HeChip" c:symbol-prefix="chip" glib:type-name="HeChip" glib:get-type="he_chip_get_type" glib:type-struct="ChipClass" parent="Gtk.ToggleButton">
		<doc xml:whitespace="preserve">&lt;para&gt;A Chip is an element that can facilitate entering information, making selections, filtering content, or triggering actions.&lt;/para&gt;</doc>
		<implements name="Gtk.Actionable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ToggleButton" c:type="GtkToggleButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ChipPrivate" c:type="HeChipPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_chip_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Chip.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Chip" c:type="HeChip*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The text to display in the chip. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="chip-label" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_chip_label" c:identifier="he_chip_get_chip_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Chip" c:type="HeChip*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_chip_label" c:identifier="he_chip_set_chip_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Chip" c:type="HeChip*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ChipClass" c:type="HeChipClass" glib:is-gtype-struct-for="Chip">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ToggleButtonClass" c:type="GtkToggleButtonClass"/>
		</field>
	</record>
	<record name="ChipPrivate" c:type="HeChipPrivate" disguised="1"/>
	<class name="ChipGroup" c:type="HeChipGroup" c:symbol-prefix="chip_group" glib:type-name="HeChipGroup" glib:get-type="he_chip_group_get_type" glib:type-struct="ChipGroupClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ChipGroup is a holder widget for Chips.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ChipGroupPrivate" c:type="HeChipGroupPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_chip_group_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ChipGroup.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ChipGroup" c:type="HeChipGroup*"/>
			</return-value>
		</constructor>
		<property name="selection-model" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The selectionmodel that is controlled by this group.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.SingleSelection" c:type="GtkSingleSelection*"/>
		</property>
		<method name="get_selection_model" c:identifier="he_chip_group_get_selection_model">
			<return-value transfer-ownership="none">
				<type name="Gtk.SingleSelection" c:type="GtkSingleSelection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ChipGroup" c:type="HeChipGroup*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_selection_model" c:identifier="he_chip_group_set_selection_model">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ChipGroup" c:type="HeChipGroup*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.SingleSelection" c:type="GtkSingleSelection*"/>
				</parameter>
			</parameters>
		</method>
		<property name="single-line" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_single_line" c:identifier="he_chip_group_get_single_line">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ChipGroup" c:type="HeChipGroup*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_single_line" c:identifier="he_chip_group_set_single_line">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ChipGroup" c:type="HeChipGroup*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ChipGroupClass" c:type="HeChipGroupClass" glib:is-gtype-struct-for="ChipGroup">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ChipGroupPrivate" c:type="HeChipGroupPrivate" disguised="1"/>
	<class name="ContentBlock" c:type="HeContentBlock" c:symbol-prefix="content_block" glib:type-name="HeContentBlock" glib:get-type="he_content_block_get_type" glib:type-struct="ContentBlockClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlock displays a single block of content, which contains an icon, text and optional buttons.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockPrivate" c:type="HeContentBlockPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_content_block_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new ContentBlock.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ContentBlock" c:type="HeContentBlock*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="secondary_button" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The secondary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_block_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_block_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_content_block_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_content_block_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_content_block_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_content_block_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block, as a GLib.Icon.&lt;/para&gt;</doc>
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_content_block_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the secondary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_secondary_button" c:identifier="he_content_block_get_secondary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_button" c:identifier="he_content_block_set_secondary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the primary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_content_block_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_content_block_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockClass" c:type="HeContentBlockClass" glib:is-gtype-struct-for="ContentBlock">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockPrivate" c:type="HeContentBlockPrivate" disguised="1"/>
	<class name="ContentBlockImage" c:type="HeContentBlockImage" c:symbol-prefix="content_block_image" glib:type-name="HeContentBlockImage" glib:get-type="he_content_block_image_get_type" glib:type-struct="ContentBlockImageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlockImage component is used to render an image inside a ContentBlock.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockImagePrivate" c:type="HeContentBlockImagePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_content_block_image_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ContentBlockImage.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The file path of the image. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="file" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The file path of the image.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_file" c:identifier="he_content_block_image_get_file">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_file" c:identifier="he_content_block_image_set_file">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="requested-height" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The height of the image.&lt;/para&gt;

Since: 1.0</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_requested_height" c:identifier="he_content_block_image_get_requested_height">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_requested_height" c:identifier="he_content_block_image_set_requested_height">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="requested-width" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The width of the image.&lt;/para&gt;

Since: 1.0</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_requested_width" c:identifier="he_content_block_image_get_requested_width">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_requested_width" c:identifier="he_content_block_image_set_requested_width">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockImageClass" c:type="HeContentBlockImageClass" glib:is-gtype-struct-for="ContentBlockImage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockImagePrivate" c:type="HeContentBlockImagePrivate" disguised="1"/>
	<class name="ContentBlockImageCluster" c:type="HeContentBlockImageCluster" c:symbol-prefix="content_block_image_cluster" glib:type-name="HeContentBlockImageCluster" glib:get-type="he_content_block_image_cluster_get_type" glib:type-struct="ContentBlockImageClusterClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlockImageCluster is a cluster of images that are rendered together in the same content block.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockImageClusterPrivate" c:type="HeContentBlockImageClusterPrivate*"/>
		</field>
		<method name="set_image" c:identifier="he_content_block_image_cluster_set_image">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets an image to be displayed in the cluster.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="image" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to display. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the image in the cluster. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_image" c:identifier="he_content_block_image_cluster_remove_image">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an image from the cluster.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="image" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to remove. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_content_block_image_cluster_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ContentBlockImageCluster.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the cluster. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the cluster. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the cluster. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_block_image_cluster_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_block_image_cluster_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_content_block_image_cluster_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_content_block_image_cluster_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The image of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_content_block_image_cluster_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_content_block_image_cluster_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockImageClusterClass" c:type="HeContentBlockImageClusterClass" glib:is-gtype-struct-for="ContentBlockImageCluster">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockImageClusterPrivate" c:type="HeContentBlockImageClusterPrivate" disguised="1"/>
	<enumeration name="ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition" glib:type-name="HeContentBlockImageClusterImagePosition" glib:get-type="he_content_block_image_cluster_image_position_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The position of the cluster image in the cluster.&lt;/para&gt;</doc>
		<member name="top_left" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_LEFT" value="0"/>
		<member name="bottom_left" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_LEFT" value="1"/>
		<member name="top_right" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_RIGHT" value="2"/>
		<member name="bottom_right" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_RIGHT" value="3"/>
	</enumeration>
	<function name="content_block_image_cluster_image_position_get_column" c:identifier="he_content_block_image_cluster_image_position_get_column">
		<doc xml:whitespace="preserve">&lt;para&gt;Gets the column of the position.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="content_block_image_cluster_image_position_get_row" c:identifier="he_content_block_image_cluster_image_position_get_row">
		<doc xml:whitespace="preserve">&lt;para&gt;Gets the row of the position.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
			</instance-parameter>
		</parameters>
	</function>
	<class name="ContentList" c:type="HeContentList" c:symbol-prefix="content_list" glib:type-name="HeContentList" glib:get-type="he_content_list_get_type" glib:type-struct="ContentListClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Content List is a list of content blocks with an optional title and description.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentListPrivate" c:type="HeContentListPrivate*"/>
		</field>
		<field name="children" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A List of all the children of the content list.&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</type>
		</field>
		<method name="add" c:identifier="he_content_list_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a new item to the content list.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to add. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_content_list_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an item from the content list.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_content_list_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ContentList.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ContentList" c:type="HeContentList*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the content list.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_list_get_title">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_list_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the content list.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_content_list_get_description">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_content_list_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentListClass" c:type="HeContentListClass" glib:is-gtype-struct-for="ContentList">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentListPrivate" c:type="HeContentListPrivate" disguised="1"/>
	<class name="DatePicker" c:type="HeDatePicker" c:symbol-prefix="date_picker" glib:type-name="HeDatePicker" glib:get-type="he_date_picker_get_type" glib:type-struct="DatePickerClass" parent="Gtk.Entry">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Entry" c:type="GtkEntry"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DatePickerPrivate" c:type="HeDatePickerPrivate*"/>
		</field>
		<constructor name="with_format" c:identifier="he_date_picker_new_with_format">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates this widget with a predetermined date format.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.DatePicker" c:type="HeDatePicker*"/>
			</return-value>
			<parameters>
				<parameter name="format" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_date_picker_new">
			<return-value transfer-ownership="none">
				<type name="He.DatePicker" c:type="HeDatePicker*"/>
			</return-value>
		</constructor>
		<property name="format" writable="1" construct-only="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The string format of how to display the date.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_format" c:identifier="he_date_picker_get_format">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.DatePicker" c:type="HeDatePicker*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="date" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The date to be used.&lt;/para&gt;</doc>
			<type name="GLib.DateTime" c:type="GDateTime*"/>
		</property>
		<method name="get_date" c:identifier="he_date_picker_get_date">
			<return-value transfer-ownership="none">
				<type name="GLib.DateTime" c:type="GDateTime*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.DatePicker" c:type="HeDatePicker*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_date" c:identifier="he_date_picker_set_date">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.DatePicker" c:type="HeDatePicker*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.DateTime" c:type="GDateTime*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DatePickerClass" c:type="HeDatePickerClass" glib:is-gtype-struct-for="DatePicker">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
		</field>
	</record>
	<record name="DatePickerPrivate" c:type="HeDatePickerPrivate" disguised="1"/>
	<class name="Dialog" c:type="HeDialog" c:symbol-prefix="dialog" glib:type-name="HeDialog" glib:get-type="he_dialog_get_type" glib:type-struct="DialogClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A Dialog is a modal window that asks the user for input or shows a message.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DialogPrivate" c:type="HeDialogPrivate*"/>
		</field>
		<field name="cancel_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The cancel button in the dialog.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</field>
		<method name="add" c:identifier="he_dialog_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child directly to the Dialog. Used only in code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_dialog_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new dialog.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Dialog" c:type="HeDialog*"/>
			</return-value>
			<parameters>
				<parameter name="modal" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Whether the dialog is modal. &lt;/para&gt;</doc>
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The parent window of the dialog. &lt;/para&gt;</doc>
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="info" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The info text of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the dialog. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="secondary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The secondary button of the dialog. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_dialog_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_dialog_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="info" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the info text of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_info" c:identifier="he_dialog_get_info">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_info" c:identifier="he_dialog_set_info">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_dialog_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_dialog_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the secondary button of the dialog.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_secondary_button" c:identifier="he_dialog_get_secondary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_button" c:identifier="he_dialog_set_secondary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the primary button of the dialog.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_dialog_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_dialog_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DialogClass" c:type="HeDialogClass" glib:is-gtype-struct-for="Dialog">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="DialogPrivate" c:type="HeDialogPrivate" disguised="1"/>
	<class name="Divider" c:type="HeDivider" c:symbol-prefix="divider" glib:type-name="HeDivider" glib:get-type="he_divider_get_type" glib:type-struct="DividerClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Divider is a thin line that groups content in a view, can be full-width &amp;lpar;default&amp;rpar; or inset&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DividerPrivate" c:type="HeDividerPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_divider_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Divider.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.Divider" c:type="HeDivider*"/>
			</return-value>
		</constructor>
		<property name="is-inset" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_inset" c:identifier="he_divider_get_is_inset">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Divider" c:type="HeDivider*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_inset" c:identifier="he_divider_set_is_inset">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Divider" c:type="HeDivider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-vertical" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_vertical" c:identifier="he_divider_get_is_vertical">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Divider" c:type="HeDivider*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_vertical" c:identifier="he_divider_set_is_vertical">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Divider" c:type="HeDivider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DividerClass" c:type="HeDividerClass" glib:is-gtype-struct-for="Divider">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="DividerPrivate" c:type="HeDividerPrivate" disguised="1"/>
	<class name="Dropdown" c:type="HeDropdown" c:symbol-prefix="dropdown" glib:type-name="HeDropdown" glib:get-type="he_dropdown_get_type" glib:type-struct="DropdownClass" parent="Gtk.Grid" final="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A &lt;type&gt;HeDropdown&lt;/type&gt; is a simple variant of &lt;type&gt;GtkDropDown&lt;/type&gt; for easy developing.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Grid" c:type="GtkGrid"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DropdownPrivate" c:type="HeDropdownPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_dropdown_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new &lt;type&gt;HeDropdown&lt;/type&gt;.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;A new &lt;type&gt;HeDropdown&lt;/type&gt; &lt;/para&gt;</doc>
				<type name="He.Dropdown" c:type="HeDropdown*"/>
			</return-value>
		</constructor>
		<method name="append" c:identifier="he_dropdown_append">
			<doc xml:whitespace="preserve">&lt;para&gt;Appends text to the list of strings stored in this.&lt;/para&gt;
&lt;para&gt;This is the same as calling &lt;function&gt;he_dropdown_insert&lt;/function&gt; with a position of -1.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="text" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;A string &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_active" c:identifier="he_dropdown_get_active">
			<doc xml:whitespace="preserve">&lt;para&gt;Returns the currently active string in this.&lt;/para&gt;
&lt;para&gt;If no row is currently selected, null is returned. If this contains an entry, this function will return its contents &amp;lpar;which will not
necessarily be an item from the list&amp;rpar;.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;A newly allocated string containing the currently active text. Must be freed with g_free. &lt;/para&gt;</doc>
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="insert" c:identifier="he_dropdown_insert">
			<doc xml:whitespace="preserve">&lt;para&gt;Inserts text at position in the list of strings stored in this.&lt;/para&gt;
&lt;para&gt;If position is negative then text is appended.&lt;br/&gt; This is the same as calling &lt;function&gt;he_dropdown_insert&lt;/function&gt; with a null ID string.
&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;An index to insert text &lt;/para&gt;</doc>
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="text" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;A string &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="prepend" c:identifier="he_dropdown_prepend">
			<doc xml:whitespace="preserve">&lt;para&gt;Prepends text to the list of strings stored in this.&lt;/para&gt;
&lt;para&gt;This is the same as calling &lt;function&gt;he_dropdown_insert&lt;/function&gt; with a position of 0.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="text" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;A string &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_dropdown_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes the string at position from this.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Index of the item to remove &lt;/para&gt;</doc>
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_all" c:identifier="he_dropdown_remove_all">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes all the text entries from the dropdown.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="active-id" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The value of the ID column of the active row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_active_id" c:identifier="he_dropdown_get_active_id">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_active_id" c:identifier="he_dropdown_set_active_id">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="max-width-chars" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The desired maximum width of the label, in characters.&lt;/para&gt;
&lt;para&gt;If this property is set to -1, the width will be calculated automatically.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_max_width_chars" c:identifier="he_dropdown_get_max_width_chars">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_max_width_chars" c:identifier="he_dropdown_set_max_width_chars">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="ellipsize" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The preferred place to ellipsize the string, if the label does not have enough room to display the entire string.&lt;/para&gt;</doc>
			<type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
		</property>
		<method name="get_ellipsize" c:identifier="he_dropdown_get_ellipsize">
			<return-value transfer-ownership="none">
				<type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_ellipsize" c:identifier="he_dropdown_set_ellipsize">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
				</parameter>
			</parameters>
		</method>
		<property name="dropdown" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A &lt;type&gt;GtkDropDown&lt;/type&gt; which this uses internally.&lt;/para&gt;</doc>
			<type name="Gtk.DropDown" c:type="GtkDropDown*"/>
		</property>
		<method name="get_dropdown" c:identifier="he_dropdown_get_dropdown">
			<return-value transfer-ownership="none">
				<type name="Gtk.DropDown" c:type="GtkDropDown*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_dropdown" c:identifier="he_dropdown_set_dropdown">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dropdown" c:type="HeDropdown*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.DropDown" c:type="GtkDropDown*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="changed">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the active item is changed.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="DropdownClass" c:type="HeDropdownClass" glib:is-gtype-struct-for="Dropdown">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.GridClass" c:type="GtkGridClass"/>
		</field>
	</record>
	<record name="DropdownPrivate" c:type="HeDropdownPrivate" disguised="1"/>
	<class name="EmptyPage" c:type="HeEmptyPage" c:symbol-prefix="empty_page" glib:type-name="HeEmptyPage" glib:get-type="he_empty_page_get_type" glib:type-struct="EmptyPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An EmptyPage is a page that is used to display a message and a button when there is no data to display.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="EmptyPagePrivate" c:type="HeEmptyPagePrivate*"/>
		</field>
		<field name="action_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The action button of the empty page. Can connect to the clicked signal to get notified when the button is clicked. e.g.
action_button.clicked.connect&amp;lpar;&amp;lpar;&amp;rpar; =&amp;gt; { ... }&amp;rpar;;&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</field>
		<constructor name="new" c:identifier="he_empty_page_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new EmptyPage.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_empty_page_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_empty_page_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the description of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_empty_page_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_empty_page_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_empty_page_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_empty_page_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="resource" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the illustration of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="set_resource" c:identifier="he_empty_page_set_resource">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the button of the empty page.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_button" c:identifier="he_empty_page_get_button">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_button" c:identifier="he_empty_page_set_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="EmptyPageClass" c:type="HeEmptyPageClass" glib:is-gtype-struct-for="EmptyPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="EmptyPagePrivate" c:type="HeEmptyPagePrivate" disguised="1"/>
	<class name="MiniContentBlock" c:type="HeMiniContentBlock" c:symbol-prefix="mini_content_block" glib:type-name="HeMiniContentBlock" glib:get-type="he_mini_content_block_get_type" glib:type-struct="MiniContentBlockClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A MiniContentBlock is a content block that is used to display content in a small area.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="MiniContentBlockPrivate" c:type="HeMiniContentBlockPrivate*"/>
		</field>
		<constructor name="with_details" c:identifier="he_mini_content_block_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new MiniContentBlock.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_mini_content_block_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new MiniContentBlock.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_mini_content_block_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_mini_content_block_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_mini_content_block_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_mini_content_block_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_mini_content_block_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_mini_content_block_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block as a GLib.Icon.&lt;/para&gt;</doc>
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_mini_content_block_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="paintable" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block as a Gdk.Paintable.&lt;/para&gt;</doc>
			<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
		</property>
		<method name="set_paintable" c:identifier="he_mini_content_block_set_paintable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_mini_content_block_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_mini_content_block_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="MiniContentBlockClass" c:type="HeMiniContentBlockClass" glib:is-gtype-struct-for="MiniContentBlock">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="MiniContentBlockPrivate" c:type="HeMiniContentBlockPrivate" disguised="1"/>
	<class name="ModifierBadge" c:type="HeModifierBadge" c:symbol-prefix="modifier_badge" glib:type-name="HeModifierBadge" glib:get-type="he_modifier_badge_get_type" glib:type-struct="ModifierBadgeClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ModiferBadge is a badge that can be used to show that the state of something has changed.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ModifierBadgePrivate" c:type="HeModifierBadgePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_modifier_badge_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ModifierBadge.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The text of the badge. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the badge.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_modifier_badge_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_modifier_badge_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="tinted" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_tinted" c:identifier="he_modifier_badge_get_tinted">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tinted" c:identifier="he_modifier_badge_set_tinted">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The text of the badge.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_modifier_badge_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_modifier_badge_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="alignment" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the badge.&lt;/para&gt;

Since: 1.0</doc>
			<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
		</property>
		<method name="get_alignment" c:identifier="he_modifier_badge_get_alignment">
			<return-value transfer-ownership="none">
				<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_alignment" c:identifier="he_modifier_badge_set_alignment">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ModifierBadgeClass" c:type="HeModifierBadgeClass" glib:is-gtype-struct-for="ModifierBadge">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ModifierBadgePrivate" c:type="HeModifierBadgePrivate" disguised="1"/>
	<enumeration name="ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment" glib:type-name="HeModifierBadgeAlignment" glib:get-type="he_modifier_badge_alignment_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the badge in a enum.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_LEFT" value="0"/>
		<member name="center" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_CENTER" value="1"/>
		<member name="right" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_RIGHT" value="2"/>
	</enumeration>
	<function name="modifier_badge_alignment_to_gtk_align" c:identifier="he_modifier_badge_alignment_to_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the alignment as a Gtk.Alignment.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="Gtk.Align" c:type="GtkAlign"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="modifier_badge_alignment_from_gtk_align" c:identifier="he_modifier_badge_alignment_from_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Sets the alignment from a Gtk.Align.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
		</return-value>
		<parameters>
			<parameter name="align" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The alignment to set. &lt;/para&gt;</doc>
				<type name="Gtk.Align" c:type="GtkAlign"/>
			</parameter>
		</parameters>
	</function>
	<class name="NavigationRail" c:type="HeNavigationRail" c:symbol-prefix="navigation_rail" glib:type-name="HeNavigationRail" glib:get-type="he_navigation_rail_get_type" glib:type-struct="NavigationRailClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A NavigationRail is a vertical switcher that helps navigate a stack.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="NavigationRailPrivate" c:type="HeNavigationRailPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_navigation_rail_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new NavigationRail.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_navigation_rail_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_navigation_rail_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="orientation" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The orientation of this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Orientation" c:type="GtkOrientation"/>
		</property>
		<method name="get_orientation" c:identifier="he_navigation_rail_get_orientation">
			<return-value transfer-ownership="none">
				<type name="Gtk.Orientation" c:type="GtkOrientation"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_orientation" c:identifier="he_navigation_rail_set_orientation">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Orientation" c:type="GtkOrientation"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="NavigationRailClass" c:type="HeNavigationRailClass" glib:is-gtype-struct-for="NavigationRail">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="NavigationRailPrivate" c:type="HeNavigationRailPrivate" disguised="1"/>
	<class name="NavigationSection" c:type="HeNavigationSection" c:symbol-prefix="navigation_section" glib:type-name="HeNavigationSection" glib:get-type="he_navigation_section_get_type" glib:type-struct="NavigationSectionClass" parent="He.Bin">
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="NavigationSectionPrivate" c:type="HeNavigationSectionPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_navigation_section_new">
			<return-value transfer-ownership="none">
				<type name="He.NavigationSection" c:type="HeNavigationSection*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_navigation_section_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationSection" c:type="HeNavigationSection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_navigation_section_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationSection" c:type="HeNavigationSection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="orientation" writable="1">
			<type name="Gtk.Orientation" c:type="GtkOrientation"/>
		</property>
		<method name="get_orientation" c:identifier="he_navigation_section_get_orientation">
			<return-value transfer-ownership="none">
				<type name="Gtk.Orientation" c:type="GtkOrientation"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationSection" c:type="HeNavigationSection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_orientation" c:identifier="he_navigation_section_set_orientation">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationSection" c:type="HeNavigationSection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Orientation" c:type="GtkOrientation"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="NavigationSectionClass" c:type="HeNavigationSectionClass" glib:is-gtype-struct-for="NavigationSection">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="NavigationSectionPrivate" c:type="HeNavigationSectionPrivate" disguised="1"/>
	<class name="OverlayButton" c:type="HeOverlayButton" c:symbol-prefix="overlay_button" glib:type-name="HeOverlayButton" glib:get-type="he_overlay_button_get_type" glib:type-struct="OverlayButtonClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An OverlayButton is a widget that can be used to show action buttons above the widget that is being overlaid.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="OverlayButtonPrivate" c:type="HeOverlayButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_overlay_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new OverlayButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The label of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="secondary_icon" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the secondary button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="size" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The size of the button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
		</property>
		<method name="get_size" c:identifier="he_overlay_button_get_size">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_size" c:identifier="he_overlay_button_set_size">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
				</parameter>
			</parameters>
		</method>
		<property name="typeb" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The type of the button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
		</property>
		<method name="get_typeb" c:identifier="he_overlay_button_get_typeb">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_typeb" c:identifier="he_overlay_button_set_typeb">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
				</parameter>
			</parameters>
		</method>
		<property name="typeb2" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The type of the secondary button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
		</property>
		<method name="get_typeb2" c:identifier="he_overlay_button_get_typeb2">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_typeb2" c:identifier="he_overlay_button_set_typeb2">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
				</parameter>
			</parameters>
		</method>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the button.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_overlay_button_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_overlay_button_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the secondary button.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_secondary_color" c:identifier="he_overlay_button_get_secondary_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_color" c:identifier="he_overlay_button_set_secondary_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The secondary button icon.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_secondary_icon" c:identifier="he_overlay_button_get_secondary_icon">
			<return-value transfer-ownership="full" nullable="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_icon" c:identifier="he_overlay_button_set_secondary_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button icon.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_overlay_button_get_icon">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_overlay_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button label.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_overlay_button_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_overlay_button_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-tooltip" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button tooltip.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_primary_tooltip" c:identifier="he_overlay_button_get_primary_tooltip">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_tooltip" c:identifier="he_overlay_button_set_primary_tooltip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-tooltip" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The secondary button tooltip.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_secondary_tooltip" c:identifier="he_overlay_button_get_secondary_tooltip">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_tooltip" c:identifier="he_overlay_button_set_secondary_tooltip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="child" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The widget to be overlaid.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_overlay_button_get_child">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_overlay_button_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="alignment" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
		</property>
		<method name="get_alignment" c:identifier="he_overlay_button_get_alignment">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_alignment" c:identifier="he_overlay_button_set_alignment">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="clicked">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="secondary-clicked">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="OverlayButtonClass" c:type="HeOverlayButtonClass" glib:is-gtype-struct-for="OverlayButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="OverlayButtonPrivate" c:type="HeOverlayButtonPrivate" disguised="1"/>
	<enumeration name="OverlayButtonSize" c:type="HeOverlayButtonSize" glib:type-name="HeOverlayButtonSize" glib:get-type="he_overlay_button_size_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The size of the button as an enum.&lt;/para&gt;</doc>
		<member name="small" c:identifier="HE_OVERLAY_BUTTON_SIZE_SMALL" value="0"/>
		<member name="medium" c:identifier="HE_OVERLAY_BUTTON_SIZE_MEDIUM" value="1"/>
		<member name="large" c:identifier="HE_OVERLAY_BUTTON_SIZE_LARGE" value="2"/>
	</enumeration>
	<function name="overlay_button_size_to_css_class" c:identifier="he_overlay_button_size_to_css_class">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as a CSS class to be used.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
			</instance-parameter>
		</parameters>
	</function>
	<enumeration name="OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton" glib:type-name="HeOverlayButtonTypeButton" glib:get-type="he_overlay_button_type_button_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The type of the button as an enum.&lt;/para&gt;</doc>
		<member name="surface" c:identifier="HE_OVERLAY_BUTTON_TYPE_BUTTON_SURFACE" value="0"/>
		<member name="primary" c:identifier="HE_OVERLAY_BUTTON_TYPE_BUTTON_PRIMARY" value="1"/>
		<member name="secondary" c:identifier="HE_OVERLAY_BUTTON_TYPE_BUTTON_SECONDARY" value="2"/>
		<member name="tertiary" c:identifier="HE_OVERLAY_BUTTON_TYPE_BUTTON_TERTIARY" value="3"/>
	</enumeration>
	<function name="overlay_button_type_button_to_css_class" c:identifier="he_overlay_button_type_button_to_css_class">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as a CSS class to be used.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.OverlayButtonTypeButton" c:type="HeOverlayButtonTypeButton"/>
			</instance-parameter>
		</parameters>
	</function>
	<enumeration name="OverlayButtonAlignment" c:type="HeOverlayButtonAlignment" glib:type-name="HeOverlayButtonAlignment" glib:get-type="he_overlay_button_alignment_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the button.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_LEFT" value="0"/>
		<member name="center" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_CENTER" value="1"/>
		<member name="right" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_RIGHT" value="2"/>
	</enumeration>
	<function name="overlay_button_alignment_to_gtk_align" c:identifier="he_overlay_button_alignment_to_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as an alignment to be used.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="Gtk.Align" c:type="GtkAlign"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="overlay_button_alignment_from_gtk_align" c:identifier="he_overlay_button_alignment_from_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as an alignment.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
		</return-value>
		<parameters>
			<parameter name="align" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The alignment to use. &lt;/para&gt;</doc>
				<type name="Gtk.Align" c:type="GtkAlign"/>
			</parameter>
		</parameters>
	</function>
	<class name="ProgressBar" c:type="HeProgressBar" c:symbol-prefix="progress_bar" glib:type-name="HeProgressBar" glib:get-type="he_progress_bar_get_type" glib:type-struct="ProgressBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Progressbar indicates the progress of some process and contains a disable-able Stop Indicator for accessibility purposes.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ProgressBarPrivate" c:type="HeProgressBarPrivate*"/>
		</field>
		<field name="progressbar" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The progressbar inside the Progressbar.&lt;/para&gt;</doc>
			<type name="Gtk.ProgressBar" c:type="GtkProgressBar*"/>
		</field>
		<constructor name="new" c:identifier="he_progress_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new Progressbar.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.ProgressBar" c:type="HeProgressBar*"/>
			</return-value>
		</constructor>
		<property name="stop-indicator-visibility" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_stop_indicator_visibility" c:identifier="he_progress_bar_get_stop_indicator_visibility">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ProgressBar" c:type="HeProgressBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stop_indicator_visibility" c:identifier="he_progress_bar_set_stop_indicator_visibility">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ProgressBar" c:type="HeProgressBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-osd" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_osd" c:identifier="he_progress_bar_get_is_osd">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ProgressBar" c:type="HeProgressBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_osd" c:identifier="he_progress_bar_set_is_osd">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ProgressBar" c:type="HeProgressBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ProgressBarClass" c:type="HeProgressBarClass" glib:is-gtype-struct-for="ProgressBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ProgressBarPrivate" c:type="HeProgressBarPrivate" disguised="1"/>
	<class name="SegmentedButton" c:type="HeSegmentedButton" c:symbol-prefix="segmented_button" glib:type-name="HeSegmentedButton" glib:get-type="he_segmented_button_get_type" glib:type-struct="SegmentedButtonClass" parent="Gtk.Box">
		<doc xml:whitespace="preserve">&lt;para&gt;A SegmentedButton is a group of buttons that selects a setting. The developer supplies the buttons as children for further coding in their app.
&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Box" c:type="GtkBox"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SegmentedButtonPrivate" c:type="HeSegmentedButtonPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_segmented_button_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a widget to SegmentedButton, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SegmentedButton" c:type="HeSegmentedButton*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_segmented_button_new">
			<return-value transfer-ownership="none">
				<type name="He.SegmentedButton" c:type="HeSegmentedButton*"/>
			</return-value>
		</constructor>
	</class>
	<record name="SegmentedButtonClass" c:type="HeSegmentedButtonClass" glib:is-gtype-struct-for="SegmentedButton">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
		</field>
	</record>
	<record name="SegmentedButtonPrivate" c:type="HeSegmentedButtonPrivate" disguised="1"/>
	<class name="SettingsList" c:type="HeSettingsList" c:symbol-prefix="settings_list" glib:type-name="HeSettingsList" glib:get-type="he_settings_list_get_type" glib:type-struct="SettingsListClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A SettingsList is a list of content blocks with an optional title and description.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsListPrivate" c:type="HeSettingsListPrivate*"/>
		</field>
		<field name="children" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A List of all the children of the SettingsList.&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</type>
		</field>
		<method name="add" c:identifier="he_settings_list_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a new item to the SettingsList.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to add. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_settings_list_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an item from the SettingsList.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_list_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new SettingsList.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsList" c:type="HeSettingsList*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the SettingsList.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_list_get_title">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_list_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the SettingsList.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_settings_list_get_description">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_settings_list_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SettingsListClass" c:type="HeSettingsListClass" glib:is-gtype-struct-for="SettingsList">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SettingsListPrivate" c:type="HeSettingsListPrivate" disguised="1"/>
	<class name="SettingsPage" c:type="HeSettingsPage" c:symbol-prefix="settings_page" glib:type-name="HeSettingsPage" glib:get-type="he_settings_page_get_type" glib:type-struct="SettingsPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Auxilary Class for handling the contents of Settings Windows&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsPagePrivate" c:type="HeSettingsPagePrivate*"/>
		</field>
		<method name="add_list" c:identifier="he_settings_page_add_list">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings List to this page&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
				<parameter name="list" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_page_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Settings Page.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of this Settings Page. This is used to determine the name shown in the View Switcher.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_page_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_page_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SettingsPageClass" c:type="HeSettingsPageClass" glib:is-gtype-struct-for="SettingsPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SettingsPagePrivate" c:type="HeSettingsPagePrivate" disguised="1"/>
	<class name="SettingsRow" c:type="HeSettingsRow" c:symbol-prefix="settings_row" glib:type-name="HeSettingsRow" glib:get-type="he_settings_row_get_type" glib:type-struct="SettingsRowClass" parent="Gtk.ListBoxRow">
		<doc xml:whitespace="preserve">&lt;para&gt;A SettingsRow is a settings row that is used to display content in a small area that is activatable if desired.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsRowPrivate" c:type="HeSettingsRowPrivate*"/>
		</field>
		<method name="add" c:identifier="he_settings_row_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a new item to the SettingsRow.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to add. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="with_details" c:identifier="he_settings_row_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new SettingsRow.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the settings row. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the settings row. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the settings row. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_settings_row_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new SettingsRow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_row_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_row_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_settings_row_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_settings_row_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_settings_row_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_settings_row_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the settings row as a GLib.Icon.&lt;/para&gt;</doc>
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_settings_row_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="paintable" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the settings row as a Gdk.Paintable.&lt;/para&gt;</doc>
			<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
		</property>
		<method name="set_paintable" c:identifier="he_settings_row_set_paintable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the settings row.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_settings_row_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_settings_row_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="activatable-widget" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the activatable widget of the settings row, if any.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_activatable_widget" c:identifier="he_settings_row_get_activatable_widget">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_activatable_widget" c:identifier="he_settings_row_set_activatable_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="activated">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="SettingsRowClass" c:type="HeSettingsRowClass" glib:is-gtype-struct-for="SettingsRow">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
		</field>
	</record>
	<record name="SettingsRowPrivate" c:type="HeSettingsRowPrivate" disguised="1"/>
	<class name="SettingsWindow" c:type="HeSettingsWindow" c:symbol-prefix="settings_window" glib:type-name="HeSettingsWindow" glib:get-type="he_settings_window_get_type" glib:type-struct="SettingsWindowClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A modal window that accepts SettingsLists or SettingsPages&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsWindowPrivate" c:type="HeSettingsWindowPrivate*"/>
		</field>
		<method name="add_page" c:identifier="he_settings_window_add_page">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings Page to this window&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
				</instance-parameter>
				<parameter name="page" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</parameter>
			</parameters>
		</method>
		<method name="add_list" c:identifier="he_settings_window_add_list">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings List to this window&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
				</instance-parameter>
				<parameter name="list" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Settings Window.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
			</return-value>
			<parameters>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="SettingsWindowClass" c:type="HeSettingsWindowClass" glib:is-gtype-struct-for="SettingsWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="SettingsWindowPrivate" c:type="HeSettingsWindowPrivate" disguised="1"/>
	<class name="SideBar" c:type="HeSideBar" c:symbol-prefix="side_bar" glib:type-name="HeSideBar" glib:get-type="he_side_bar_get_type" glib:type-struct="SideBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A SideBar is a complementary component containing its own AppBar, title, subtitle, and elements.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SideBarPrivate" c:type="HeSideBarPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_side_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new SideBar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.SideBar" c:type="HeSideBar*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the SideBar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the SideBar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the sidebar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_side_bar_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_side_bar_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="titlewidget" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title widget of the sidebar.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_titlewidget" c:identifier="he_side_bar_get_titlewidget">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_titlewidget" c:identifier="he_side_bar_set_titlewidget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the sidebar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_side_bar_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_side_bar_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-right-title-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the SideBar should show the buttons.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_right_title_buttons" c:identifier="he_side_bar_get_show_right_title_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_right_title_buttons" c:identifier="he_side_bar_set_show_right_title_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-left-title-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the SideBar should show the buttons.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_left_title_buttons" c:identifier="he_side_bar_get_show_left_title_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_left_title_buttons" c:identifier="he_side_bar_set_show_left_title_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-back" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the back button should be shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_back" c:identifier="he_side_bar_get_show_back">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_back" c:identifier="he_side_bar_set_show_back">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the SideBar&amp;apos;s AppBar is attached to.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_side_bar_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_side_bar_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="scroller" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the SideBar&amp;apos;s AppBar is attached to.&lt;/para&gt;</doc>
			<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
		</property>
		<method name="get_scroller" c:identifier="he_side_bar_get_scroller">
			<return-value transfer-ownership="none">
				<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_scroller" c:identifier="he_side_bar_set_scroller">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-margins" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the view child has margins or is full-bleed.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_margins" c:identifier="he_side_bar_get_has_margins">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_margins" c:identifier="he_side_bar_set_has_margins">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SideBarClass" c:type="HeSideBarClass" glib:is-gtype-struct-for="SideBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SideBarPrivate" c:type="HeSideBarPrivate" disguised="1"/>
	<class name="Slider" c:type="HeSlider" c:symbol-prefix="slider" glib:type-name="HeSlider" glib:get-type="he_slider_get_type" glib:type-struct="SliderClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Slider is a widget that is used to select a value by means of a dial running across a trough. Contains optional icons for the slider purpose,
and a disable-able Stop Indicator for accessibility purposes.&lt;/para&gt;
&lt;para&gt;When using the Stop Indicator, it&amp;apos;s advisable to add a mark with the value of 1.0 along the trough of the Slider so that the user can
discern why the end point is marked.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SliderPrivate" c:type="HeSliderPrivate*"/>
		</field>
		<field name="scale" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The scale inside the Slider.&lt;/para&gt;</doc>
			<type name="Gtk.Scale" c:type="GtkScale*"/>
		</field>
		<constructor name="new" c:identifier="he_slider_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new Slider.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Slider" c:type="HeSlider*"/>
			</return-value>
		</constructor>
		<method name="add_mark" c:identifier="he_slider_add_mark">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a mark with some information along the trough of the Slider.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="text" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="left-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_left_icon" c:identifier="he_slider_get_left_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_left_icon" c:identifier="he_slider_set_left_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="right-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_right_icon" c:identifier="he_slider_get_right_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_right_icon" c:identifier="he_slider_set_right_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="stop-indicator-visibility" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_stop_indicator_visibility" c:identifier="he_slider_get_stop_indicator_visibility">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stop_indicator_visibility" c:identifier="he_slider_set_stop_indicator_visibility">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Slider" c:type="HeSlider*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SliderClass" c:type="HeSliderClass" glib:is-gtype-struct-for="Slider">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SliderPrivate" c:type="HeSliderPrivate" disguised="1"/>
	<class name="Switch" c:type="HeSwitch" c:symbol-prefix="switch" glib:type-name="HeSwitch" glib:get-type="he_switch_get_type" glib:type-struct="SwitchClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Switch is a widget that is used to toggle a setting on or off, or to indicate two modes via a toggle &amp;lpar;ex. Light/Dark&amp;rpar;.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SwitchPrivate" c:type="HeSwitchPrivate*"/>
		</field>
		<field name="iswitch" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The switch inside the Switch.&lt;/para&gt;</doc>
			<type name="Gtk.Switch" c:type="GtkSwitch*"/>
		</field>
		<constructor name="new" c:identifier="he_switch_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new Switch.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Switch" c:type="HeSwitch*"/>
			</return-value>
		</constructor>
		<property name="left-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_left_icon" c:identifier="he_switch_get_left_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Switch" c:type="HeSwitch*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_left_icon" c:identifier="he_switch_set_left_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Switch" c:type="HeSwitch*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="right-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_right_icon" c:identifier="he_switch_get_right_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Switch" c:type="HeSwitch*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_right_icon" c:identifier="he_switch_set_right_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Switch" c:type="HeSwitch*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SwitchClass" c:type="HeSwitchClass" glib:is-gtype-struct-for="Switch">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SwitchPrivate" c:type="HeSwitchPrivate" disguised="1"/>
	<class name="SwitchBar" c:type="HeSwitchBar" c:symbol-prefix="switch_bar" glib:type-name="HeSwitchBar" glib:get-type="he_switch_bar_get_type" glib:type-struct="SwitchBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A SwitchBar is a widget that is used to identify primarily a switchable view below it.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SwitchBarPrivate" c:type="HeSwitchBarPrivate*"/>
		</field>
		<field name="main_switch" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The switch related to this switchbar.&lt;/para&gt;</doc>
			<type name="He.Switch" c:type="HeSwitch*"/>
		</field>
		<constructor name="new" c:identifier="he_switch_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new switchbar.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the switchbar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_switch_bar_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_switch_bar_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the switchbar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_switch_bar_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_switch_bar_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="sensitive-widget" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the sensitive widget of the switchbar, if any.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_sensitive_widget" c:identifier="he_switch_bar_get_sensitive_widget">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_sensitive_widget" c:identifier="he_switch_bar_set_sensitive_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SwitchBar" c:type="HeSwitchBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="activated">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="SwitchBarClass" c:type="HeSwitchBarClass" glib:is-gtype-struct-for="SwitchBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SwitchBarPrivate" c:type="HeSwitchBarPrivate" disguised="1"/>
	<class name="Tab" c:type="HeTab" c:symbol-prefix="tab" glib:type-name="HeTab" glib:get-type="he_tab_get_type" glib:type-struct="TabClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Standard tab designed for TabSwitcher, used to form a tabbed UI&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabPrivate" c:type="HeTabPrivate*"/>
		</field>
		<field name="page_container" writable="1">
			<type name="He.TabPage" c:type="HeTabPage*"/>
		</field>
		<constructor name="new" c:identifier="he_tab_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Tab&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="page" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The label/title of the tab&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_tab_get_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_tab_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="tooltip" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The Pango marked up text that will be shown in a tooltip when the tab is hovered.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="set_tooltip" c:identifier="he_tab_set_tooltip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="pinned" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_pinned" c:identifier="he_tab_get_pinned">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_pinned" c:identifier="he_tab_set_pinned">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="can-pin" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether a Tab can be pinned or not&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_can_pin" c:identifier="he_tab_get_can_pin">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_can_pin" c:identifier="he_tab_set_can_pin">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="can-close" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether a Tab can be closed or not&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_can_close" c:identifier="he_tab_get_can_close">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_can_close" c:identifier="he_tab_set_can_close">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="page" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The TabPage to hold children, to appear when this tab is active&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_page" c:identifier="he_tab_get_page">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_page" c:identifier="he_tab_set_page">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu appearing when the tab is clicked&lt;/para&gt;</doc>
			<type name="Gio.Menu" c:type="GMenu*"/>
		</property>
		<method name="get_menu" c:identifier="he_tab_get_menu">
			<return-value transfer-ownership="none">
				<type name="Gio.Menu" c:type="GMenu*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="actions" writable="1" construct-only="1">
			<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
		</property>
		<method name="get_actions" c:identifier="he_tab_get_actions">
			<return-value transfer-ownership="none">
				<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
	</class>
	<record name="TabClass" c:type="HeTabClass" glib:is-gtype-struct-for="Tab">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabPrivate" c:type="HeTabPrivate" disguised="1"/>
	<class name="TabPage" c:type="HeTabPage" c:symbol-prefix="tab_page" glib:type-name="HeTabPage" glib:get-type="he_tab_page_get_type" glib:type-struct="TabPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Auxilary Class for handling the contents of Tabs&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabPagePrivate" c:type="HeTabPagePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_tab_page_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Tab Page. This should be handled automatically by the Tab generation code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TabPage" c:type="HeTabPage*"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="tab" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The Tab this page is associated with&lt;/para&gt;</doc>
			<type name="He.Tab" c:type="HeTab*"/>
		</property>
		<method name="get_tab" c:identifier="he_tab_page_get_tab">
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabPage" c:type="HeTabPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tab" c:identifier="he_tab_page_set_tab">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabPage" c:type="HeTabPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TabPageClass" c:type="HeTabPageClass" glib:is-gtype-struct-for="TabPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabPagePrivate" c:type="HeTabPagePrivate" disguised="1"/>
	<class name="TabSwitcher" c:type="HeTabSwitcher" c:symbol-prefix="tab_switcher" glib:type-name="HeTabSwitcher" glib:get-type="he_tab_switcher_get_type" glib:type-struct="TabSwitcherClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;TabBar widget designed for a variable number of tabs.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabSwitcherPrivate" c:type="HeTabSwitcherPrivate*"/>
		</field>
		<field name="notebook" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The internal Gtk.Notebook. This should only be accessed by a widget implementation&lt;/para&gt;</doc>
			<type name="Gtk.Notebook" c:type="GtkNotebook*"/>
		</field>
		<method name="get_tab_position" c:identifier="he_tab_switcher_get_tab_position">
			<doc xml:whitespace="preserve">&lt;para&gt;The position in the switcher of the tab&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<method name="insert_tab" c:identifier="he_tab_switcher_insert_tab">
			<doc xml:whitespace="preserve">&lt;para&gt;Insert a new tab into the TabSwitcher.&lt;/para&gt;
&lt;para&gt;To append a tab, you may use -1 as the index.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_tab" c:identifier="he_tab_switcher_remove_tab">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes a tab from the TabSwitcher.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_tab_switcher_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new TabSwitcher&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
			</return-value>
		</constructor>
		<property name="n-tabs">
			<doc xml:whitespace="preserve">&lt;para&gt;The number of tabs in the TabSwitcher&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_n_tabs" c:identifier="he_tab_switcher_get_n_tabs">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="tabs">
			<doc xml:whitespace="preserve">&lt;para&gt;The list of tabs in the TabSwitcher&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="He.Tab" c:type="HeTab*"/>
			</type>
		</property>
		<method name="get_tabs" c:identifier="he_tab_switcher_get_tabs">
			<return-value transfer-ownership="none">
				<type name="GLib.List" c:type="GList*">
					<type name="He.Tab" c:type="HeTab*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="tab-bar-behavior" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The behavior of the tab bar and its visibility&lt;/para&gt;</doc>
			<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
		</property>
		<method name="get_tab_bar_behavior" c:identifier="he_tab_switcher_get_tab_bar_behavior">
			<return-value transfer-ownership="none">
				<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tab_bar_behavior" c:identifier="he_tab_switcher_set_tab_bar_behavior">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-duplicate-tabs" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_duplicate_tabs" c:identifier="he_tab_switcher_get_allow_duplicate_tabs">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_duplicate_tabs" c:identifier="he_tab_switcher_set_allow_duplicate_tabs">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-drag" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_drag" c:identifier="he_tab_switcher_get_allow_drag">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_drag" c:identifier="he_tab_switcher_set_allow_drag">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-pinning" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_pinning" c:identifier="he_tab_switcher_get_allow_pinning">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_pinning" c:identifier="he_tab_switcher_set_allow_pinning">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-closing" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_closing" c:identifier="he_tab_switcher_get_allow_closing">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_closing" c:identifier="he_tab_switcher_set_allow_closing">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-new-window" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_new_window" c:identifier="he_tab_switcher_get_allow_new_window">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_new_window" c:identifier="he_tab_switcher_set_allow_new_window">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="current" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The current visible tab&lt;/para&gt;</doc>
			<type name="He.Tab" c:type="HeTab*"/>
		</property>
		<method name="get_current" c:identifier="he_tab_switcher_get_current">
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_current" c:identifier="he_tab_switcher_set_current">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu appearing when the tab bar is clicked on a blank space&lt;/para&gt;</doc>
			<type name="Gio.Menu" c:type="GMenu*"/>
		</property>
		<method name="get_menu" c:identifier="he_tab_switcher_get_menu">
			<return-value transfer-ownership="none">
				<type name="Gio.Menu" c:type="GMenu*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="actions" writable="1" construct-only="1">
			<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
		</property>
		<method name="get_actions" c:identifier="he_tab_switcher_get_actions">
			<return-value transfer-ownership="none">
				<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<glib:signal name="tab-added">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-removed">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-switched">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="old_tab" transfer-ownership="none" nullable="1">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
				<parameter name="new_tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-moved">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-duplicated">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="duplicated_tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="new-tab-requested">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="close-tab-requested">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="TabSwitcherClass" c:type="HeTabSwitcherClass" glib:is-gtype-struct-for="TabSwitcher">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabSwitcherPrivate" c:type="HeTabSwitcherPrivate" disguised="1"/>
	<enumeration name="TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior" glib:type-name="HeTabSwitcherTabBarBehavior" glib:get-type="he_tab_switcher_tab_bar_behavior_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;How the tab bar should behave&lt;/para&gt;</doc>
		<member name="always" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_ALWAYS" value="0"/>
		<member name="single" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_SINGLE" value="1"/>
		<member name="never" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_NEVER" value="2"/>
	</enumeration>
	<class name="TextField" c:type="HeTextField" c:symbol-prefix="text_field" glib:type-name="HeTextField" glib:get-type="he_text_field_get_type" glib:type-struct="TextFieldClass" parent="Gtk.ListBoxRow">
		<doc xml:whitespace="preserve">&lt;para&gt;TextField is a &lt;type&gt;GtkEntry&lt;/type&gt;-like subclass that is meant to be used in forms where input must be validated before the form can be
submitted. It provides feedback to users about the state of input validation and keeps track of its own validation state. By default, input is
considered invalid. This widget can also be used in place of a &lt;type&gt;GtkEntry&lt;/type&gt; for HIG compliance purposes.&lt;/para&gt;
&lt;para&gt;&lt;emphasis role=&quot;bold&quot;&gt;Example&lt;/emphasis&gt;&lt;br/&gt;
  &lt;example&gt;
    &lt;programlisting&gt;  var validated_entry = new He.TextField ();
  username_entry.changed.connect (() =&gt; {
      username_entry.is_valid =
      username_entry.text == &quot;valid input&quot;;
  });&lt;/programlisting&gt;
  &lt;/example&gt;&lt;/para&gt;
&lt;para&gt;If the TextField.from_regex &amp;lpar;&amp;rpar; constructor is used then the entry automatically sets its validity status. A valid regex must be
passed to this constructor.&lt;/para&gt;
&lt;para&gt;&lt;emphasis role=&quot;bold&quot;&gt;Example&lt;/emphasis&gt;&lt;br/&gt;
  &lt;example&gt;
    &lt;programlisting&gt;  GLib.Regex? regex = null;
  He.TextField only_lower_case_letters_entry;
  try {
      regex = new Regex (&quot;^[a-z]*$&quot;);

      only_lower_case_letters_entry = new He.TextField.from_regex (regex);
  } catch (Error e) {
      critical (e.message);
      // Provide a
      fallback entry here
  }&lt;/programlisting&gt;
  &lt;/example&gt;&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TextFieldPrivate" c:type="HeTextFieldPrivate*"/>
		</field>
		<method name="get_internal_entry" c:identifier="he_text_field_get_internal_entry">
			<doc xml:whitespace="preserve">&lt;para&gt;A function to be used in code &amp;lpar;not Blueprint&amp;rpar; to get the Gtk.Text widget.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="Gtk.Text" c:type="GtkText*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<constructor name="from_regex" c:identifier="he_text_field_new_from_regex">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a TextField that uses regular expression provided to check validity.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.TextField" c:type="HeTextField*"/>
			</return-value>
			<parameters>
				<parameter name="regex_arg" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The regular expression to use. &lt;/para&gt;</doc>
					<type name="GLib.Regex" c:type="GRegex*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_text_field_new">
			<return-value transfer-ownership="none">
				<type name="He.TextField" c:type="HeTextField*"/>
			</return-value>
		</constructor>
		<property name="is-valid" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether or not text is considered valid input.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_valid" c:identifier="he_text_field_get_is_valid">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_valid" c:identifier="he_text_field_set_is_valid">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="needs-validation" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether or not text needs to be validated.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_needs_validation" c:identifier="he_text_field_get_needs_validation">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_needs_validation" c:identifier="he_text_field_set_needs_validation">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="min-length" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The minimum length to start validating.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_min_length" c:identifier="he_text_field_get_min_length">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_min_length" c:identifier="he_text_field_set_min_length">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="regex" writable="1" construct="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The regular expression used for validation.&lt;/para&gt;</doc>
			<type name="GLib.Regex" c:type="GRegex*"/>
		</property>
		<method name="get_regex" c:identifier="he_text_field_get_regex">
			<return-value transfer-ownership="none">
				<type name="GLib.Regex" c:type="GRegex*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_regex" c:identifier="he_text_field_set_regex">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.Regex" c:type="GRegex*"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-search" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_search" c:identifier="he_text_field_get_is_search">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_search" c:identifier="he_text_field_set_is_search">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="is-outline" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_outline" c:identifier="he_text_field_get_is_outline">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_is_outline" c:identifier="he_text_field_set_is_outline">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="entry">
			<type name="Gtk.Text" c:type="GtkText*"/>
		</property>
		<method name="get_entry" c:identifier="he_text_field_get_entry">
			<return-value transfer-ownership="none">
				<type name="Gtk.Text" c:type="GtkText*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="text" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_text" c:identifier="he_text_field_get_text">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_text" c:identifier="he_text_field_set_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="suffix-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_suffix_icon" c:identifier="he_text_field_get_suffix_icon">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_suffix_icon" c:identifier="he_text_field_set_suffix_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="prefix-icon" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_prefix_icon" c:identifier="he_text_field_get_prefix_icon">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_prefix_icon" c:identifier="he_text_field_set_prefix_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="support-text" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_support_text" c:identifier="he_text_field_get_support_text">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_support_text" c:identifier="he_text_field_set_support_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="placeholder-text" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_placeholder_text" c:identifier="he_text_field_get_placeholder_text">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_placeholder_text" c:identifier="he_text_field_set_placeholder_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="max-length" writable="1">
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_max_length" c:identifier="he_text_field_get_max_length">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_max_length" c:identifier="he_text_field_set_max_length">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="visibility" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_visibility" c:identifier="he_text_field_get_visibility">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_visibility" c:identifier="he_text_field_set_visibility">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TextField" c:type="HeTextField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TextFieldClass" c:type="HeTextFieldClass" glib:is-gtype-struct-for="TextField">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
		</field>
	</record>
	<record name="TextFieldPrivate" c:type="HeTextFieldPrivate" disguised="1"/>
	<class name="TimePicker" c:type="HeTimePicker" c:symbol-prefix="time_picker" glib:type-name="HeTimePicker" glib:get-type="he_time_picker_get_type" glib:type-struct="TimePickerClass" parent="Gtk.Entry">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Entry" c:type="GtkEntry"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TimePickerPrivate" c:type="HeTimePickerPrivate*"/>
		</field>
		<constructor name="with_format" c:identifier="he_time_picker_new_with_format">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new TimePicker widget with the given format strings.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.TimePicker" c:type="HeTimePicker*"/>
			</return-value>
			<parameters>
				<parameter name="format_12" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The string format of how to display the time when in 12h mode. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="format_24" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The string format of how to display the time when in 24h mode. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_time_picker_new">
			<return-value transfer-ownership="none">
				<type name="He.TimePicker" c:type="HeTimePicker*"/>
			</return-value>
		</constructor>
		<property name="format-12" writable="1" construct-only="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The string format of how to display the time when in 12h mode.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_format_12" c:identifier="he_time_picker_get_format_12">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimePicker" c:type="HeTimePicker*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="format-24" writable="1" construct-only="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The string format of how to display the time when in 24h mode.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_format_24" c:identifier="he_time_picker_get_format_24">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimePicker" c:type="HeTimePicker*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="time" writable="1">
			<type name="GLib.DateTime" c:type="GDateTime*"/>
		</property>
		<method name="get_time" c:identifier="he_time_picker_get_time">
			<return-value transfer-ownership="none">
				<type name="GLib.DateTime" c:type="GDateTime*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimePicker" c:type="HeTimePicker*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_time" c:identifier="he_time_picker_set_time">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TimePicker" c:type="HeTimePicker*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.DateTime" c:type="GDateTime*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="time-changed">
			<doc xml:whitespace="preserve">&lt;para&gt;The signal when time is changed with this widget.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="TimePickerClass" c:type="HeTimePickerClass" glib:is-gtype-struct-for="TimePicker">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
		</field>
	</record>
	<record name="TimePickerPrivate" c:type="HeTimePickerPrivate" disguised="1"/>
	<class name="TipView" c:type="HeTipView" c:symbol-prefix="tip_view" glib:type-name="HeTipView" glib:get-type="he_tip_view_get_type" glib:type-struct="TipViewClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A TipView is a helper widget for onboarding flow tips in an app&amp;apos;s first launch.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TipViewPrivate" c:type="HeTipViewPrivate*"/>
		</field>
		<field name="button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The action button of the Tip.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</field>
		<constructor name="new" c:identifier="he_tip_view_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a TipView.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.TipView" c:type="HeTipView*"/>
			</return-value>
			<parameters>
				<parameter name="tip" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The Tip to use. &lt;/para&gt;</doc>
					<type name="He.Tip" c:type="HeTip*"/>
				</parameter>
				<parameter name="tip_style" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The TipViewStyle to use. &lt;/para&gt;</doc>
					<type name="He.TipViewStyle" c:type="HeTipViewStyle*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="tip-style" writable="1">
			<type name="He.TipViewStyle" c:type="HeTipViewStyle"/>
		</property>
		<method name="get_tip_style" c:identifier="he_tip_view_get_tip_style">
			<return-value transfer-ownership="none">
				<type name="He.TipViewStyle" c:type="HeTipViewStyle"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TipView" c:type="HeTipView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tip_style" c:identifier="he_tip_view_set_tip_style">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TipView" c:type="HeTipView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.TipViewStyle" c:type="HeTipViewStyle"/>
				</parameter>
			</parameters>
		</method>
		<property name="tip" writable="1">
			<type name="He.Tip" c:type="HeTip*"/>
		</property>
		<method name="get_tip" c:identifier="he_tip_view_get_tip">
			<return-value transfer-ownership="none">
				<type name="He.Tip" c:type="HeTip*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TipView" c:type="HeTipView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tip" c:identifier="he_tip_view_set_tip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TipView" c:type="HeTipView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Tip" c:type="HeTip*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="closed">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the Tip is closed by activating the close button.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="TipViewClass" c:type="HeTipViewClass" glib:is-gtype-struct-for="TipView">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TipViewPrivate" c:type="HeTipViewPrivate" disguised="1"/>
	<class name="Toast" c:type="HeToast" c:symbol-prefix="toast" glib:type-name="HeToast" glib:get-type="he_toast_get_type" glib:type-struct="ToastClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Toast is a widget containing a quick little message for the user with an optional action button.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ToastPrivate" c:type="HeToastPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_toast_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Toast.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.Toast" c:type="HeToast*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the Toast &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="send_notification" c:identifier="he_toast_send_notification">
			<doc xml:whitespace="preserve">&lt;para&gt;Shows the Toast.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The notification text label to be displayed inside of &amp;num;this&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_toast_get_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_toast_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="default-action" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_default_action" c:identifier="he_toast_get_default_action">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_default_action" c:identifier="he_toast_set_default_action">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="closed">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the Toast is closed by activating the close button&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="action">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the default action button is activated&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="ToastClass" c:type="HeToastClass" glib:is-gtype-struct-for="Toast">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ToastPrivate" c:type="HeToastPrivate" disguised="1"/>
	<class name="ViewAux" c:type="HeViewAux" c:symbol-prefix="view_aux" glib:type-name="HeViewAux" glib:get-type="he_view_aux_get_type" glib:type-struct="ViewAuxClass" parent="He.View">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewAux shows a view with an optional side pane.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.View" c:type="HeView"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewAuxPrivate" c:type="HeViewAuxPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_aux_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewAux" c:type="HeViewAux*"/>
			</return-value>
		</constructor>
		<property name="show-aux" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_aux" c:identifier="he_view_aux_get_show_aux">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewAux" c:type="HeViewAux*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_aux" c:identifier="he_view_aux_set_show_aux">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewAux" c:type="HeViewAux*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewAuxClass" c:type="HeViewAuxClass" glib:is-gtype-struct-for="ViewAux">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ViewClass" c:type="HeViewClass"/>
		</field>
	</record>
	<record name="ViewAuxPrivate" c:type="HeViewAuxPrivate" disguised="1"/>
	<class name="ViewChooser" c:type="HeViewChooser" c:symbol-prefix="view_chooser" glib:type-name="HeViewChooser" glib:get-type="he_view_chooser_get_type" glib:type-struct="ViewChooserClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewChooser is a chooser switcher that filters a stack&amp;apos;s view.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewChooserPrivate" c:type="HeViewChooserPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_chooser_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ViewChooser.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ViewChooser" c:type="HeViewChooser*"/>
			</return-value>
		</constructor>
		<method name="stack_clear" c:identifier="he_view_chooser_stack_clear">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewChooser" c:type="HeViewChooser*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this chooser switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_chooser_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewChooser" c:type="HeViewChooser*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_chooser_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewChooser" c:type="HeViewChooser*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewChooserClass" c:type="HeViewChooserClass" glib:is-gtype-struct-for="ViewChooser">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewChooserPrivate" c:type="HeViewChooserPrivate" disguised="1"/>
	<class name="ViewDual" c:type="HeViewDual" c:symbol-prefix="view_dual" glib:type-name="HeViewDual" glib:get-type="he_view_dual_get_type" glib:type-struct="ViewDualClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewDual is a view that displays two views side by side.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewDualPrivate" c:type="HeViewDualPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_dual_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewDual" c:type="HeViewDual*"/>
			</return-value>
			<parameters>
				<parameter name="orientation" transfer-ownership="none">
					<type name="Gtk.Orientation" c:type="GtkOrientation"/>
				</parameter>
				<parameter name="show_handle" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="orientation" writable="1">
			<type name="Gtk.Orientation" c:type="GtkOrientation"/>
		</property>
		<method name="get_orientation" c:identifier="he_view_dual_get_orientation">
			<return-value transfer-ownership="none">
				<type name="Gtk.Orientation" c:type="GtkOrientation"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_orientation" c:identifier="he_view_dual_set_orientation">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Orientation" c:type="GtkOrientation"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-handle" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_handle" c:identifier="he_view_dual_get_show_handle">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_handle" c:identifier="he_view_dual_set_show_handle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="child-start" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child_start" c:identifier="he_view_dual_get_child_start">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child_start" c:identifier="he_view_dual_set_child_start">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="child-end" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child_end" c:identifier="he_view_dual_get_child_end">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child_end" c:identifier="he_view_dual_set_child_end">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewDual" c:type="HeViewDual*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewDualClass" c:type="HeViewDualClass" glib:is-gtype-struct-for="ViewDual">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
	</record>
	<record name="ViewDualPrivate" c:type="HeViewDualPrivate" disguised="1"/>
	<class name="ViewMono" c:type="HeViewMono" c:symbol-prefix="view_mono" glib:type-name="HeViewMono" glib:get-type="he_view_mono_get_type" glib:type-struct="ViewMonoClass" parent="He.View">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewMono is a view that is a single-column layout.&lt;/para&gt;

Since: 1.0</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.View" c:type="HeView"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewMonoPrivate" c:type="HeViewMonoPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_mono_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewMono" c:type="HeViewMono*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ViewMonoClass" c:type="HeViewMonoClass" glib:is-gtype-struct-for="ViewMono">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ViewClass" c:type="HeViewClass"/>
		</field>
	</record>
	<record name="ViewMonoPrivate" c:type="HeViewMonoPrivate" disguised="1"/>
	<class name="ViewSubTitle" c:type="HeViewSubTitle" c:symbol-prefix="view_sub_title" glib:type-name="HeViewSubTitle" glib:get-type="he_view_sub_title_get_type" glib:type-struct="ViewSubTitleClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewSubTitle is a view&amp;apos;s subtitle.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewSubTitlePrivate" c:type="HeViewSubTitlePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_sub_title_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ViewSubTitle.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
			</return-value>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle text.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_view_sub_title_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_view_sub_title_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewSubTitleClass" c:type="HeViewSubTitleClass" glib:is-gtype-struct-for="ViewSubTitle">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewSubTitlePrivate" c:type="HeViewSubTitlePrivate" disguised="1"/>
	<class name="ViewSwitcher" c:type="HeViewSwitcher" c:symbol-prefix="view_switcher" glib:type-name="HeViewSwitcher" glib:get-type="he_view_switcher_get_type" glib:type-struct="ViewSwitcherClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewSwitcher is a switcher that controls a stack&amp;apos;s views.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewSwitcherPrivate" c:type="HeViewSwitcherPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_switcher_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ViewSwitcher.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_switcher_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_switcher_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewSwitcherClass" c:type="HeViewSwitcherClass" glib:is-gtype-struct-for="ViewSwitcher">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewSwitcherPrivate" c:type="HeViewSwitcherPrivate" disguised="1"/>
	<class name="ViewTitle" c:type="HeViewTitle" c:symbol-prefix="view_title" glib:type-name="HeViewTitle" glib:get-type="he_view_title_get_type" glib:type-struct="ViewTitleClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewTitle is a widget that displays a view&amp;apos;s title.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewTitlePrivate" c:type="HeViewTitlePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_title_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ViewTitle.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ViewTitle" c:type="HeViewTitle*"/>
			</return-value>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the view.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_view_title_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewTitle" c:type="HeViewTitle*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_view_title_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewTitle" c:type="HeViewTitle*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewTitleClass" c:type="HeViewTitleClass" glib:is-gtype-struct-for="ViewTitle">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewTitlePrivate" c:type="HeViewTitlePrivate" disguised="1"/>
	<class name="WelcomeScreen" c:type="HeWelcomeScreen" c:symbol-prefix="welcome_screen" glib:type-name="HeWelcomeScreen" glib:get-type="he_welcome_screen_get_type" glib:type-struct="WelcomeScreenClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A WelcomeScreen is a screen that presents options and actions before displaying the main application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="WelcomeScreenPrivate" c:type="HeWelcomeScreenPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_welcome_screen_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_welcome_screen_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Construct a new WelcomeScreen.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
			</return-value>
			<parameters>
				<parameter name="appname" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The name of the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The application description. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="appname" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The name of the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_appname" c:identifier="he_welcome_screen_get_appname">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_appname" c:identifier="he_welcome_screen_set_appname">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The application description.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_welcome_screen_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_welcome_screen_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="WelcomeScreenClass" c:type="HeWelcomeScreenClass" glib:is-gtype-struct-for="WelcomeScreen">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="WelcomeScreenPrivate" c:type="HeWelcomeScreenPrivate" disguised="1"/>
	<record name="CAM16Color" c:type="HeCAM16Color" c:symbol-prefix="ca_m16_color" glib:type-name="HeCAM16Color" glib:get-type="he_ca_m16_color_get_type">
		<field name="j" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="a" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="b" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="c" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="h" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="m" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="s" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<record name="HCTColor" c:type="HeHCTColor" c:symbol-prefix="hct_color" glib:type-name="HeHCTColor" glib:get-type="he_hct_color_get_type">
		<field name="h" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="c" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="t" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="a" writable="1">
			<type name="gint" c:type="gint"/>
		</field>
	</record>
	<record name="LABColor" c:type="HeLABColor" c:symbol-prefix="lab_color" glib:type-name="HeLABColor" glib:get-type="he_lab_color_get_type">
		<field name="l" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="a" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="b" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<method name="distance" c:identifier="he_lab_color_distance">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none" nullable="1">
					<type name="He.LABColor" c:type="HeLABColor*"/>
				</instance-parameter>
				<parameter name="lab" transfer-ownership="none">
					<type name="He.LABColor" c:type="HeLABColor*"/>
				</parameter>
			</parameters>
		</method>
	</record>
	<record name="LCHColor" c:type="HeLCHColor" c:symbol-prefix="lch_color" glib:type-name="HeLCHColor" glib:get-type="he_lch_color_get_type">
		<field name="l" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="c" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="h" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<record name="RGBColor" c:type="HeRGBColor" c:symbol-prefix="rgb_color" glib:type-name="HeRGBColor" glib:get-type="he_rgb_color_get_type">
		<field name="r" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="g" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="b" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<record name="XYZColor" c:type="HeXYZColor" c:symbol-prefix="xyz_color" glib:type-name="HeXYZColor" glib:get-type="he_xyz_color_get_type">
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="z" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<callback name="AnimationTargetFunc" c:type="HeAnimationTargetFunc">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="value" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="user_data" transfer-ownership="none" closure="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
		</parameters>
	</callback>
	<function name="rgb_to_argb_int" c:identifier="he_rgb_to_argb_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lab_to_argb_int" c:identifier="he_lab_to_argb_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="lab" transfer-ownership="none">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="argb_from_rgb_int" c:identifier="he_argb_from_rgb_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="xyz_to_argb" c:identifier="he_xyz_to_argb">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="xyz" transfer-ownership="none">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="argb_to_rgb" c:identifier="he_argb_to_rgb">
		<return-value transfer-ownership="full">
			<array length="1" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<function name="alpha_from_rgba_int" c:identifier="he_alpha_from_rgba_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="red_from_rgba_int" c:identifier="he_red_from_rgba_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="green_from_rgba_int" c:identifier="he_green_from_rgba_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="blue_from_rgba_int" c:identifier="he_blue_from_rgba_int">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="xyz_to_cam16" c:identifier="he_xyz_to_cam16">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.CAM16Color" c:type="HeCAM16Color*"/>
			</parameter>
		</parameters>
	</function>
	<function name="cam16_from_int" c:identifier="he_cam16_from_int">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.CAM16Color" c:type="HeCAM16Color*"/>
			</parameter>
		</parameters>
	</function>
	<function name="to_gdk_rgba" c:identifier="he_to_gdk_rgba">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="Gdk.RGBA" c:type="GdkRGBA*"/>
			</parameter>
		</parameters>
	</function>
	<function name="critical_plane_below" c:identifier="he_critical_plane_below">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="x" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="critical_plane_above" c:identifier="he_critical_plane_above">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="x" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="from_params" c:identifier="he_from_params">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="chroma" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="tone" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="disliked" c:identifier="he_disliked">
		<return-value transfer-ownership="full">
			<type name="gboolean" c:type="gboolean"/>
		</return-value>
		<parameters>
			<parameter name="hct" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="fix_disliked" c:identifier="he_fix_disliked">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="hct" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="hct_from_int" c:identifier="he_hct_from_int">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="hct_to_hex" c:identifier="he_hct_to_hex">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="chroma" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="lstar" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="hex_from_hct_with_contrast" c:identifier="he_hex_from_hct_with_contrast">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="hct" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
			<parameter name="contrast" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="hex_from_hct" c:identifier="he_hex_from_hct">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="hct" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="hct_to_argb" c:identifier="he_hct_to_argb">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="chroma" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="lstar" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="hct_blend" c:identifier="he_hct_blend">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="a" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="get_rotated_hue" c:identifier="he_get_rotated_hue">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="hue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="hues" transfer-ownership="none">
				<array length="2" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="hues_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="rotations" transfer-ownership="none">
				<array length="4" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="rotations_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="rgb_from_linrgb" c:identifier="he_rgb_from_linrgb">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="argb_from_linrgb" c:identifier="he_argb_from_linrgb">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="linrgb" transfer-ownership="none">
				<array length="1" c:type="gdouble*">
					<type name="gdouble" c:type="gdouble"/>
				</array>
			</parameter>
			<parameter name="linrgb_length1" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="find_result_by_j" c:identifier="he_find_result_by_j">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<parameter name="hr" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="c" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="y" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="hexcode" c:identifier="he_hexcode">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="r" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="g" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="b" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="hexcode_argb" c:identifier="he_hexcode_argb">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
		</parameters>
	</function>
	<function name="xyz_value_to_lab" c:identifier="he_xyz_value_to_lab">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="v" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="xyz_to_lab" c:identifier="he_xyz_to_lab">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lch_to_lab" c:identifier="he_lch_to_lab">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.LCHColor" c:type="HeLCHColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="rgb_to_lab" c:identifier="he_rgb_to_lab">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lab_from_argb" c:identifier="he_lab_from_argb">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="rgb_to_lch" c:identifier="he_rgb_to_lch">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LCHColor" c:type="HeLCHColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lab_to_lch" c:identifier="he_lab_to_lch">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LCHColor" c:type="HeLCHColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="hct_to_lch" c:identifier="he_hct_to_lch">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.HCTColor" c:type="HeHCTColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.LCHColor" c:type="HeLCHColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="xyz_to_rgb" c:identifier="he_xyz_to_rgb">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lab_to_rgb" c:identifier="he_lab_to_rgb">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lch_to_rgb" c:identifier="he_lch_to_rgb">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.LCHColor" c:type="HeLCHColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="from_gdk_rgba" c:identifier="he_from_gdk_rgba">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="Gdk.RGBA" c:type="GdkRGBA*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="from_hex" c:identifier="he_from_hex">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="from_argb_int" c:identifier="he_from_argb_int">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="argb_to_xyz" c:identifier="he_argb_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="argb" transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="rgb_value_to_xyz" c:identifier="he_rgb_value_to_xyz">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="v" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="rgb_to_xyz" c:identifier="he_rgb_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.RGBColor" c:type="HeRGBColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="cam16_to_xyz" c:identifier="he_cam16_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.CAM16Color" c:type="HeCAM16Color*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="lab_to_xyz" c:identifier="he_lab_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.LABColor" c:type="HeLABColor*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.XYZColor" c:type="HeXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="init" c:identifier="he_init">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void"/>
		</return-value>
	</function>
</namespace>
</repository>
