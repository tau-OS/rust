<?xml version="1.0"?>
<!-- He-1.gir generated by valadoc, do not modify. -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="Gtk" version="4.0"/>
<include name="Gdk" version="4.0"/>
<include name="Gio" version="2.0"/>
<include name="GObject" version="2.0"/>
<include name="GLib" version="2.0"/>
<package name="libhelium-1"/>
<c:include name="libhelium-1.h"/>
<namespace name="He" version="1" c:prefix="He" c:identifier-prefixes="He" c:symbol-prefixes="he" shared-library="libhelium-1.so.1">
	<function name="misc_find_ancestor_of_type" c:identifier="he_misc_find_ancestor_of_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An useful method for finding an ancestor of a given widget.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full" nullable="1">
			<type name="gpointer" c:type="gpointer"/>
		</return-value>
		<parameters>
			<parameter name="t_type" transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</parameter>
			<parameter name="t_dup_func" transfer-ownership="none">
				<type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
			</parameter>
			<parameter name="t_destroy_func" transfer-ownership="none">
				<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
			</parameter>
			<parameter name="widget" transfer-ownership="none" nullable="1">
				<doc xml:whitespace="preserve">&lt;para&gt;The widget to find the ancestor of. &lt;/para&gt;</doc>
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_contrast_ratio" c:identifier="he_misc_contrast_ratio">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="red2" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green2" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue2" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="misc_fix_fg_contrast" c:identifier="he_misc_fix_fg_contrast">
		<doc xml:whitespace="preserve">&lt;para&gt;Gives a contrasting foreground color for a given background color.&lt;/para&gt;

Since: 1.0</doc>
		<return-value transfer-ownership="full">
			<array length="6" c:type="gdouble*">
				<type name="gdouble" c:type="gdouble"/>
			</array>
		</return-value>
		<parameters>
			<parameter name="red" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the background color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="red2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The red component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="green2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The green component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="blue2" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The blue component of the foreground color. &lt;/para&gt;</doc>
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="result_length1" direction="out" transfer-ownership="none">
				<type name="gint" c:type="gint*"/>
			</parameter>
		</parameters>
	</function>
	<constant name="ColorLabConstantsKn" c:identifier="HE_COLOR_LAB_CONSTANTS_Kn" c:type="HE_COLOR_LAB_CONSTANTS_Kn" value="18">
		<type name="gint" c:type="gint"/>
	</constant>
	<constant name="ColorLabConstantsXn" c:identifier="HE_COLOR_LAB_CONSTANTS_Xn" c:type="HE_COLOR_LAB_CONSTANTS_Xn" value="0.950470">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<constant name="ColorLabConstantsYn" c:identifier="HE_COLOR_LAB_CONSTANTS_Yn" c:type="HE_COLOR_LAB_CONSTANTS_Yn" value="1">
		<type name="gint" c:type="gint"/>
	</constant>
	<constant name="ColorLabConstantsZn" c:identifier="HE_COLOR_LAB_CONSTANTS_Zn" c:type="HE_COLOR_LAB_CONSTANTS_Zn" value="1.088830">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<constant name="ColorLabConstantst0" c:identifier="HE_COLOR_LAB_CONSTANTS_t0" c:type="HE_COLOR_LAB_CONSTANTS_t0" value="0.137931034">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<constant name="ColorLabConstantst1" c:identifier="HE_COLOR_LAB_CONSTANTS_t1" c:type="HE_COLOR_LAB_CONSTANTS_t1" value="0.206896552">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<constant name="ColorLabConstantst2" c:identifier="HE_COLOR_LAB_CONSTANTS_t2" c:type="HE_COLOR_LAB_CONSTANTS_t2" value="0.128418550">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<constant name="ColorLabConstantst3" c:identifier="HE_COLOR_LAB_CONSTANTS_t3" c:type="HE_COLOR_LAB_CONSTANTS_t3" value="0.008856452">
		<type name="gdouble" c:type="gdouble"/>
	</constant>
	<record name="ColorRGBColor" c:type="HeColorRGBColor" c:symbol-prefix="rgb_color" glib:type-name="HeColorRGBColor" glib:get-type="he_color_rgb_color_get_type">
		<field name="r" writable="1">
			<type name="gint" c:type="gint"/>
		</field>
		<field name="g" writable="1">
			<type name="gint" c:type="gint"/>
		</field>
		<field name="b" writable="1">
			<type name="gint" c:type="gint"/>
		</field>
	</record>
	<record name="ColorXYZColor" c:type="HeColorXYZColor" c:symbol-prefix="xyz_color" glib:type-name="HeColorXYZColor" glib:get-type="he_color_xyz_color_get_type">
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="z" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<record name="ColorLABColor" c:type="HeColorLABColor" c:symbol-prefix="lab_color" glib:type-name="HeColorLABColor" glib:get-type="he_color_lab_color_get_type">
		<field name="l" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="a" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="b" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<record name="ColorLCHColor" c:type="HeColorLCHColor" c:symbol-prefix="lch_color" glib:type-name="HeColorLCHColor" glib:get-type="he_color_lch_color_get_type">
		<field name="l" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="c" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
		<field name="h" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</field>
	</record>
	<function name="color_rgb_value_to_xyz" c:identifier="he_color_rgb_value_to_xyz">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="v" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_xyz_value_to_lab" c:identifier="he_color_xyz_value_to_lab">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="v" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_rgb_to_xyz" c:identifier="he_color_rgb_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorXYZColor" c:type="HeColorXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_rgb_to_lab" c:identifier="he_color_rgb_to_lab">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorLABColor" c:type="HeColorLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_rgb_to_lch" c:identifier="he_color_rgb_to_lch">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_lch_to_lab" c:identifier="he_color_lch_to_lab">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorLABColor" c:type="HeColorLABColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_lab_to_rgb" c:identifier="he_color_lab_to_rgb">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorLABColor" c:type="HeColorLABColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_lab_to_xyz" c:identifier="he_color_lab_to_xyz">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorLABColor" c:type="HeColorLABColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorXYZColor" c:type="HeColorXYZColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_contrast_ratio" c:identifier="he_color_contrast_ratio">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="luma1" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
			<parameter name="luma2" transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_contrast_ratio_for_lch" c:identifier="he_color_contrast_ratio_for_lch">
		<return-value transfer-ownership="full">
			<type name="gdouble" c:type="gdouble"/>
		</return-value>
		<parameters>
			<parameter name="color1" transfer-ownership="none">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor"/>
			</parameter>
			<parameter name="color2" transfer-ownership="none">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_derive_contasting_color" c:identifier="he_color_derive_contasting_color">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor"/>
			</parameter>
			<parameter name="contrast" transfer-ownership="none" nullable="1">
				<type name="gdouble" c:type="gdouble*"/>
			</parameter>
			<parameter name="lighten" transfer-ownership="none" nullable="1">
				<type name="gboolean" c:type="gboolean*"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorLCHColor" c:type="HeColorLCHColor*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_to_gdk_rgba" c:identifier="he_color_to_gdk_rgba">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="Gdk.RGBA" c:type="GdkRGBA*"/>
			</parameter>
		</parameters>
	</function>
	<function name="color_from_gdk_rgba" c:identifier="he_color_from_gdk_rgba">
		<return-value transfer-ownership="none">
			<type name="none" c:type="void"/>
		</return-value>
		<parameters>
			<parameter name="color" transfer-ownership="none">
				<type name="Gdk.RGBA" c:type="GdkRGBA"/>
			</parameter>
			<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
			</parameter>
		</parameters>
	</function>
	<enumeration name="Colors" c:type="HeColors" glib:type-name="HeColors" glib:get-type="he_colors_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum that maps colors to internal CSS classes as per HIG.&lt;/para&gt;</doc>
		<member name="none" c:identifier="HE_COLORS_NONE" value="0"/>
		<member name="red" c:identifier="HE_COLORS_RED" value="1"/>
		<member name="orange" c:identifier="HE_COLORS_ORANGE" value="2"/>
		<member name="yellow" c:identifier="HE_COLORS_YELLOW" value="3"/>
		<member name="green" c:identifier="HE_COLORS_GREEN" value="4"/>
		<member name="blue" c:identifier="HE_COLORS_BLUE" value="5"/>
		<member name="indigo" c:identifier="HE_COLORS_INDIGO" value="6"/>
		<member name="purple" c:identifier="HE_COLORS_PURPLE" value="7"/>
		<member name="pink" c:identifier="HE_COLORS_PINK" value="8"/>
		<member name="mint" c:identifier="HE_COLORS_MINT" value="9"/>
		<member name="brown" c:identifier="HE_COLORS_BROWN" value="10"/>
		<member name="light" c:identifier="HE_COLORS_LIGHT" value="11"/>
		<member name="dark" c:identifier="HE_COLORS_DARK" value="12"/>
	</enumeration>
	<function name="colors_to_css_class" c:identifier="he_colors_to_css_class">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the CSS class name for the color.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="colors_to_string" c:identifier="he_colors_to_string">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the color name.&lt;/para&gt;

Since: 1.0</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</instance-parameter>
		</parameters>
	</function>
	<class name="Application" c:type="HeApplication" c:symbol-prefix="application" glib:type-name="HeApplication" glib:get-type="he_application_get_type" glib:type-struct="ApplicationClass" parent="Gtk.Application">
		<doc xml:whitespace="preserve">&lt;para&gt;An application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Application" c:type="GtkApplication"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ApplicationPrivate" c:type="HeApplicationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_application_new">
			<return-value transfer-ownership="full">
				<type name="He.Application" c:type="HeApplication*"/>
			</return-value>
			<parameters>
				<parameter name="application_id" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="flags" transfer-ownership="none">
					<type name="Gio.ApplicationFlags" c:type="GApplicationFlags"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="default-accent-color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A default accent color if the user has not set one.&lt;/para&gt;</doc>
			<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
		</property>
		<method name="get_default_accent_color" c:identifier="he_application_get_default_accent_color">
			<return-value transfer-ownership="none" nullable="1">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_default_accent_color" c:identifier="he_application_set_default_accent_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="accent-color" writable="1">
			<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
		</property>
		<method name="get_accent_color" c:identifier="he_application_get_accent_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="foreground" writable="1">
			<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
		</property>
		<method name="get_foreground" c:identifier="he_application_get_foreground">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
				</parameter>
			</parameters>
		</method>
		<property name="accent-foreground" writable="1">
			<type name="He.ColorRGBColor" c:type="HeColorRGBColor"/>
		</property>
		<method name="get_accent_foreground" c:identifier="he_application_get_accent_foreground">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Application" c:type="HeApplication*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ApplicationClass" c:type="HeApplicationClass" glib:is-gtype-struct-for="Application">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
		</field>
	</record>
	<record name="ApplicationPrivate" c:type="HeApplicationPrivate" disguised="1"/>
	<class name="Bin" c:type="HeBin" c:symbol-prefix="bin" glib:type-name="HeBin" glib:get-type="he_bin_get_type" glib:type-struct="BinClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper class for subclassing custom widgets.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BinPrivate" c:type="HeBinPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_bin_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the Bin, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_child" invoker="add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the Bin, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="he_bin_new">
			<return-value transfer-ownership="none">
				<type name="He.Bin" c:type="HeBin*"/>
			</return-value>
		</constructor>
		<property name="child" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_bin_get_child">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_bin_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Bin" c:type="HeBin*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BinClass" c:type="HeBinClass" glib:is-gtype-struct-for="Bin">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
		<field name="add_child">
			<callback name="add_child" c:type="add_child">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.Bin" c:type="HeBin*"/>
					</parameter>
					<parameter name="builder" transfer-ownership="none">
						<type name="Gtk.Builder" c:type="GtkBuilder*"/>
					</parameter>
					<parameter name="child" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
					<parameter name="type" transfer-ownership="none" nullable="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="BinPrivate" c:type="HeBinPrivate" disguised="1"/>
	<class name="Button" c:type="HeButton" c:symbol-prefix="button" glib:type-name="HeButton" glib:get-type="he_button_get_type" glib:type-struct="ButtonClass" parent="Gtk.Button" abstract="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper class to derive Buttons from.&lt;/para&gt;

Since: 1.0</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Button" c:type="GtkButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ButtonPrivate" c:type="HeButtonPrivate*"/>
		</field>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_button_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_color" invoker="get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_color" c:identifier="he_button_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_color" invoker="set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon of the Button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_button_get_icon">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ButtonClass" c:type="HeButtonClass" glib:is-gtype-struct-for="Button">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
		</field>
	</record>
	<record name="ButtonPrivate" c:type="HeButtonPrivate" disguised="1"/>
	<class name="ButtonContent" c:type="HeButtonContent" c:symbol-prefix="button_content" glib:type-name="HeButtonContent" glib:get-type="he_button_content_get_type" glib:type-struct="ButtonContentClass" parent="Gtk.Widget">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper class to derive Buttons from.&lt;/para&gt;

Since: 1.0</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ButtonContentPrivate" c:type="HeButtonContentPrivate*"/>
		</field>
		<field name="image" writable="1">
			<type name="Gtk.Image" c:type="GtkImage*"/>
		</field>
		<constructor name="new" c:identifier="he_button_content_new">
			<return-value transfer-ownership="none">
				<type name="He.ButtonContent" c:type="HeButtonContent*"/>
			</return-value>
		</constructor>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon of the Button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_button_content_get_icon">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_button_content_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The label of the Button.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_button_content_get_label">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_button_content_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ButtonContent" c:type="HeButtonContent*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ButtonContentClass" c:type="HeButtonContentClass" glib:is-gtype-struct-for="ButtonContent">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
	</record>
	<record name="ButtonContentPrivate" c:type="HeButtonContentPrivate" disguised="1"/>
	<class name="View" c:type="HeView" c:symbol-prefix="view" glib:type-name="HeView" glib:get-type="he_view_get_type" glib:type-struct="ViewClass" parent="Gtk.Widget" abstract="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A helper widget that implements a View that displays items.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Widget" c:type="GtkWidget"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewPrivate" c:type="HeViewPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_view_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_child" invoker="add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add" c:identifier="he_view_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child directly to the view. Used only in code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the view.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_view_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_view_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack of the view.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the view.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_view_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_view_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-margins" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the view child has margins or is full-bleed.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_margins" c:identifier="he_view_get_has_margins">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_margins" c:identifier="he_view_set_has_margins">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.View" c:type="HeView*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewClass" c:type="HeViewClass" glib:is-gtype-struct-for="View">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
		</field>
		<field name="add_child">
			<callback name="add_child" c:type="add_child">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="He.View" c:type="HeView*"/>
					</parameter>
					<parameter name="builder" transfer-ownership="none">
						<type name="Gtk.Builder" c:type="GtkBuilder*"/>
					</parameter>
					<parameter name="child" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
					<parameter name="type" transfer-ownership="none" nullable="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ViewPrivate" c:type="HeViewPrivate" disguised="1"/>
	<class name="Window" c:type="HeWindow" c:symbol-prefix="window" glib:type-name="HeWindow" glib:get-type="he_window_get_type" glib:type-struct="WindowClass" parent="Gtk.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A Window is a container that has an &lt;type&gt;HeAppBar&lt;/type&gt; and can be moved, resized, and closed. It may be a top-level window or a dialog. The
title bar can be made always visible. Has an optional back button. The back button is only visible if has_back_button is true.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Window" c:type="GtkWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="WindowPrivate" c:type="HeWindowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_window_new">
			<return-value transfer-ownership="none">
				<type name="He.Window" c:type="HeWindow*"/>
			</return-value>
		</constructor>
		<property name="parent" writable="1">
			<type name="Gtk.Window" c:type="GtkWindow*"/>
		</property>
		<method name="get_parent" c:identifier="he_window_get_parent">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Window" c:type="GtkWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_parent" c:identifier="he_window_set_parent">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="modal" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_modal" c:identifier="he_window_get_modal">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_modal" c:identifier="he_window_set_modal">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-title" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_title" c:identifier="he_window_get_has_title">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_title" c:identifier="he_window_set_has_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-back-button" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_back_button" c:identifier="he_window_get_has_back_button">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_back_button" c:identifier="he_window_set_has_back_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Window" c:type="HeWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="WindowClass" c:type="HeWindowClass" glib:is-gtype-struct-for="Window">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
		</field>
	</record>
	<record name="WindowPrivate" c:type="HeWindowPrivate" disguised="1"/>
	<class name="Desktop" c:type="HeDesktop" c:symbol-prefix="desktop" glib:type-name="HeDesktop" glib:get-type="he_desktop_get_type" glib:type-struct="DesktopClass" parent="GObject.Object">
		<doc xml:whitespace="preserve">&lt;para&gt;Helper class to deal with desktop-specific settings.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DesktopPrivate" c:type="HeDesktopPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_desktop_new">
			<return-value transfer-ownership="full">
				<type name="He.Desktop" c:type="HeDesktop*"/>
			</return-value>
		</constructor>
		<property name="prefers-color-scheme" writable="1">
			<type name="He.DesktopColorScheme" c:type="HeDesktopColorScheme"/>
		</property>
		<method name="get_prefers_color_scheme" c:identifier="he_desktop_get_prefers_color_scheme">
			<return-value transfer-ownership="none">
				<type name="He.DesktopColorScheme" c:type="HeDesktopColorScheme"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="dark-mode-strength" writable="1">
			<type name="He.DesktopDarkModeStrength" c:type="HeDesktopDarkModeStrength"/>
		</property>
		<method name="get_dark_mode_strength" c:identifier="he_desktop_get_dark_mode_strength">
			<return-value transfer-ownership="none">
				<type name="He.DesktopDarkModeStrength" c:type="HeDesktopDarkModeStrength"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="accent-color" writable="1">
			<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
		</property>
		<method name="get_accent_color" c:identifier="he_desktop_get_accent_color">
			<return-value transfer-ownership="none" nullable="1">
				<type name="He.ColorRGBColor" c:type="HeColorRGBColor*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Desktop" c:type="HeDesktop*"/>
				</instance-parameter>
			</parameters>
		</method>
	</class>
	<record name="DesktopClass" c:type="HeDesktopClass" glib:is-gtype-struct-for="Desktop">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="DesktopPrivate" c:type="HeDesktopPrivate" disguised="1"/>
	<enumeration name="DesktopColorScheme" c:type="HeDesktopColorScheme" glib:type-name="HeDesktopColorScheme" glib:get-type="he_desktop_color_scheme_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The color scheme preference enum, which is used to determine the color scheme of the desktop.&lt;/para&gt;</doc>
		<member name="no_preference" c:identifier="HE_DESKTOP_COLOR_SCHEME_NO_PREFERENCE" value="0"/>
		<member name="dark" c:identifier="HE_DESKTOP_COLOR_SCHEME_DARK" value="1"/>
		<member name="light" c:identifier="HE_DESKTOP_COLOR_SCHEME_LIGHT" value="2"/>
	</enumeration>
	<enumeration name="DesktopDarkModeStrength" c:type="HeDesktopDarkModeStrength" glib:type-name="HeDesktopDarkModeStrength" glib:get-type="he_desktop_dark_mode_strength_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The dark mode strength preference enum, which is used to determine the dark mode strength of the desktop.&lt;/para&gt;</doc>
		<member name="medium" c:identifier="HE_DESKTOP_DARK_MODE_STRENGTH_MEDIUM" value="0"/>
		<member name="harsh" c:identifier="HE_DESKTOP_DARK_MODE_STRENGTH_HARSH" value="1"/>
		<member name="soft" c:identifier="HE_DESKTOP_DARK_MODE_STRENGTH_SOFT" value="2"/>
	</enumeration>
	<class name="AboutWindow" c:type="HeAboutWindow" c:symbol-prefix="about_window" glib:type-name="HeAboutWindow" glib:get-type="he_about_window_get_type" glib:type-struct="AboutWindowClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;An AboutWindow is a window that displays information about the application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AboutWindowPrivate" c:type="HeAboutWindowPrivate*"/>
		</field>
		<field name="_translate_url" writable="1" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="_issue_url" writable="1" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="_more_info_url" writable="1" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="he_about_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new AboutWindow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
			</return-value>
			<parameters>
				<parameter name="parent" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The parent window. &lt;/para&gt;</doc>
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
				<parameter name="app_name" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s name. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="app_id" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s reverse-domain name. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="version" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s version. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s icon. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="translate_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where contributors can help translate the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="issue_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can report a problem with the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="more_info_url" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can get more information about the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="translators" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s translators. &lt;/para&gt;</doc>
					<array length="9" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="translators_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="developers" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s developers. &lt;/para&gt;</doc>
					<array length="11" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="developers_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="copyright_year" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s copyright year. &lt;/para&gt;</doc>
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="license" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s license. &lt;/para&gt;</doc>
					<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
				</parameter>
				<parameter name="color" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The color of the AboutWindow. &lt;/para&gt;</doc>
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The theme color of the AboutWindow.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_about_window_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_about_window_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="license" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The license shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
		</property>
		<method name="get_license" c:identifier="he_about_window_get_license">
			<return-value transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_license" c:identifier="he_about_window_set_license">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
				</parameter>
			</parameters>
		</method>
		<property name="version" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The version shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_version" c:identifier="he_about_window_get_version">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_version" c:identifier="he_about_window_set_version">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="app-name" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The name of the application shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_app_name" c:identifier="he_about_window_get_app_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_app_name" c:identifier="he_about_window_set_app_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_about_window_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_about_window_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="translator-names" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The translators shown in the AboutWindow.&lt;/para&gt;</doc>
			<array c:type="gchar**">
				<type name="utf8" c:type="gchar*"/>
			</array>
		</property>
		<method name="get_translator_names" c:identifier="he_about_window_get_translator_names">
			<return-value transfer-ownership="none">
				<array length="0" c:type="gchar**">
					<type name="utf8" c:type="gchar*"/>
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_translator_names" c:identifier="he_about_window_set_translator_names">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="value_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="developer-names" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The developers shown in the AboutWindow.&lt;/para&gt;</doc>
			<array c:type="gchar**">
				<type name="utf8" c:type="gchar*"/>
			</array>
		</property>
		<method name="get_developer_names" c:identifier="he_about_window_get_developer_names">
			<return-value transfer-ownership="none">
				<array length="0" c:type="gchar**">
					<type name="utf8" c:type="gchar*"/>
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_developer_names" c:identifier="he_about_window_set_developer_names">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="value_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="copyright-year" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The copyright year shown in the AboutWindow.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_copyright_year" c:identifier="he_about_window_get_copyright_year">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_copyright_year" c:identifier="he_about_window_set_copyright_year">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="app-id" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Your application&amp;apos;s reverse-domain name.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_app_id" c:identifier="he_about_window_get_app_id">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_app_id" c:identifier="he_about_window_set_app_id">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="translate-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where contributors can help translate the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_translate_url" c:identifier="he_about_window_get_translate_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_translate_url" c:identifier="he_about_window_set_translate_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="issue-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can report a problem with the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_issue_url" c:identifier="he_about_window_get_issue_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_issue_url" c:identifier="he_about_window_set_issue_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="more-info-url" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A URL where users can get more information about the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_more_info_url" c:identifier="he_about_window_get_more_info_url">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_more_info_url" c:identifier="he_about_window_set_more_info_url">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AboutWindow" c:type="HeAboutWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AboutWindowClass" c:type="HeAboutWindowClass" glib:is-gtype-struct-for="AboutWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="AboutWindowPrivate" c:type="HeAboutWindowPrivate" disguised="1"/>
	<enumeration name="AboutWindowLicenses" c:type="HeAboutWindowLicenses" glib:type-name="HeAboutWindowLicenses" glib:get-type="he_about_window_licenses_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum of commonly used licenses to be used in AboutWindow.&lt;/para&gt;</doc>
		<member name="gplv3" c:identifier="HE_ABOUT_WINDOW_LICENSES_GPLv3" value="0"/>
		<member name="mit" c:identifier="HE_ABOUT_WINDOW_LICENSES_MIT" value="1"/>
		<member name="mplv2" c:identifier="HE_ABOUT_WINDOW_LICENSES_MPLv2" value="2"/>
		<member name="unlicense" c:identifier="HE_ABOUT_WINDOW_LICENSES_UNLICENSE" value="3"/>
		<member name="apachev2" c:identifier="HE_ABOUT_WINDOW_LICENSES_APACHEv2" value="4"/>
		<member name="wtfpl" c:identifier="HE_ABOUT_WINDOW_LICENSES_WTFPL" value="5"/>
		<member name="proprietary" c:identifier="HE_ABOUT_WINDOW_LICENSES_PROPRIETARY" value="6"/>
	</enumeration>
	<function name="about_window_licenses_get_url" c:identifier="he_about_window_licenses_get_url">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the license url for the license.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="about_window_licenses_get_name" c:identifier="he_about_window_licenses_get_name">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the license name for the license.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.AboutWindowLicenses" c:type="HeAboutWindowLicenses"/>
			</instance-parameter>
		</parameters>
	</function>
	<class name="AppBar" c:type="HeAppBar" c:symbol-prefix="app_bar" glib:type-name="HeAppBar" glib:get-type="he_app_bar_get_type" glib:type-struct="AppBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An AppBar is the header bar of an Window. It usually provides controls to manage the window, as well as optional children for more granular
control.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AppBarPrivate" c:type="HeAppBarPrivate*"/>
		</field>
		<field name="back_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The button to go back one view displayed in the AppBar.&lt;/para&gt;</doc>
			<type name="Gtk.Button" c:type="GtkButton*"/>
		</field>
		<field name="btn_box" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The button box in the AppBar, shows below and to the right side of the title, or alongside the window controls, based on scrollers.&lt;/para&gt;</doc>
			<type name="Gtk.Box" c:type="GtkBox*"/>
		</field>
		<method name="append" c:identifier="he_app_bar_append">
			<doc xml:whitespace="preserve">&lt;para&gt;Append a child to the AppBar. Please note that an AppBar should only have at most three children.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to append. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_app_bar_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove a child from the AppBar.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The child to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_app_bar_new">
			<return-value transfer-ownership="none">
				<type name="He.AppBar" c:type="HeAppBar*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the AppBar is associated with. This is used to determine the back button&amp;apos;s functionality.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_app_bar_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_app_bar_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="scroller" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The ScrolledWindow that the AppBar is associated with. This is used to move the view&amp;apos;s title to the AppBar and unsetting flatness.&lt;/para&gt;</doc>
			<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
		</property>
		<method name="get_scroller" c:identifier="he_app_bar_get_scroller">
			<return-value transfer-ownership="none">
				<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_scroller" c:identifier="he_app_bar_set_scroller">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="viewtitle-label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title to the left on the AppBar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_viewtitle_label" c:identifier="he_app_bar_get_viewtitle_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_viewtitle_label" c:identifier="he_app_bar_set_viewtitle_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="viewsubtitle-label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title to the left on the AppBar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_viewsubtitle_label" c:identifier="he_app_bar_get_viewsubtitle_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_viewsubtitle_label" c:identifier="he_app_bar_set_viewsubtitle_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="flat" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the AppBar is flat, i.e. has no bottom border.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_flat" c:identifier="he_app_bar_get_flat">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_flat" c:identifier="he_app_bar_set_flat">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the close, minimize and maximize buttons are shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_buttons" c:identifier="he_app_bar_get_show_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_buttons" c:identifier="he_app_bar_set_show_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-back" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the back button is shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_back" c:identifier="he_app_bar_get_show_back">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_back" c:identifier="he_app_bar_set_show_back">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.AppBar" c:type="HeAppBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AppBarClass" c:type="HeAppBarClass" glib:is-gtype-struct-for="AppBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="AppBarPrivate" c:type="HeAppBarPrivate" disguised="1"/>
	<class name="ApplicationWindow" c:type="HeApplicationWindow" c:symbol-prefix="application_window" glib:type-name="HeApplicationWindow" glib:get-type="he_application_window_get_type" glib:type-struct="ApplicationWindowClass" parent="Gtk.ApplicationWindow">
		<doc xml:whitespace="preserve">&lt;para&gt;An ApplicationWindow is a Window for holding the main content of an application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ApplicationWindowPrivate" c:type="HeApplicationWindowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_application_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ApplicationWindow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
			</return-value>
			<parameters>
				<parameter name="app" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The application associated with this window. &lt;/para&gt;</doc>
					<type name="He.Application" c:type="HeApplication*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="modal" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_modal" c:identifier="he_application_window_get_modal">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_modal" c:identifier="he_application_window_set_modal">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-title" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_title" c:identifier="he_application_window_get_has_title">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_title" c:identifier="he_application_window_set_has_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-back-button" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_back_button" c:identifier="he_application_window_get_has_back_button">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_back_button" c:identifier="he_application_window_set_has_back_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ApplicationWindow" c:type="HeApplicationWindow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ApplicationWindowClass" c:type="HeApplicationWindowClass" glib:is-gtype-struct-for="ApplicationWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ApplicationWindowClass" c:type="GtkApplicationWindowClass"/>
		</field>
	</record>
	<record name="ApplicationWindowPrivate" c:type="HeApplicationWindowPrivate" disguised="1"/>
	<class name="Avatar" c:type="HeAvatar" c:symbol-prefix="avatar" glib:type-name="HeAvatar" glib:get-type="he_avatar_get_type" glib:type-struct="AvatarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An Avatar is an element that displays an image that represents a person.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AvatarPrivate" c:type="HeAvatarPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_avatar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Avatar.&lt;/para&gt;

Since: 1.1</doc>
			<return-value transfer-ownership="none">
				<type name="He.Avatar" c:type="HeAvatar*"/>
			</return-value>
			<parameters>
				<parameter name="size" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="image" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to display &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="text" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="image" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The image of the avatar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_image" c:identifier="he_avatar_get_image">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_image" c:identifier="he_avatar_set_image">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="size" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The size of the avatar.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_size" c:identifier="he_avatar_get_size">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_size" c:identifier="he_avatar_set_size">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="text" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The text of the avatar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_text" c:identifier="he_avatar_get_text">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_text" c:identifier="he_avatar_set_text">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Avatar" c:type="HeAvatar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="AvatarClass" c:type="HeAvatarClass" glib:is-gtype-struct-for="Avatar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="AvatarPrivate" c:type="HeAvatarPrivate" disguised="1"/>
	<class name="Badge" c:type="HeBadge" c:symbol-prefix="badge" glib:type-name="HeBadge" glib:get-type="he_badge_get_type" glib:type-struct="BadgeClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Badge is a small status indicator that can be used to provide additional information about an object.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BadgePrivate" c:type="HeBadgePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_badge_new">
			<return-value transfer-ownership="none">
				<type name="He.Badge" c:type="HeBadge*"/>
			</return-value>
		</constructor>
		<property name="child" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The child of the badge.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_badge_get_child">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_badge_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_badge_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_badge_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Badge" c:type="HeBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BadgeClass" c:type="HeBadgeClass" glib:is-gtype-struct-for="Badge">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BadgePrivate" c:type="HeBadgePrivate" disguised="1"/>
	<class name="Banner" c:type="HeBanner" c:symbol-prefix="banner" glib:type-name="HeBanner" glib:get-type="he_banner_get_type" glib:type-struct="BannerClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Banner is a widget that displays a message to the user and provides a way for the user to act on the message.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BannerPrivate" c:type="HeBannerPrivate*"/>
		</field>
		<method name="add_action_button" c:identifier="he_banner_add_action_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a button to the banner.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The button to add to the banner. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_action" c:identifier="he_banner_remove_action">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove a button from the banner.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The button to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_banner_style" c:identifier="he_banner_set_banner_style">
			<doc xml:whitespace="preserve">&lt;para&gt;Set the banner style.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="style" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The style to set the banner to. &lt;/para&gt;</doc>
					<type name="He.BannerStyle" c:type="HeBannerStyle"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_banner_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Construct a new banner.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Banner" c:type="HeBanner*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the banner. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The description of the banner. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the banner&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_banner_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_banner_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the banner&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_banner_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_banner_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="style" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The style of the banner&lt;/para&gt;</doc>
			<type name="He.BannerStyle" c:type="HeBannerStyle"/>
		</property>
		<method name="get_style" c:identifier="he_banner_get_style">
			<return-value transfer-ownership="none">
				<type name="He.BannerStyle" c:type="HeBannerStyle"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_style" c:identifier="he_banner_set_style">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Banner" c:type="HeBanner*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.BannerStyle" c:type="HeBannerStyle"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BannerClass" c:type="HeBannerClass" glib:is-gtype-struct-for="Banner">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BannerPrivate" c:type="HeBannerPrivate" disguised="1"/>
	<enumeration name="BannerStyle" c:type="HeBannerStyle" glib:type-name="HeBannerStyle" glib:get-type="he_banner_style_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum representing the style of the banner.&lt;/para&gt;</doc>
		<member name="info" c:identifier="HE_BANNER_STYLE_INFO" value="0"/>
		<member name="warning" c:identifier="HE_BANNER_STYLE_WARNING" value="1"/>
		<member name="error" c:identifier="HE_BANNER_STYLE_ERROR" value="2"/>
	</enumeration>
	<class name="BottomBar" c:type="HeBottomBar" c:symbol-prefix="bottom_bar" glib:type-name="HeBottomBar" glib:get-type="he_bottom_bar_get_type" glib:type-struct="BottomBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A BottomBar is a toolbar made to make actions on content more visible. It may have up to 5 actions on each side. It has title and description
labels, which can be part of a menu&amp;apos;s label.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BottomBarPrivate" c:type="HeBottomBarPrivate*"/>
		</field>
		<constructor name="with_details" c:identifier="he_bottom_bar_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.BottomBar" c:type="HeBottomBar*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the bottom bar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The description of the bottom bar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_bottom_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.BottomBar" c:type="HeBottomBar*"/>
			</return-value>
		</constructor>
		<method name="append_button" c:identifier="he_bottom_bar_append_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add an action to the bottom bar on the end of the bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="prepend_button" c:identifier="he_bottom_bar_prepend_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Add an action to the bottom bar on the start of the bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_button" c:identifier="he_bottom_bar_remove_button">
			<doc xml:whitespace="preserve">&lt;para&gt;Remove an action of the bottom bar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="insert_button_after" c:identifier="he_bottom_bar_insert_button_after">
			<doc xml:whitespace="preserve">&lt;para&gt;Insert an action after another action.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="after" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action after which the action is. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="reorder_button_after" c:identifier="he_bottom_bar_reorder_button_after">
			<doc xml:whitespace="preserve">&lt;para&gt;Reorder an action based on another action.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="sibling" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The iconicbutton of the action after which the action is. &lt;/para&gt;</doc>
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the action. &lt;/para&gt;</doc>
					<type name="He.BottomBarPosition" c:type="HeBottomBarPosition"/>
				</parameter>
			</parameters>
		</method>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the bottom bar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_bottom_bar_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_bottom_bar_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the bottom bar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_bottom_bar_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_bottom_bar_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu-model" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu_model of the bottom bar. If a menu_model is set, show it on the center widget of the bottom bar.&lt;/para&gt;</doc>
			<type name="Gio.MenuModel" c:type="GMenuModel*"/>
		</property>
		<method name="get_menu_model" c:identifier="he_bottom_bar_get_menu_model">
			<return-value transfer-ownership="none">
				<type name="Gio.MenuModel" c:type="GMenuModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_menu_model" c:identifier="he_bottom_bar_set_menu_model">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.MenuModel" c:type="GMenuModel*"/>
				</parameter>
			</parameters>
		</method>
		<property name="collapse-actions" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_collapse_actions" c:identifier="he_bottom_bar_get_collapse_actions">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_collapse_actions" c:identifier="he_bottom_bar_set_collapse_actions">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.BottomBar" c:type="HeBottomBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BottomBarClass" c:type="HeBottomBarClass" glib:is-gtype-struct-for="BottomBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="BottomBarPrivate" c:type="HeBottomBarPrivate" disguised="1"/>
	<enumeration name="BottomBarPosition" c:type="HeBottomBarPosition" glib:type-name="HeBottomBarPosition" glib:get-type="he_bottom_bar_position_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;An enum to define the position of the bottom bar actions.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_BOTTOM_BAR_POSITION_LEFT" value="0"/>
		<member name="right" c:identifier="HE_BOTTOM_BAR_POSITION_RIGHT" value="1"/>
	</enumeration>
	<class name="Chip" c:type="HeChip" c:symbol-prefix="chip" glib:type-name="HeChip" glib:get-type="he_chip_get_type" glib:type-struct="ChipClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A Chip is an element that can facilitate entering information, making selections, filtering content, or triggering actions.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ChipPrivate" c:type="HeChipPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_chip_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Chip.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Chip" c:type="HeChip*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The text to display in the chip. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="ChipClass" c:type="HeChipClass" glib:is-gtype-struct-for="Chip">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="ChipPrivate" c:type="HeChipPrivate" disguised="1"/>
	<class name="ContentBlock" c:type="HeContentBlock" c:symbol-prefix="content_block" glib:type-name="HeContentBlock" glib:get-type="he_content_block_get_type" glib:type-struct="ContentBlockClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlock displays a single block of content, which contains an icon, text and optional buttons.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockPrivate" c:type="HeContentBlockPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_content_block_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new ContentBlock.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ContentBlock" c:type="HeContentBlock*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
				<parameter name="secondary_button" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The secondary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_block_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_block_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_content_block_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_content_block_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_content_block_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_content_block_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_content_block_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the secondary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_secondary_button" c:identifier="he_content_block_get_secondary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_button" c:identifier="he_content_block_set_secondary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the primary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_content_block_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_content_block_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlock" c:type="HeContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockClass" c:type="HeContentBlockClass" glib:is-gtype-struct-for="ContentBlock">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockPrivate" c:type="HeContentBlockPrivate" disguised="1"/>
	<class name="ContentBlockImage" c:type="HeContentBlockImage" c:symbol-prefix="content_block_image" glib:type-name="HeContentBlockImage" glib:get-type="he_content_block_image_get_type" glib:type-struct="ContentBlockImageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlockImage component is used to render an image inside a ContentBlock.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockImagePrivate" c:type="HeContentBlockImagePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_content_block_image_new">
			<return-value transfer-ownership="none">
				<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="file" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The file path of the image.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_file" c:identifier="he_content_block_image_get_file">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_file" c:identifier="he_content_block_image_set_file">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="requested-height" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The height of the image.&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_requested_height" c:identifier="he_content_block_image_get_requested_height">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_requested_height" c:identifier="he_content_block_image_set_requested_height">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<property name="requested-width" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The width of the image.&lt;/para&gt;

Since: 1.0</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_requested_width" c:identifier="he_content_block_image_get_requested_width">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_requested_width" c:identifier="he_content_block_image_set_requested_width">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockImageClass" c:type="HeContentBlockImageClass" glib:is-gtype-struct-for="ContentBlockImage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockImagePrivate" c:type="HeContentBlockImagePrivate" disguised="1"/>
	<class name="ContentBlockImageCluster" c:type="HeContentBlockImageCluster" c:symbol-prefix="content_block_image_cluster" glib:type-name="HeContentBlockImageCluster" glib:get-type="he_content_block_image_cluster_get_type" glib:type-struct="ContentBlockImageClusterClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ContentBlockImageCluster is a cluster of images that are rendered together in the same content block.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentBlockImageClusterPrivate" c:type="HeContentBlockImageClusterPrivate*"/>
		</field>
		<method name="set_image" c:identifier="he_content_block_image_cluster_set_image">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets an image to be displayed in the cluster.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="image" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to display. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</parameter>
				<parameter name="position" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The position of the image in the cluster. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_image" c:identifier="he_content_block_image_cluster_remove_image">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an image from the cluster.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="image" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The image to remove. &lt;/para&gt;</doc>
					<type name="He.ContentBlockImage" c:type="HeContentBlockImage*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_content_block_image_cluster_new">
			<return-value transfer-ownership="none">
				<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_block_image_cluster_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_block_image_cluster_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_content_block_image_cluster_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_content_block_image_cluster_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The image of the cluster.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_content_block_image_cluster_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_content_block_image_cluster_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentBlockImageCluster" c:type="HeContentBlockImageCluster*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentBlockImageClusterClass" c:type="HeContentBlockImageClusterClass" glib:is-gtype-struct-for="ContentBlockImageCluster">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentBlockImageClusterPrivate" c:type="HeContentBlockImageClusterPrivate" disguised="1"/>
	<enumeration name="ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition" glib:type-name="HeContentBlockImageClusterImagePosition" glib:get-type="he_content_block_image_cluster_image_position_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The position of the cluster image in the cluster.&lt;/para&gt;</doc>
		<member name="top_left" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_LEFT" value="0"/>
		<member name="bottom_left" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_LEFT" value="1"/>
		<member name="top_right" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_TOP_RIGHT" value="2"/>
		<member name="bottom_right" c:identifier="HE_CONTENT_BLOCK_IMAGE_CLUSTER_IMAGE_POSITION_BOTTOM_RIGHT" value="3"/>
	</enumeration>
	<function name="content_block_image_cluster_image_position_get_column" c:identifier="he_content_block_image_cluster_image_position_get_column">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="content_block_image_cluster_image_position_get_row" c:identifier="he_content_block_image_cluster_image_position_get_row">
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ContentBlockImageClusterImagePosition" c:type="HeContentBlockImageClusterImagePosition"/>
			</instance-parameter>
		</parameters>
	</function>
	<class name="ContentList" c:type="HeContentList" c:symbol-prefix="content_list" glib:type-name="HeContentList" glib:get-type="he_content_list_get_type" glib:type-struct="ContentListClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Content List is a list of content blocks with an optional title and description.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ContentListPrivate" c:type="HeContentListPrivate*"/>
		</field>
		<field name="children" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A List of all the children of the content list.&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</type>
		</field>
		<method name="add" c:identifier="he_content_list_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a new item to the content list.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to add. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_content_list_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an item from the content list.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_content_list_new">
			<return-value transfer-ownership="none">
				<type name="He.ContentList" c:type="HeContentList*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the content list.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_content_list_get_title">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_content_list_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the content list.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_content_list_get_description">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_content_list_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ContentList" c:type="HeContentList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ContentListClass" c:type="HeContentListClass" glib:is-gtype-struct-for="ContentList">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ContentListPrivate" c:type="HeContentListPrivate" disguised="1"/>
	<class name="Dialog" c:type="HeDialog" c:symbol-prefix="dialog" glib:type-name="HeDialog" glib:get-type="he_dialog_get_type" glib:type-struct="DialogClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A Dialog is a modal window that asks the user for input or shows a message.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DialogPrivate" c:type="HeDialogPrivate*"/>
		</field>
		<field name="cancel_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The cancel button in the dialog.&lt;/para&gt;</doc>
			<type name="He.TextButton" c:type="HeTextButton*"/>
		</field>
		<method name="add" c:identifier="he_dialog_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child directly to the Dialog. Used only in code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_dialog_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new dialog.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Dialog" c:type="HeDialog*"/>
			</return-value>
			<parameters>
				<parameter name="modal" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;Whether the dialog is modal. &lt;/para&gt;</doc>
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The parent window of the dialog. &lt;/para&gt;</doc>
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="info" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The info text of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the dialog. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the dialog. &lt;/para&gt;</doc>
					<type name="He.FillButton" c:type="HeFillButton*"/>
				</parameter>
				<parameter name="secondary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The secondary button of the dialog. &lt;/para&gt;</doc>
					<type name="He.TintButton" c:type="HeTintButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_dialog_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_dialog_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_dialog_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_dialog_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="info" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the info text of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_info" c:identifier="he_dialog_get_info">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_info" c:identifier="he_dialog_set_info">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the dialog.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_dialog_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_dialog_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the secondary button of the dialog.&lt;/para&gt;</doc>
			<type name="He.TintButton" c:type="HeTintButton*"/>
		</property>
		<method name="get_secondary_button" c:identifier="he_dialog_get_secondary_button">
			<return-value transfer-ownership="none">
				<type name="He.TintButton" c:type="HeTintButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_button" c:identifier="he_dialog_set_secondary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.TintButton" c:type="HeTintButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the primary button of the dialog.&lt;/para&gt;</doc>
			<type name="He.FillButton" c:type="HeFillButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_dialog_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.FillButton" c:type="HeFillButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_dialog_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Dialog" c:type="HeDialog*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.FillButton" c:type="HeFillButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DialogClass" c:type="HeDialogClass" glib:is-gtype-struct-for="Dialog">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="DialogPrivate" c:type="HeDialogPrivate" disguised="1"/>
	<class name="DisclosureButton" c:type="HeDisclosureButton" c:symbol-prefix="disclosure_button" glib:type-name="HeDisclosureButton" glib:get-type="he_disclosure_button_get_type" glib:type-struct="DisclosureButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A Disclosure Button is a view-based button that acts on said view.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="DisclosureButtonPrivate" c:type="HeDisclosureButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_disclosure_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new DisclosureButton.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.DisclosureButton" c:type="HeDisclosureButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The name of the icon to use. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="from_icon" c:identifier="he_disclosure_button_new_from_icon">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new DisclosureButton from an icon.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.DisclosureButton" c:type="HeDisclosureButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon to display on the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the button.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_disclosure_button_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.DisclosureButton" c:type="HeDisclosureButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_disclosure_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.DisclosureButton" c:type="HeDisclosureButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="DisclosureButtonClass" c:type="HeDisclosureButtonClass" glib:is-gtype-struct-for="DisclosureButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="DisclosureButtonPrivate" c:type="HeDisclosureButtonPrivate" disguised="1"/>
	<class name="EmptyPage" c:type="HeEmptyPage" c:symbol-prefix="empty_page" glib:type-name="HeEmptyPage" glib:get-type="he_empty_page_get_type" glib:type-struct="EmptyPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An EmptyPage is a page that is used to display a message and a button when there is no data to display.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="EmptyPagePrivate" c:type="HeEmptyPagePrivate*"/>
		</field>
		<field name="action_button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The action button of the empty page. Can connect to the clicked signal to get notified when the button is clicked. e.g.
action_button.clicked.connect&amp;lpar;&amp;lpar;&amp;rpar; =&amp;gt; { ... }&amp;rpar;;&lt;/para&gt;</doc>
			<type name="He.PillButton" c:type="HePillButton*"/>
		</field>
		<constructor name="new" c:identifier="he_empty_page_new">
			<return-value transfer-ownership="none">
				<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_empty_page_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_empty_page_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the description of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_empty_page_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_empty_page_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the empty page.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_empty_page_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_empty_page_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the button of the empty page.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_button" c:identifier="he_empty_page_get_button">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_button" c:identifier="he_empty_page_set_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.EmptyPage" c:type="HeEmptyPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="EmptyPageClass" c:type="HeEmptyPageClass" glib:is-gtype-struct-for="EmptyPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="EmptyPagePrivate" c:type="HeEmptyPagePrivate" disguised="1"/>
	<class name="FillButton" c:type="HeFillButton" c:symbol-prefix="fill_button" glib:type-name="HeFillButton" glib:get-type="he_fill_button_get_type" glib:type-struct="FillButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A FillButton is a solid button with a label.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="FillButtonPrivate" c:type="HeFillButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_fill_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new FillButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.FillButton" c:type="HeFillButton*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The label of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="FillButtonClass" c:type="HeFillButtonClass" glib:is-gtype-struct-for="FillButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="FillButtonPrivate" c:type="HeFillButtonPrivate" disguised="1"/>
	<class name="IconicButton" c:type="HeIconicButton" c:symbol-prefix="iconic_button" glib:type-name="HeIconicButton" glib:get-type="he_iconic_button_get_type" glib:type-struct="IconicButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;An Iconic Button is used in a &lt;type&gt;HeBottomBar&lt;/type&gt; to display an action.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="IconicButtonPrivate" c:type="HeIconicButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_iconic_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new IconicButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.IconicButton" c:type="HeIconicButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon name to display. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The icon name to display.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_iconic_button_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_iconic_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="tooltip" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_tooltip" c:identifier="he_iconic_button_get_tooltip">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tooltip" c:identifier="he_iconic_button_set_tooltip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.IconicButton" c:type="HeIconicButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="IconicButtonClass" c:type="HeIconicButtonClass" glib:is-gtype-struct-for="IconicButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="IconicButtonPrivate" c:type="HeIconicButtonPrivate" disguised="1"/>
	<class name="MiniContentBlock" c:type="HeMiniContentBlock" c:symbol-prefix="mini_content_block" glib:type-name="HeMiniContentBlock" glib:get-type="he_mini_content_block_get_type" glib:type-struct="MiniContentBlockClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A MiniContentBlock is a content block that is used to display content in a small area.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="MiniContentBlockPrivate" c:type="HeMiniContentBlockPrivate*"/>
		</field>
		<constructor name="with_details" c:identifier="he_mini_content_block_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new MiniContentBlock.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the content block. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_mini_content_block_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new MiniContentBlock.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_mini_content_block_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_mini_content_block_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_mini_content_block_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_mini_content_block_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the content block.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_mini_content_block_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_mini_content_block_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_mini_content_block_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="paintable" readable="0" writable="1">
			<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
		</property>
		<method name="set_paintable" c:identifier="he_mini_content_block_set_paintable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the content block.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_mini_content_block_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_mini_content_block_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.MiniContentBlock" c:type="HeMiniContentBlock*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="MiniContentBlockClass" c:type="HeMiniContentBlockClass" glib:is-gtype-struct-for="MiniContentBlock">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="MiniContentBlockPrivate" c:type="HeMiniContentBlockPrivate" disguised="1"/>
	<class name="ModifierBadge" c:type="HeModifierBadge" c:symbol-prefix="modifier_badge" glib:type-name="HeModifierBadge" glib:get-type="he_modifier_badge_get_type" glib:type-struct="ModifierBadgeClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ModiferBadge is a badge that can be used to show that the state of something has changed.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ModifierBadgePrivate" c:type="HeModifierBadgePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_modifier_badge_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new ModifierBadge.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The text of the badge. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the badge.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_modifier_badge_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_modifier_badge_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="tinted" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_tinted" c:identifier="he_modifier_badge_get_tinted">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tinted" c:identifier="he_modifier_badge_set_tinted">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The text of the badge.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_modifier_badge_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_modifier_badge_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="alignment" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the badge.&lt;/para&gt;

Since: 1.0</doc>
			<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
		</property>
		<method name="get_alignment" c:identifier="he_modifier_badge_get_alignment">
			<return-value transfer-ownership="none">
				<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_alignment" c:identifier="he_modifier_badge_set_alignment">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ModifierBadge" c:type="HeModifierBadge*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ModifierBadgeClass" c:type="HeModifierBadgeClass" glib:is-gtype-struct-for="ModifierBadge">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ModifierBadgePrivate" c:type="HeModifierBadgePrivate" disguised="1"/>
	<enumeration name="ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment" glib:type-name="HeModifierBadgeAlignment" glib:get-type="he_modifier_badge_alignment_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the badge in a enum.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_LEFT" value="0"/>
		<member name="center" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_CENTER" value="1"/>
		<member name="right" c:identifier="HE_MODIFIER_BADGE_ALIGNMENT_RIGHT" value="2"/>
	</enumeration>
	<function name="modifier_badge_alignment_to_gtk_align" c:identifier="he_modifier_badge_alignment_to_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the alignment as a Gtk.Alignment.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="Gtk.Align" c:type="GtkAlign"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="modifier_badge_alignment_from_gtk_align" c:identifier="he_modifier_badge_alignment_from_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Sets the alignment from a Gtk.Align.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="He.ModifierBadgeAlignment" c:type="HeModifierBadgeAlignment"/>
		</return-value>
		<parameters>
			<parameter name="align" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The alignment to set. &lt;/para&gt;</doc>
				<type name="Gtk.Align" c:type="GtkAlign"/>
			</parameter>
		</parameters>
	</function>
	<class name="NavigationRail" c:type="HeNavigationRail" c:symbol-prefix="navigation_rail" glib:type-name="HeNavigationRail" glib:get-type="he_navigation_rail_get_type" glib:type-struct="NavigationRailClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A NavigationRail is a vertical switcher that helps navigate a stack.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="NavigationRailPrivate" c:type="HeNavigationRailPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_navigation_rail_new">
			<return-value transfer-ownership="none">
				<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_navigation_rail_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_navigation_rail_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="orientation" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The orientation of this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Orientation" c:type="GtkOrientation"/>
		</property>
		<method name="get_orientation" c:identifier="he_navigation_rail_get_orientation">
			<return-value transfer-ownership="none">
				<type name="Gtk.Orientation" c:type="GtkOrientation"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_orientation" c:identifier="he_navigation_rail_set_orientation">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.NavigationRail" c:type="HeNavigationRail*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Orientation" c:type="GtkOrientation"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="NavigationRailClass" c:type="HeNavigationRailClass" glib:is-gtype-struct-for="NavigationRail">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="NavigationRailPrivate" c:type="HeNavigationRailPrivate" disguised="1"/>
	<class name="OutlineButton" c:type="HeOutlineButton" c:symbol-prefix="outline_button" glib:type-name="HeOutlineButton" glib:get-type="he_outline_button_get_type" glib:type-struct="OutlineButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;An Outline button is a transparent FillButton with a border.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="OutlineButtonPrivate" c:type="HeOutlineButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_outline_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new OutlineButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.OutlineButton" c:type="HeOutlineButton*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The label of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="OutlineButtonClass" c:type="HeOutlineButtonClass" glib:is-gtype-struct-for="OutlineButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="OutlineButtonPrivate" c:type="HeOutlineButtonPrivate" disguised="1"/>
	<class name="OverlayButton" c:type="HeOverlayButton" c:symbol-prefix="overlay_button" glib:type-name="HeOverlayButton" glib:get-type="he_overlay_button_get_type" glib:type-struct="OverlayButtonClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;An OverlayButton is a widget that can be used to show action buttons above the widget that is being overlaid.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="OverlayButtonPrivate" c:type="HeOverlayButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_overlay_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new OverlayButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The label of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="secondary_icon" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon of the secondary button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="size" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The size of the button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
		</property>
		<method name="get_size" c:identifier="he_overlay_button_get_size">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_size" c:identifier="he_overlay_button_set_size">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
				</parameter>
			</parameters>
		</method>
		<property name="color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the button.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_color" c:identifier="he_overlay_button_get_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_color" c:identifier="he_overlay_button_set_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-color" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The color of the secondary button.&lt;/para&gt;</doc>
			<type name="He.Colors" c:type="HeColors"/>
		</property>
		<method name="get_secondary_color" c:identifier="he_overlay_button_get_secondary_color">
			<return-value transfer-ownership="none">
				<type name="He.Colors" c:type="HeColors"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_color" c:identifier="he_overlay_button_set_secondary_color">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Colors" c:type="HeColors"/>
				</parameter>
			</parameters>
		</method>
		<property name="secondary-icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The secondary button icon.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_secondary_icon" c:identifier="he_overlay_button_get_secondary_icon">
			<return-value transfer-ownership="full" nullable="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_secondary_icon" c:identifier="he_overlay_button_set_secondary_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button icon.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_overlay_button_get_icon">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_overlay_button_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button label.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_overlay_button_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_overlay_button_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="child" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The widget to be overlaid.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_child" c:identifier="he_overlay_button_get_child">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="he_overlay_button_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="alignment" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the button.&lt;/para&gt;</doc>
			<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
		</property>
		<method name="get_alignment" c:identifier="he_overlay_button_get_alignment">
			<return-value transfer-ownership="none">
				<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_alignment" c:identifier="he_overlay_button_set_alignment">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.OverlayButton" c:type="HeOverlayButton*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="clicked">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="secondary-clicked">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="OverlayButtonClass" c:type="HeOverlayButtonClass" glib:is-gtype-struct-for="OverlayButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="OverlayButtonPrivate" c:type="HeOverlayButtonPrivate" disguised="1"/>
	<enumeration name="OverlayButtonSize" c:type="HeOverlayButtonSize" glib:type-name="HeOverlayButtonSize" glib:get-type="he_overlay_button_size_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The size of the button as an enum.&lt;/para&gt;</doc>
		<member name="small" c:identifier="HE_OVERLAY_BUTTON_SIZE_SMALL" value="0"/>
		<member name="medium" c:identifier="HE_OVERLAY_BUTTON_SIZE_MEDIUM" value="1"/>
		<member name="large" c:identifier="HE_OVERLAY_BUTTON_SIZE_LARGE" value="2"/>
	</enumeration>
	<function name="overlay_button_size_to_css_class" c:identifier="he_overlay_button_size_to_css_class">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as a CSS class to be used.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full" nullable="1">
			<type name="utf8" c:type="gchar*"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.OverlayButtonSize" c:type="HeOverlayButtonSize"/>
			</instance-parameter>
		</parameters>
	</function>
	<enumeration name="OverlayButtonAlignment" c:type="HeOverlayButtonAlignment" glib:type-name="HeOverlayButtonAlignment" glib:get-type="he_overlay_button_alignment_get_type">
		<doc xml:whitespace="preserve">&lt;para&gt;The alignment of the button.&lt;/para&gt;</doc>
		<member name="left" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_LEFT" value="0"/>
		<member name="center" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_CENTER" value="1"/>
		<member name="right" c:identifier="HE_OVERLAY_BUTTON_ALIGNMENT_RIGHT" value="2"/>
	</enumeration>
	<function name="overlay_button_alignment_to_gtk_align" c:identifier="he_overlay_button_alignment_to_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as an alignment to be used.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="Gtk.Align" c:type="GtkAlign"/>
		</return-value>
		<parameters>
			<instance-parameter name="self" transfer-ownership="none">
				<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
			</instance-parameter>
		</parameters>
	</function>
	<function name="overlay_button_alignment_from_gtk_align" c:identifier="he_overlay_button_alignment_from_gtk_align">
		<doc xml:whitespace="preserve">&lt;para&gt;Returns the string representation of the enum as an alignment.&lt;/para&gt;</doc>
		<return-value transfer-ownership="full">
			<type name="He.OverlayButtonAlignment" c:type="HeOverlayButtonAlignment"/>
		</return-value>
		<parameters>
			<parameter name="align" transfer-ownership="none">
				<doc xml:whitespace="preserve">&lt;para&gt;The alignment to use. &lt;/para&gt;</doc>
				<type name="Gtk.Align" c:type="GtkAlign"/>
			</parameter>
		</parameters>
	</function>
	<class name="PillButton" c:type="HePillButton" c:symbol-prefix="pill_button" glib:type-name="HePillButton" glib:get-type="he_pill_button_get_type" glib:type-struct="PillButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A PillButton is a solid button with a label. It is more round and larger than a FillButton.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="PillButtonPrivate" c:type="HePillButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_pill_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new PillButton.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.PillButton" c:type="HePillButton*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The label of the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="PillButtonClass" c:type="HePillButtonClass" glib:is-gtype-struct-for="PillButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="PillButtonPrivate" c:type="HePillButtonPrivate" disguised="1"/>
	<class name="SettingsRow" c:type="HeSettingsRow" c:symbol-prefix="settings_row" glib:type-name="HeSettingsRow" glib:get-type="he_settings_row_get_type" glib:type-struct="SettingsRowClass" parent="Gtk.ListBoxRow">
		<doc xml:whitespace="preserve">&lt;para&gt;A SettingsRow is a settings row that is used to display content in a small area that is activatable if desired.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsRowPrivate" c:type="HeSettingsRowPrivate*"/>
		</field>
		<constructor name="with_details" c:identifier="he_settings_row_new_with_details">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new SettingsRow.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the settings row. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the settings row. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="primary_button" transfer-ownership="none" nullable="1">
					<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the settings row. &lt;/para&gt;</doc>
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="he_settings_row_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Constructs a new SettingsRow.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_row_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_row_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_settings_row_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_settings_row_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the icon of the settings row.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_icon" c:identifier="he_settings_row_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="he_settings_row_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="gicon" readable="0" writable="1">
			<type name="Gio.Icon" c:type="GIcon*"/>
		</property>
		<method name="set_gicon" c:identifier="he_settings_row_set_gicon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*"/>
				</parameter>
			</parameters>
		</method>
		<property name="paintable" readable="0" writable="1">
			<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
		</property>
		<method name="set_paintable" c:identifier="he_settings_row_set_paintable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gdk.Paintable" c:type="GdkPaintable*"/>
				</parameter>
			</parameters>
		</method>
		<property name="primary-button" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The primary button of the settings row.&lt;/para&gt;</doc>
			<type name="He.Button" c:type="HeButton*"/>
		</property>
		<method name="get_primary_button" c:identifier="he_settings_row_get_primary_button">
			<return-value transfer-ownership="none">
				<type name="He.Button" c:type="HeButton*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_primary_button" c:identifier="he_settings_row_set_primary_button">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Button" c:type="HeButton*"/>
				</parameter>
			</parameters>
		</method>
		<property name="activatable-widget" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the activatable widget of the settings row, if any.&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_activatable_widget" c:identifier="he_settings_row_get_activatable_widget">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_activatable_widget" c:identifier="he_settings_row_set_activatable_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsRow" c:type="HeSettingsRow*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="activated">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="SettingsRowClass" c:type="HeSettingsRowClass" glib:is-gtype-struct-for="SettingsRow">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
		</field>
	</record>
	<record name="SettingsRowPrivate" c:type="HeSettingsRowPrivate" disguised="1"/>
	<class name="SettingsList" c:type="HeSettingsList" c:symbol-prefix="settings_list" glib:type-name="HeSettingsList" glib:get-type="he_settings_list_get_type" glib:type-struct="SettingsListClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A SettingsList is a list of content blocks with an optional title and description.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsListPrivate" c:type="HeSettingsListPrivate*"/>
		</field>
		<field name="children" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;A List of all the children of the SettingsList.&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</type>
		</field>
		<method name="add" c:identifier="he_settings_list_add">
			<doc xml:whitespace="preserve">&lt;para&gt;Adds a new item to the SettingsList.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to add. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="he_settings_list_remove">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes an item from the SettingsList.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="child" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The item to remove. &lt;/para&gt;</doc>
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_list_new">
			<return-value transfer-ownership="none">
				<type name="He.SettingsList" c:type="HeSettingsList*"/>
			</return-value>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the SettingsList.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_list_get_title">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_list_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The description of the SettingsList.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_settings_list_get_description">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_settings_list_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SettingsListClass" c:type="HeSettingsListClass" glib:is-gtype-struct-for="SettingsList">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SettingsListPrivate" c:type="HeSettingsListPrivate" disguised="1"/>
	<class name="SettingsPage" c:type="HeSettingsPage" c:symbol-prefix="settings_page" glib:type-name="HeSettingsPage" glib:get-type="he_settings_page_get_type" glib:type-struct="SettingsPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Auxilary Class for handling the contents of Settings Windows&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsPagePrivate" c:type="HeSettingsPagePrivate*"/>
		</field>
		<method name="add_list" c:identifier="he_settings_page_add_list">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings List to this page&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
				<parameter name="list" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_page_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Settings Page.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of this Settings Page. This is used to determine the name shown in the View Switcher.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_settings_page_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_settings_page_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SettingsPageClass" c:type="HeSettingsPageClass" glib:is-gtype-struct-for="SettingsPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SettingsPagePrivate" c:type="HeSettingsPagePrivate" disguised="1"/>
	<class name="SettingsWindow" c:type="HeSettingsWindow" c:symbol-prefix="settings_window" glib:type-name="HeSettingsWindow" glib:get-type="he_settings_window_get_type" glib:type-struct="SettingsWindowClass" parent="He.Window">
		<doc xml:whitespace="preserve">&lt;para&gt;A modal window that accepts SettingsLists or SettingsPages&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Window" c:type="HeWindow"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SettingsWindowPrivate" c:type="HeSettingsWindowPrivate*"/>
		</field>
		<method name="add_page" c:identifier="he_settings_window_add_page">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings Page to this window&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
				</instance-parameter>
				<parameter name="page" transfer-ownership="none">
					<type name="He.SettingsPage" c:type="HeSettingsPage*"/>
				</parameter>
			</parameters>
		</method>
		<method name="add_list" c:identifier="he_settings_window_add_list">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a Settings List to this window&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
				</instance-parameter>
				<parameter name="list" transfer-ownership="none">
					<type name="He.SettingsList" c:type="HeSettingsList*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_settings_window_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Settings Window.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.SettingsWindow" c:type="HeSettingsWindow*"/>
			</return-value>
			<parameters>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<type name="Gtk.Window" c:type="GtkWindow*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="SettingsWindowClass" c:type="HeSettingsWindowClass" glib:is-gtype-struct-for="SettingsWindow">
		<field name="parent_class" readable="0" private="1">
			<type name="He.WindowClass" c:type="HeWindowClass"/>
		</field>
	</record>
	<record name="SettingsWindowPrivate" c:type="HeSettingsWindowPrivate" disguised="1"/>
	<class name="SideBar" c:type="HeSideBar" c:symbol-prefix="side_bar" glib:type-name="HeSideBar" glib:get-type="he_side_bar_get_type" glib:type-struct="SideBarClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A SideBar is a complementary component containing its own AppBar, title, subtitle, and elements.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SideBarPrivate" c:type="HeSideBarPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_side_bar_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new SideBar.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.SideBar" c:type="HeSideBar*"/>
			</return-value>
			<parameters>
				<parameter name="title" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the SideBar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="subtitle" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The subtitle of the SideBar. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="title" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the sidebar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_title" c:identifier="he_side_bar_get_title">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_title" c:identifier="he_side_bar_set_title">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="subtitle" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The title of the sidebar.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_subtitle" c:identifier="he_side_bar_get_subtitle">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_subtitle" c:identifier="he_side_bar_set_subtitle">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-buttons" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the SideBar should show the buttons.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_buttons" c:identifier="he_side_bar_get_show_buttons">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_buttons" c:identifier="he_side_bar_set_show_buttons">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="show-back" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the back button should be shown.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_back" c:identifier="he_side_bar_get_show_back">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_back" c:identifier="he_side_bar_set_show_back">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the SideBar&amp;apos;s AppBar is attached to.&lt;/para&gt;</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_side_bar_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_side_bar_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
		<property name="scroller" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that the SideBar&amp;apos;s AppBar is attached to.&lt;/para&gt;</doc>
			<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
		</property>
		<method name="get_scroller" c:identifier="he_side_bar_get_scroller">
			<return-value transfer-ownership="none">
				<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_scroller" c:identifier="he_side_bar_set_scroller">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow*"/>
				</parameter>
			</parameters>
		</method>
		<property name="has-margins" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Whether the view child has margins or is full-bleed.&lt;/para&gt;</doc>
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_has_margins" c:identifier="he_side_bar_get_has_margins">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_has_margins" c:identifier="he_side_bar_set_has_margins">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.SideBar" c:type="HeSideBar*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SideBarClass" c:type="HeSideBarClass" glib:is-gtype-struct-for="SideBar">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="SideBarPrivate" c:type="HeSideBarPrivate" disguised="1"/>
	<class name="Tab" c:type="HeTab" c:symbol-prefix="tab" glib:type-name="HeTab" glib:get-type="he_tab_get_type" glib:type-struct="TabClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Standard tab designed for TabSwitcher, used to form a tabbed UI&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabPrivate" c:type="HeTabPrivate*"/>
		</field>
		<field name="page_container" writable="1">
			<type name="He.TabPage" c:type="HeTabPage*"/>
		</field>
		<constructor name="new" c:identifier="he_tab_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Tab&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="page" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The label/title of the tab&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_tab_get_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_tab_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="tooltip" readable="0" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The Pango marked up text that will be shown in a tooltip when the tab is hovered.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="set_tooltip" c:identifier="he_tab_set_tooltip">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="pinned" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_pinned" c:identifier="he_tab_get_pinned">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_pinned" c:identifier="he_tab_set_pinned">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="can-pin" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_can_pin" c:identifier="he_tab_get_can_pin">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_can_pin" c:identifier="he_tab_set_can_pin">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="can-close" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_can_close" c:identifier="he_tab_get_can_close">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_can_close" c:identifier="he_tab_set_can_close">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="page" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The TabPage to hold children, to appear when this tab is active&lt;/para&gt;</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*"/>
		</property>
		<method name="get_page" c:identifier="he_tab_get_page">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_page" c:identifier="he_tab_set_page">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu appearing when the tab is clicked&lt;/para&gt;</doc>
			<type name="Gio.Menu" c:type="GMenu*"/>
		</property>
		<method name="get_menu" c:identifier="he_tab_get_menu">
			<return-value transfer-ownership="none">
				<type name="Gio.Menu" c:type="GMenu*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="actions" writable="1" construct-only="1">
			<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
		</property>
		<method name="get_actions" c:identifier="he_tab_get_actions">
			<return-value transfer-ownership="none">
				<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</instance-parameter>
			</parameters>
		</method>
	</class>
	<record name="TabClass" c:type="HeTabClass" glib:is-gtype-struct-for="Tab">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabPrivate" c:type="HeTabPrivate" disguised="1"/>
	<class name="TabPage" c:type="HeTabPage" c:symbol-prefix="tab_page" glib:type-name="HeTabPage" glib:get-type="he_tab_page_get_type" glib:type-struct="TabPageClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;Auxilary Class for handling the contents of Tabs&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabPagePrivate" c:type="HeTabPagePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_tab_page_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new Tab Page. This should be handled automatically by the Tab generation code.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TabPage" c:type="HeTabPage*"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="tab" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The Tab this page is associated with&lt;/para&gt;</doc>
			<type name="He.Tab" c:type="HeTab*"/>
		</property>
		<method name="get_tab" c:identifier="he_tab_page_get_tab">
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabPage" c:type="HeTabPage*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tab" c:identifier="he_tab_page_set_tab">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabPage" c:type="HeTabPage*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="TabPageClass" c:type="HeTabPageClass" glib:is-gtype-struct-for="TabPage">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabPagePrivate" c:type="HeTabPagePrivate" disguised="1"/>
	<class name="TabSwitcher" c:type="HeTabSwitcher" c:symbol-prefix="tab_switcher" glib:type-name="HeTabSwitcher" glib:get-type="he_tab_switcher_get_type" glib:type-struct="TabSwitcherClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;TabBar widget designed for a variable number of tabs.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TabSwitcherPrivate" c:type="HeTabSwitcherPrivate*"/>
		</field>
		<field name="notebook" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The internal Gtk.Notebook. This should only be accessed by a widget implementation&lt;/para&gt;</doc>
			<type name="Gtk.Notebook" c:type="GtkNotebook*"/>
		</field>
		<method name="get_tab_position" c:identifier="he_tab_switcher_get_tab_position">
			<doc xml:whitespace="preserve">&lt;para&gt;The position in the switcher of the tab&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<method name="insert_tab" c:identifier="he_tab_switcher_insert_tab">
			<doc xml:whitespace="preserve">&lt;para&gt;Insert a new tab into the TabSwitcher.&lt;/para&gt;
&lt;para&gt;To append a tab, you may use -1 as the index.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_tab" c:identifier="he_tab_switcher_remove_tab">
			<doc xml:whitespace="preserve">&lt;para&gt;Removes a tab from the TabSwitcher.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_tab_switcher_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new TabSwitcher&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
			</return-value>
		</constructor>
		<property name="n-tabs">
			<doc xml:whitespace="preserve">&lt;para&gt;The number of tabs in the TabSwitcher&lt;/para&gt;</doc>
			<type name="gint" c:type="gint"/>
		</property>
		<method name="get_n_tabs" c:identifier="he_tab_switcher_get_n_tabs">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="tabs">
			<doc xml:whitespace="preserve">&lt;para&gt;The list of tabs in the TabSwitcher&lt;/para&gt;</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="He.Tab" c:type="HeTab*"/>
			</type>
		</property>
		<method name="get_tabs" c:identifier="he_tab_switcher_get_tabs">
			<return-value transfer-ownership="none">
				<type name="GLib.List" c:type="GList*">
					<type name="He.Tab" c:type="HeTab*"/>
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="tab-bar-behavior" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The behavior of the tab bar and its visibility&lt;/para&gt;</doc>
			<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
		</property>
		<method name="get_tab_bar_behavior" c:identifier="he_tab_switcher_get_tab_bar_behavior">
			<return-value transfer-ownership="none">
				<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_tab_bar_behavior" c:identifier="he_tab_switcher_set_tab_bar_behavior">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-duplicate-tabs" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_duplicate_tabs" c:identifier="he_tab_switcher_get_allow_duplicate_tabs">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_duplicate_tabs" c:identifier="he_tab_switcher_set_allow_duplicate_tabs">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-drag" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_drag" c:identifier="he_tab_switcher_get_allow_drag">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_drag" c:identifier="he_tab_switcher_set_allow_drag">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-pinning" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_pinning" c:identifier="he_tab_switcher_get_allow_pinning">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_pinning" c:identifier="he_tab_switcher_set_allow_pinning">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-closing" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_closing" c:identifier="he_tab_switcher_get_allow_closing">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_closing" c:identifier="he_tab_switcher_set_allow_closing">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="allow-new-window" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_allow_new_window" c:identifier="he_tab_switcher_get_allow_new_window">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_allow_new_window" c:identifier="he_tab_switcher_set_allow_new_window">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<property name="current" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The current visible tab&lt;/para&gt;</doc>
			<type name="He.Tab" c:type="HeTab*"/>
		</property>
		<method name="get_current" c:identifier="he_tab_switcher_get_current">
			<return-value transfer-ownership="none">
				<type name="He.Tab" c:type="HeTab*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_current" c:identifier="he_tab_switcher_set_current">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</method>
		<property name="menu" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The menu appearing when the tab bar is clicked on a blank space&lt;/para&gt;</doc>
			<type name="Gio.Menu" c:type="GMenu*"/>
		</property>
		<method name="get_menu" c:identifier="he_tab_switcher_get_menu">
			<return-value transfer-ownership="none">
				<type name="Gio.Menu" c:type="GMenu*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="actions" writable="1" construct-only="1">
			<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
		</property>
		<method name="get_actions" c:identifier="he_tab_switcher_get_actions">
			<return-value transfer-ownership="none">
				<type name="Gio.SimpleActionGroup" c:type="GSimpleActionGroup*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.TabSwitcher" c:type="HeTabSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<glib:signal name="tab-added">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-removed">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-switched">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="old_tab" transfer-ownership="none" nullable="1">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
				<parameter name="new_tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-moved">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="tab-duplicated">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="duplicated_tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="new-tab-requested">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="close-tab-requested">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<parameter name="tab" transfer-ownership="none">
					<type name="He.Tab" c:type="HeTab*"/>
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="TabSwitcherClass" c:type="HeTabSwitcherClass" glib:is-gtype-struct-for="TabSwitcher">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="TabSwitcherPrivate" c:type="HeTabSwitcherPrivate" disguised="1"/>
	<enumeration name="TabSwitcherTabBarBehavior" c:type="HeTabSwitcherTabBarBehavior" glib:type-name="HeTabSwitcherTabBarBehavior" glib:get-type="he_tab_switcher_tab_bar_behavior_get_type">
		<member name="always" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_ALWAYS" value="0"/>
		<member name="single" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_SINGLE" value="1"/>
		<member name="never" c:identifier="HE_TAB_SWITCHER_TAB_BAR_BEHAVIOR_NEVER" value="2"/>
	</enumeration>
	<class name="TextButton" c:type="HeTextButton" c:symbol-prefix="text_button" glib:type-name="HeTextButton" glib:get-type="he_text_button_get_type" glib:type-struct="TextButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A TextButton is a button that displays text. It has a transparent background.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TextButtonPrivate" c:type="HeTextButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_text_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new TextButton.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.TextButton" c:type="HeTextButton*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The text to display on the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="from_icon" c:identifier="he_text_button_new_from_icon">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new TextButton from an icon.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TextButton" c:type="HeTextButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon to display on the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="TextButtonClass" c:type="HeTextButtonClass" glib:is-gtype-struct-for="TextButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="TextButtonPrivate" c:type="HeTextButtonPrivate" disguised="1"/>
	<class name="TintButton" c:type="HeTintButton" c:symbol-prefix="tint_button" glib:type-name="HeTintButton" glib:get-type="he_tint_button_get_type" glib:type-struct="TintButtonClass" parent="He.Button">
		<doc xml:whitespace="preserve">&lt;para&gt;A TintButton is similar to a FillButton, except that the color of the button has a tinted appearance. In addition, the TintButton also support
icons.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Button" c:type="HeButton"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TintButtonPrivate" c:type="HeTintButtonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_tint_button_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new TintButton.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.TintButton" c:type="HeTintButton*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The text to display on the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="from_icon" c:identifier="he_tint_button_new_from_icon">
			<doc xml:whitespace="preserve">&lt;para&gt;Create a new TintButton from an icon.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.TintButton" c:type="HeTintButton*"/>
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The icon to display on the button. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="TintButtonClass" c:type="HeTintButtonClass" glib:is-gtype-struct-for="TintButton">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ButtonClass" c:type="HeButtonClass"/>
		</field>
	</record>
	<record name="TintButtonPrivate" c:type="HeTintButtonPrivate" disguised="1"/>
	<class name="Toast" c:type="HeToast" c:symbol-prefix="toast" glib:type-name="HeToast" glib:get-type="he_toast_get_type" glib:type-struct="ToastClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A Toast is a widget containing a quick little message for the user with an optional action button.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ToastPrivate" c:type="HeToastPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_toast_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Creates a new Toast.&lt;/para&gt;</doc>
			<return-value transfer-ownership="none">
				<type name="He.Toast" c:type="HeToast*"/>
			</return-value>
			<parameters>
				<parameter name="label" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The title of the Toast &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="send_notification" c:identifier="he_toast_send_notification">
			<doc xml:whitespace="preserve">&lt;para&gt;Shows the Toast.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The notification text label to be displayed inside of &amp;num;this&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_toast_get_label">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_toast_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="default-action" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_default_action" c:identifier="he_toast_get_default_action">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_default_action" c:identifier="he_toast_set_default_action">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.Toast" c:type="HeToast*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<glib:signal name="closed">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the Toast is closed by activating the close button&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="action">
			<doc xml:whitespace="preserve">&lt;para&gt;Emitted when the default action button is activated&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</class>
	<record name="ToastClass" c:type="HeToastClass" glib:is-gtype-struct-for="Toast">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ToastPrivate" c:type="HeToastPrivate" disguised="1"/>
	<class name="ViewAux" c:type="HeViewAux" c:symbol-prefix="view_aux" glib:type-name="HeViewAux" glib:get-type="he_view_aux_get_type" glib:type-struct="ViewAuxClass" parent="He.View">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewAux shows a view with an optional side pane.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.View" c:type="HeView"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewAuxPrivate" c:type="HeViewAuxPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_aux_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewAux" c:type="HeViewAux*"/>
			</return-value>
		</constructor>
		<property name="show-aux" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_show_aux" c:identifier="he_view_aux_get_show_aux">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewAux" c:type="HeViewAux*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_show_aux" c:identifier="he_view_aux_set_show_aux">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewAux" c:type="HeViewAux*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewAuxClass" c:type="HeViewAuxClass" glib:is-gtype-struct-for="ViewAux">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ViewClass" c:type="HeViewClass"/>
		</field>
	</record>
	<record name="ViewAuxPrivate" c:type="HeViewAuxPrivate" disguised="1"/>
	<class name="ViewChooser" c:type="HeViewChooser" c:symbol-prefix="view_chooser" glib:type-name="HeViewChooser" glib:get-type="he_view_chooser_get_type" glib:type-struct="ViewChooserClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewChooser is a chooser switcher that filters a stack&amp;apos;s view.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewChooserPrivate" c:type="HeViewChooserPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_chooser_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewChooser" c:type="HeViewChooser*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this chooser switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_chooser_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewChooser" c:type="HeViewChooser*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_chooser_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewChooser" c:type="HeViewChooser*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewChooserClass" c:type="HeViewChooserClass" glib:is-gtype-struct-for="ViewChooser">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewChooserPrivate" c:type="HeViewChooserPrivate" disguised="1"/>
	<class name="ViewDual" c:type="HeViewDual" c:symbol-prefix="view_dual" glib:type-name="HeViewDual" glib:get-type="he_view_dual_get_type" glib:type-struct="ViewDualClass" parent="He.View">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewDual is a view that displays two views side by side.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.View" c:type="HeView"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewDualPrivate" c:type="HeViewDualPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_dual_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewDual" c:type="HeViewDual*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ViewDualClass" c:type="HeViewDualClass" glib:is-gtype-struct-for="ViewDual">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ViewClass" c:type="HeViewClass"/>
		</field>
	</record>
	<record name="ViewDualPrivate" c:type="HeViewDualPrivate" disguised="1"/>
	<class name="ViewMono" c:type="HeViewMono" c:symbol-prefix="view_mono" glib:type-name="HeViewMono" glib:get-type="he_view_mono_get_type" glib:type-struct="ViewMonoClass" parent="He.View">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewMono is a view that is a single-column layout.&lt;/para&gt;

Since: 1.0</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.View" c:type="HeView"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewMonoPrivate" c:type="HeViewMonoPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_mono_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewMono" c:type="HeViewMono*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ViewMonoClass" c:type="HeViewMonoClass" glib:is-gtype-struct-for="ViewMono">
		<field name="parent_class" readable="0" private="1">
			<type name="He.ViewClass" c:type="HeViewClass"/>
		</field>
	</record>
	<record name="ViewMonoPrivate" c:type="HeViewMonoPrivate" disguised="1"/>
	<class name="ViewSubTitle" c:type="HeViewSubTitle" c:symbol-prefix="view_sub_title" glib:type-name="HeViewSubTitle" glib:get-type="he_view_sub_title_get_type" glib:type-struct="ViewSubTitleClass" parent="He.Bin" deprecated="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewSubTitle is a view&amp;apos;s subtitle.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewSubTitlePrivate" c:type="HeViewSubTitlePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_sub_title_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
			</return-value>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the subtitle text.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_view_sub_title_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_view_sub_title_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSubTitle" c:type="HeViewSubTitle*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewSubTitleClass" c:type="HeViewSubTitleClass" glib:is-gtype-struct-for="ViewSubTitle">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewSubTitlePrivate" c:type="HeViewSubTitlePrivate" disguised="1"/>
	<class name="ViewSwitcher" c:type="HeViewSwitcher" c:symbol-prefix="view_switcher" glib:type-name="HeViewSwitcher" glib:get-type="he_view_switcher_get_type" glib:type-struct="ViewSwitcherClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewSwitcher is a switcher that controls a stack&amp;apos;s views.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewSwitcherPrivate" c:type="HeViewSwitcherPrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_switcher_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
			</return-value>
		</constructor>
		<property name="stack" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The stack that is controlled by this switcher.&lt;/para&gt;

Since: 1.0</doc>
			<type name="Gtk.Stack" c:type="GtkStack*"/>
		</property>
		<method name="get_stack" c:identifier="he_view_switcher_get_stack">
			<return-value transfer-ownership="none">
				<type name="Gtk.Stack" c:type="GtkStack*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_stack" c:identifier="he_view_switcher_set_stack">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewSwitcher" c:type="HeViewSwitcher*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Stack" c:type="GtkStack*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewSwitcherClass" c:type="HeViewSwitcherClass" glib:is-gtype-struct-for="ViewSwitcher">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewSwitcherPrivate" c:type="HeViewSwitcherPrivate" disguised="1"/>
	<class name="ViewTitle" c:type="HeViewTitle" c:symbol-prefix="view_title" glib:type-name="HeViewTitle" glib:get-type="he_view_title_get_type" glib:type-struct="ViewTitleClass" parent="He.Bin" deprecated="1">
		<doc xml:whitespace="preserve">&lt;para&gt;A ViewTitle is a widget that displays a view&amp;apos;s title.&lt;/para&gt;</doc>
		<implements name="Gtk.Buildable"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ViewTitlePrivate" c:type="HeViewTitlePrivate*"/>
		</field>
		<constructor name="new" c:identifier="he_view_title_new">
			<return-value transfer-ownership="none">
				<type name="He.ViewTitle" c:type="HeViewTitle*"/>
			</return-value>
		</constructor>
		<property name="label" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;Sets the title of the view.&lt;/para&gt;

Since: 1.0</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_label" c:identifier="he_view_title_get_label">
			<return-value transfer-ownership="none" nullable="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewTitle" c:type="HeViewTitle*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_label" c:identifier="he_view_title_set_label">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.ViewTitle" c:type="HeViewTitle*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ViewTitleClass" c:type="HeViewTitleClass" glib:is-gtype-struct-for="ViewTitle">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="ViewTitlePrivate" c:type="HeViewTitlePrivate" disguised="1"/>
	<class name="WelcomeScreen" c:type="HeWelcomeScreen" c:symbol-prefix="welcome_screen" glib:type-name="HeWelcomeScreen" glib:get-type="he_welcome_screen_get_type" glib:type-struct="WelcomeScreenClass" parent="He.Bin">
		<doc xml:whitespace="preserve">&lt;para&gt;A WelcomeScreen is a screen that presents options and actions before displaying the main application.&lt;/para&gt;</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="He.Bin" c:type="HeBin"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="WelcomeScreenPrivate" c:type="HeWelcomeScreenPrivate*"/>
		</field>
		<method name="add_child" c:identifier="he_welcome_screen_add_child">
			<doc xml:whitespace="preserve">&lt;para&gt;Add a child to the welcome screen, should only be used in the context of a UI or Blueprint file. There should be no need to use this method in
code.&lt;/para&gt;</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="builder" transfer-ownership="none">
					<type name="Gtk.Builder" c:type="GtkBuilder*"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="he_welcome_screen_new">
			<doc xml:whitespace="preserve">&lt;para&gt;Construct a new WelcomeScreen.&lt;/para&gt;

Since: 1.0</doc>
			<return-value transfer-ownership="none">
				<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
			</return-value>
			<parameters>
				<parameter name="appname" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The name of the application. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="description" transfer-ownership="none">
					<doc xml:whitespace="preserve">&lt;para&gt;The application description. &lt;/para&gt;</doc>
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="appname" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The name of the application.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_appname" c:identifier="he_welcome_screen_get_appname">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_appname" c:identifier="he_welcome_screen_set_appname">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="description" writable="1">
			<doc xml:whitespace="preserve">&lt;para&gt;The application description.&lt;/para&gt;</doc>
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_description" c:identifier="he_welcome_screen_get_description">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_description" c:identifier="he_welcome_screen_set_description">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="He.WelcomeScreen" c:type="HeWelcomeScreen*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="WelcomeScreenClass" c:type="HeWelcomeScreenClass" glib:is-gtype-struct-for="WelcomeScreen">
		<field name="parent_class" readable="0" private="1">
			<type name="He.BinClass" c:type="HeBinClass"/>
		</field>
	</record>
	<record name="WelcomeScreenPrivate" c:type="HeWelcomeScreenPrivate" disguised="1"/>
</namespace>
</repository>
